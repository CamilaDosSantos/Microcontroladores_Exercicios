
Exercicio_8_Lista4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fe8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080030a4  080030a4  000130a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030e4  080030e4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080030e4  080030e4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030e4  080030e4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030e4  080030e4  000130e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030e8  080030e8  000130e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080030ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000010  080030fc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  080030fc  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000926e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b4f  00000000  00000000  000292a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0002adf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e0  00000000  00000000  0002b6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae60  00000000  00000000  0002be90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009932  00000000  00000000  00046cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afab1  00000000  00000000  00050622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001000d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001da4  00000000  00000000  00100128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800308c 	.word	0x0800308c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	0800308c 	.word	0x0800308c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fa62 	bl	80006e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f86e 	bl	8000304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f93c 	bl	80004a4 <MX_GPIO_Init>
  MX_DMA_Init();
 800022c:	f000 f91c 	bl	8000468 <MX_DMA_Init>
  MX_ADC1_Init();
 8000230:	f000 f8b0 	bl	8000394 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000234:	4b2a      	ldr	r3, [pc, #168]	; (80002e0 <main+0xc4>)
 8000236:	0018      	movs	r0, r3
 8000238:	f001 fa24 	bl	8001684 <HAL_ADCEx_Calibration_Start>
   HAL_ADC_Start_DMA(&hadc1, &valorEntrada, 1);
 800023c:	4929      	ldr	r1, [pc, #164]	; (80002e4 <main+0xc8>)
 800023e:	4b28      	ldr	r3, [pc, #160]	; (80002e0 <main+0xc4>)
 8000240:	2201      	movs	r2, #1
 8000242:	0018      	movs	r0, r3
 8000244:	f000 fe0a 	bl	8000e5c <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  tensao = valorEntrada;
 8000248:	4b26      	ldr	r3, [pc, #152]	; (80002e4 <main+0xc8>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	4b26      	ldr	r3, [pc, #152]	; (80002e8 <main+0xcc>)
 800024e:	601a      	str	r2, [r3, #0]

	 	  if(tensao < 12){
 8000250:	4b25      	ldr	r3, [pc, #148]	; (80002e8 <main+0xcc>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2b0b      	cmp	r3, #11
 8000256:	d803      	bhi.n	8000260 <main+0x44>
	           botao = 1;
 8000258:	4b24      	ldr	r3, [pc, #144]	; (80002ec <main+0xd0>)
 800025a:	2201      	movs	r2, #1
 800025c:	801a      	strh	r2, [r3, #0]
 800025e:	e7f3      	b.n	8000248 <main+0x2c>
	 	  }else if(tensao >= 1800 && tensao <= 2000){
 8000260:	4b21      	ldr	r3, [pc, #132]	; (80002e8 <main+0xcc>)
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	23e1      	movs	r3, #225	; 0xe1
 8000266:	00db      	lsls	r3, r3, #3
 8000268:	429a      	cmp	r2, r3
 800026a:	d309      	bcc.n	8000280 <main+0x64>
 800026c:	4b1e      	ldr	r3, [pc, #120]	; (80002e8 <main+0xcc>)
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	23fa      	movs	r3, #250	; 0xfa
 8000272:	00db      	lsls	r3, r3, #3
 8000274:	429a      	cmp	r2, r3
 8000276:	d803      	bhi.n	8000280 <main+0x64>
	 	   botao = 2;
 8000278:	4b1c      	ldr	r3, [pc, #112]	; (80002ec <main+0xd0>)
 800027a:	2202      	movs	r2, #2
 800027c:	801a      	strh	r2, [r3, #0]
 800027e:	e02d      	b.n	80002dc <main+0xc0>
	 	  }else if(tensao >= 2500 && tensao <= 2700){
 8000280:	4b19      	ldr	r3, [pc, #100]	; (80002e8 <main+0xcc>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a1a      	ldr	r2, [pc, #104]	; (80002f0 <main+0xd4>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d908      	bls.n	800029c <main+0x80>
 800028a:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <main+0xcc>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a19      	ldr	r2, [pc, #100]	; (80002f4 <main+0xd8>)
 8000290:	4293      	cmp	r3, r2
 8000292:	d803      	bhi.n	800029c <main+0x80>
	            botao= 3;
 8000294:	4b15      	ldr	r3, [pc, #84]	; (80002ec <main+0xd0>)
 8000296:	2203      	movs	r2, #3
 8000298:	801a      	strh	r2, [r3, #0]
 800029a:	e01f      	b.n	80002dc <main+0xc0>
	 	  }else if(tensao >= 2800 && tensao <= 3000){
 800029c:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <main+0xcc>)
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	23af      	movs	r3, #175	; 0xaf
 80002a2:	011b      	lsls	r3, r3, #4
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d308      	bcc.n	80002ba <main+0x9e>
 80002a8:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <main+0xcc>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a12      	ldr	r2, [pc, #72]	; (80002f8 <main+0xdc>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d803      	bhi.n	80002ba <main+0x9e>
	            botao = 4;
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <main+0xd0>)
 80002b4:	2204      	movs	r2, #4
 80002b6:	801a      	strh	r2, [r3, #0]
 80002b8:	e010      	b.n	80002dc <main+0xc0>
	 	  }else if(tensao >= 3090 && tensao <= 3500){
 80002ba:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <main+0xcc>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a0f      	ldr	r2, [pc, #60]	; (80002fc <main+0xe0>)
 80002c0:	4293      	cmp	r3, r2
 80002c2:	d908      	bls.n	80002d6 <main+0xba>
 80002c4:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <main+0xcc>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a0d      	ldr	r2, [pc, #52]	; (8000300 <main+0xe4>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d803      	bhi.n	80002d6 <main+0xba>
	           botao = 5;
 80002ce:	4b07      	ldr	r3, [pc, #28]	; (80002ec <main+0xd0>)
 80002d0:	2205      	movs	r2, #5
 80002d2:	801a      	strh	r2, [r3, #0]
 80002d4:	e002      	b.n	80002dc <main+0xc0>
	 	  }else{
	 	  botao=0;
 80002d6:	4b05      	ldr	r3, [pc, #20]	; (80002ec <main+0xd0>)
 80002d8:	2200      	movs	r2, #0
 80002da:	801a      	strh	r2, [r3, #0]
	  tensao = valorEntrada;
 80002dc:	e7b4      	b.n	8000248 <main+0x2c>
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	20000030 	.word	0x20000030
 80002e4:	20000000 	.word	0x20000000
 80002e8:	2000002c 	.word	0x2000002c
 80002ec:	200000f4 	.word	0x200000f4
 80002f0:	000009c3 	.word	0x000009c3
 80002f4:	00000a8c 	.word	0x00000a8c
 80002f8:	00000bb8 	.word	0x00000bb8
 80002fc:	00000c11 	.word	0x00000c11
 8000300:	00000dac 	.word	0x00000dac

08000304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000304:	b590      	push	{r4, r7, lr}
 8000306:	b095      	sub	sp, #84	; 0x54
 8000308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030a:	2414      	movs	r4, #20
 800030c:	193b      	adds	r3, r7, r4
 800030e:	0018      	movs	r0, r3
 8000310:	233c      	movs	r3, #60	; 0x3c
 8000312:	001a      	movs	r2, r3
 8000314:	2100      	movs	r1, #0
 8000316:	f002 feb1 	bl	800307c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	0018      	movs	r0, r3
 800031e:	2310      	movs	r3, #16
 8000320:	001a      	movs	r2, r3
 8000322:	2100      	movs	r1, #0
 8000324:	f002 feaa 	bl	800307c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000328:	2380      	movs	r3, #128	; 0x80
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	0018      	movs	r0, r3
 800032e:	f001 ff15 	bl	800215c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000332:	193b      	adds	r3, r7, r4
 8000334:	2202      	movs	r2, #2
 8000336:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000338:	193b      	adds	r3, r7, r4
 800033a:	2280      	movs	r2, #128	; 0x80
 800033c:	0052      	lsls	r2, r2, #1
 800033e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000340:	193b      	adds	r3, r7, r4
 8000342:	2200      	movs	r2, #0
 8000344:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000346:	193b      	adds	r3, r7, r4
 8000348:	2240      	movs	r2, #64	; 0x40
 800034a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800034c:	193b      	adds	r3, r7, r4
 800034e:	2200      	movs	r2, #0
 8000350:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000352:	193b      	adds	r3, r7, r4
 8000354:	0018      	movs	r0, r3
 8000356:	f001 ff41 	bl	80021dc <HAL_RCC_OscConfig>
 800035a:	1e03      	subs	r3, r0, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800035e:	f000 f8b7 	bl	80004d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2207      	movs	r2, #7
 8000366:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	2200      	movs	r2, #0
 800036c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	2100      	movs	r1, #0
 800037e:	0018      	movs	r0, r3
 8000380:	f002 fa92 	bl	80028a8 <HAL_RCC_ClockConfig>
 8000384:	1e03      	subs	r3, r0, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000388:	f000 f8a2 	bl	80004d0 <Error_Handler>
  }
}
 800038c:	46c0      	nop			; (mov r8, r8)
 800038e:	46bd      	mov	sp, r7
 8000390:	b015      	add	sp, #84	; 0x54
 8000392:	bd90      	pop	{r4, r7, pc}

08000394 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	0018      	movs	r0, r3
 800039e:	230c      	movs	r3, #12
 80003a0:	001a      	movs	r2, r3
 80003a2:	2100      	movs	r1, #0
 80003a4:	f002 fe6a 	bl	800307c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80003a8:	4b2d      	ldr	r3, [pc, #180]	; (8000460 <MX_ADC1_Init+0xcc>)
 80003aa:	4a2e      	ldr	r2, [pc, #184]	; (8000464 <MX_ADC1_Init+0xd0>)
 80003ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80003ae:	4b2c      	ldr	r3, [pc, #176]	; (8000460 <MX_ADC1_Init+0xcc>)
 80003b0:	2280      	movs	r2, #128	; 0x80
 80003b2:	05d2      	lsls	r2, r2, #23
 80003b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003b6:	4b2a      	ldr	r3, [pc, #168]	; (8000460 <MX_ADC1_Init+0xcc>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003bc:	4b28      	ldr	r3, [pc, #160]	; (8000460 <MX_ADC1_Init+0xcc>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003c2:	4b27      	ldr	r3, [pc, #156]	; (8000460 <MX_ADC1_Init+0xcc>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003c8:	4b25      	ldr	r3, [pc, #148]	; (8000460 <MX_ADC1_Init+0xcc>)
 80003ca:	2204      	movs	r2, #4
 80003cc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003ce:	4b24      	ldr	r3, [pc, #144]	; (8000460 <MX_ADC1_Init+0xcc>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80003d4:	4b22      	ldr	r3, [pc, #136]	; (8000460 <MX_ADC1_Init+0xcc>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003da:	4b21      	ldr	r3, [pc, #132]	; (8000460 <MX_ADC1_Init+0xcc>)
 80003dc:	2201      	movs	r2, #1
 80003de:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80003e0:	4b1f      	ldr	r3, [pc, #124]	; (8000460 <MX_ADC1_Init+0xcc>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003e6:	4b1e      	ldr	r3, [pc, #120]	; (8000460 <MX_ADC1_Init+0xcc>)
 80003e8:	2220      	movs	r2, #32
 80003ea:	2100      	movs	r1, #0
 80003ec:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ee:	4b1c      	ldr	r3, [pc, #112]	; (8000460 <MX_ADC1_Init+0xcc>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003f4:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <MX_ADC1_Init+0xcc>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80003fa:	4b19      	ldr	r3, [pc, #100]	; (8000460 <MX_ADC1_Init+0xcc>)
 80003fc:	222c      	movs	r2, #44	; 0x2c
 80003fe:	2101      	movs	r1, #1
 8000400:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000402:	4b17      	ldr	r3, [pc, #92]	; (8000460 <MX_ADC1_Init+0xcc>)
 8000404:	2200      	movs	r2, #0
 8000406:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000408:	4b15      	ldr	r3, [pc, #84]	; (8000460 <MX_ADC1_Init+0xcc>)
 800040a:	2200      	movs	r2, #0
 800040c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800040e:	4b14      	ldr	r3, [pc, #80]	; (8000460 <MX_ADC1_Init+0xcc>)
 8000410:	2200      	movs	r2, #0
 8000412:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000414:	4b12      	ldr	r3, [pc, #72]	; (8000460 <MX_ADC1_Init+0xcc>)
 8000416:	223c      	movs	r2, #60	; 0x3c
 8000418:	2100      	movs	r1, #0
 800041a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800041c:	4b10      	ldr	r3, [pc, #64]	; (8000460 <MX_ADC1_Init+0xcc>)
 800041e:	2200      	movs	r2, #0
 8000420:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000422:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <MX_ADC1_Init+0xcc>)
 8000424:	0018      	movs	r0, r3
 8000426:	f000 fb3b 	bl	8000aa0 <HAL_ADC_Init>
 800042a:	1e03      	subs	r3, r0, #0
 800042c:	d001      	beq.n	8000432 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800042e:	f000 f84f 	bl	80004d0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	2201      	movs	r2, #1
 8000436:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	2200      	movs	r2, #0
 800043c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000444:	1d3a      	adds	r2, r7, #4
 8000446:	4b06      	ldr	r3, [pc, #24]	; (8000460 <MX_ADC1_Init+0xcc>)
 8000448:	0011      	movs	r1, r2
 800044a:	0018      	movs	r0, r3
 800044c:	f000 fdac 	bl	8000fa8 <HAL_ADC_ConfigChannel>
 8000450:	1e03      	subs	r3, r0, #0
 8000452:	d001      	beq.n	8000458 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000454:	f000 f83c 	bl	80004d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	b004      	add	sp, #16
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000030 	.word	0x20000030
 8000464:	40012400 	.word	0x40012400

08000468 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <MX_DMA_Init+0x38>)
 8000470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000472:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <MX_DMA_Init+0x38>)
 8000474:	2101      	movs	r1, #1
 8000476:	430a      	orrs	r2, r1
 8000478:	639a      	str	r2, [r3, #56]	; 0x38
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <MX_DMA_Init+0x38>)
 800047c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800047e:	2201      	movs	r2, #1
 8000480:	4013      	ands	r3, r2
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000486:	2200      	movs	r2, #0
 8000488:	2100      	movs	r1, #0
 800048a:	2009      	movs	r0, #9
 800048c:	f001 fa28 	bl	80018e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000490:	2009      	movs	r0, #9
 8000492:	f001 fa3a 	bl	800190a <HAL_NVIC_EnableIRQ>

}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	b002      	add	sp, #8
 800049c:	bd80      	pop	{r7, pc}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	40021000 	.word	0x40021000

080004a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_GPIO_Init+0x28>)
 80004ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004ae:	4b07      	ldr	r3, [pc, #28]	; (80004cc <MX_GPIO_Init+0x28>)
 80004b0:	2101      	movs	r1, #1
 80004b2:	430a      	orrs	r2, r1
 80004b4:	635a      	str	r2, [r3, #52]	; 0x34
 80004b6:	4b05      	ldr	r3, [pc, #20]	; (80004cc <MX_GPIO_Init+0x28>)
 80004b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ba:	2201      	movs	r2, #1
 80004bc:	4013      	ands	r3, r2
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]

}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b002      	add	sp, #8
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	40021000 	.word	0x40021000

080004d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d4:	b672      	cpsid	i
}
 80004d6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <Error_Handler+0x8>
	...

080004dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004e2:	4b11      	ldr	r3, [pc, #68]	; (8000528 <HAL_MspInit+0x4c>)
 80004e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <HAL_MspInit+0x4c>)
 80004e8:	2101      	movs	r1, #1
 80004ea:	430a      	orrs	r2, r1
 80004ec:	641a      	str	r2, [r3, #64]	; 0x40
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_MspInit+0x4c>)
 80004f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004f2:	2201      	movs	r2, #1
 80004f4:	4013      	ands	r3, r2
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <HAL_MspInit+0x4c>)
 80004fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <HAL_MspInit+0x4c>)
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	0549      	lsls	r1, r1, #21
 8000504:	430a      	orrs	r2, r1
 8000506:	63da      	str	r2, [r3, #60]	; 0x3c
 8000508:	4b07      	ldr	r3, [pc, #28]	; (8000528 <HAL_MspInit+0x4c>)
 800050a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	055b      	lsls	r3, r3, #21
 8000510:	4013      	ands	r3, r2
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000516:	23c0      	movs	r3, #192	; 0xc0
 8000518:	00db      	lsls	r3, r3, #3
 800051a:	0018      	movs	r0, r3
 800051c:	f000 f96a 	bl	80007f4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	b002      	add	sp, #8
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40021000 	.word	0x40021000

0800052c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b09d      	sub	sp, #116	; 0x74
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000534:	235c      	movs	r3, #92	; 0x5c
 8000536:	18fb      	adds	r3, r7, r3
 8000538:	0018      	movs	r0, r3
 800053a:	2314      	movs	r3, #20
 800053c:	001a      	movs	r2, r3
 800053e:	2100      	movs	r1, #0
 8000540:	f002 fd9c 	bl	800307c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000544:	2410      	movs	r4, #16
 8000546:	193b      	adds	r3, r7, r4
 8000548:	0018      	movs	r0, r3
 800054a:	234c      	movs	r3, #76	; 0x4c
 800054c:	001a      	movs	r2, r3
 800054e:	2100      	movs	r1, #0
 8000550:	f002 fd94 	bl	800307c <memset>
  if(hadc->Instance==ADC1)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a35      	ldr	r2, [pc, #212]	; (8000630 <HAL_ADC_MspInit+0x104>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d164      	bne.n	8000628 <HAL_ADC_MspInit+0xfc>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800055e:	193b      	adds	r3, r7, r4
 8000560:	2280      	movs	r2, #128	; 0x80
 8000562:	01d2      	lsls	r2, r2, #7
 8000564:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000566:	193b      	adds	r3, r7, r4
 8000568:	2200      	movs	r2, #0
 800056a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800056c:	193b      	adds	r3, r7, r4
 800056e:	0018      	movs	r0, r3
 8000570:	f002 fb24 	bl	8002bbc <HAL_RCCEx_PeriphCLKConfig>
 8000574:	1e03      	subs	r3, r0, #0
 8000576:	d001      	beq.n	800057c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000578:	f7ff ffaa 	bl	80004d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800057c:	4b2d      	ldr	r3, [pc, #180]	; (8000634 <HAL_ADC_MspInit+0x108>)
 800057e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000580:	4b2c      	ldr	r3, [pc, #176]	; (8000634 <HAL_ADC_MspInit+0x108>)
 8000582:	2180      	movs	r1, #128	; 0x80
 8000584:	0349      	lsls	r1, r1, #13
 8000586:	430a      	orrs	r2, r1
 8000588:	641a      	str	r2, [r3, #64]	; 0x40
 800058a:	4b2a      	ldr	r3, [pc, #168]	; (8000634 <HAL_ADC_MspInit+0x108>)
 800058c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800058e:	2380      	movs	r3, #128	; 0x80
 8000590:	035b      	lsls	r3, r3, #13
 8000592:	4013      	ands	r3, r2
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000598:	4b26      	ldr	r3, [pc, #152]	; (8000634 <HAL_ADC_MspInit+0x108>)
 800059a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800059c:	4b25      	ldr	r3, [pc, #148]	; (8000634 <HAL_ADC_MspInit+0x108>)
 800059e:	2101      	movs	r1, #1
 80005a0:	430a      	orrs	r2, r1
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <HAL_ADC_MspInit+0x108>)
 80005a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a8:	2201      	movs	r2, #1
 80005aa:	4013      	ands	r3, r2
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005b0:	215c      	movs	r1, #92	; 0x5c
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2201      	movs	r2, #1
 80005b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2203      	movs	r2, #3
 80005bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c4:	187a      	adds	r2, r7, r1
 80005c6:	23a0      	movs	r3, #160	; 0xa0
 80005c8:	05db      	lsls	r3, r3, #23
 80005ca:	0011      	movs	r1, r2
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 fc59 	bl	8001e84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80005d2:	4b19      	ldr	r3, [pc, #100]	; (8000638 <HAL_ADC_MspInit+0x10c>)
 80005d4:	4a19      	ldr	r2, [pc, #100]	; (800063c <HAL_ADC_MspInit+0x110>)
 80005d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <HAL_ADC_MspInit+0x10c>)
 80005da:	2205      	movs	r2, #5
 80005dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005de:	4b16      	ldr	r3, [pc, #88]	; (8000638 <HAL_ADC_MspInit+0x10c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <HAL_ADC_MspInit+0x10c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <HAL_ADC_MspInit+0x10c>)
 80005ec:	2280      	movs	r2, #128	; 0x80
 80005ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <HAL_ADC_MspInit+0x10c>)
 80005f2:	2280      	movs	r2, #128	; 0x80
 80005f4:	0092      	lsls	r2, r2, #2
 80005f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <HAL_ADC_MspInit+0x10c>)
 80005fa:	2280      	movs	r2, #128	; 0x80
 80005fc:	0112      	lsls	r2, r2, #4
 80005fe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <HAL_ADC_MspInit+0x10c>)
 8000602:	2220      	movs	r2, #32
 8000604:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <HAL_ADC_MspInit+0x10c>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <HAL_ADC_MspInit+0x10c>)
 800060e:	0018      	movs	r0, r3
 8000610:	f001 f998 	bl	8001944 <HAL_DMA_Init>
 8000614:	1e03      	subs	r3, r0, #0
 8000616:	d001      	beq.n	800061c <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8000618:	f7ff ff5a 	bl	80004d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4a06      	ldr	r2, [pc, #24]	; (8000638 <HAL_ADC_MspInit+0x10c>)
 8000620:	651a      	str	r2, [r3, #80]	; 0x50
 8000622:	4b05      	ldr	r3, [pc, #20]	; (8000638 <HAL_ADC_MspInit+0x10c>)
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	b01d      	add	sp, #116	; 0x74
 800062e:	bd90      	pop	{r4, r7, pc}
 8000630:	40012400 	.word	0x40012400
 8000634:	40021000 	.word	0x40021000
 8000638:	20000094 	.word	0x20000094
 800063c:	40020008 	.word	0x40020008

08000640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000644:	e7fe      	b.n	8000644 <NMI_Handler+0x4>

08000646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064a:	e7fe      	b.n	800064a <HardFault_Handler+0x4>

0800064c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000664:	f000 f8aa 	bl	80007bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000674:	4b03      	ldr	r3, [pc, #12]	; (8000684 <DMA1_Channel1_IRQHandler+0x14>)
 8000676:	0018      	movs	r0, r3
 8000678:	f001 fa96 	bl	8001ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	20000094 	.word	0x20000094

08000688 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000696:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000698:	f7ff fff6 	bl	8000688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800069e:	490d      	ldr	r1, [pc, #52]	; (80006d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a0:	4a0d      	ldr	r2, [pc, #52]	; (80006d8 <LoopForever+0xe>)
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a4:	e002      	b.n	80006ac <LoopCopyDataInit>

080006a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006aa:	3304      	adds	r3, #4

080006ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b0:	d3f9      	bcc.n	80006a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b2:	4a0a      	ldr	r2, [pc, #40]	; (80006dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b4:	4c0a      	ldr	r4, [pc, #40]	; (80006e0 <LoopForever+0x16>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b8:	e001      	b.n	80006be <LoopFillZerobss>

080006ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006bc:	3204      	adds	r2, #4

080006be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c0:	d3fb      	bcc.n	80006ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006c2:	f002 fcb7 	bl	8003034 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80006c6:	f7ff fda9 	bl	800021c <main>

080006ca <LoopForever>:

LoopForever:
  b LoopForever
 80006ca:	e7fe      	b.n	80006ca <LoopForever>
  ldr   r0, =_estack
 80006cc:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80006d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80006d8:	080030ec 	.word	0x080030ec
  ldr r2, =_sbss
 80006dc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80006e0:	200000fc 	.word	0x200000fc

080006e4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e4:	e7fe      	b.n	80006e4 <ADC1_COMP_IRQHandler>
	...

080006e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006ee:	1dfb      	adds	r3, r7, #7
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <HAL_Init+0x3c>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <HAL_Init+0x3c>)
 80006fa:	2180      	movs	r1, #128	; 0x80
 80006fc:	0049      	lsls	r1, r1, #1
 80006fe:	430a      	orrs	r2, r1
 8000700:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000702:	2003      	movs	r0, #3
 8000704:	f000 f810 	bl	8000728 <HAL_InitTick>
 8000708:	1e03      	subs	r3, r0, #0
 800070a:	d003      	beq.n	8000714 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800070c:	1dfb      	adds	r3, r7, #7
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
 8000712:	e001      	b.n	8000718 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000714:	f7ff fee2 	bl	80004dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000718:	1dfb      	adds	r3, r7, #7
 800071a:	781b      	ldrb	r3, [r3, #0]
}
 800071c:	0018      	movs	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	b002      	add	sp, #8
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40022000 	.word	0x40022000

08000728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000730:	230f      	movs	r3, #15
 8000732:	18fb      	adds	r3, r7, r3
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000738:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <HAL_InitTick+0x88>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d02b      	beq.n	8000798 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000740:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <HAL_InitTick+0x8c>)
 8000742:	681c      	ldr	r4, [r3, #0]
 8000744:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <HAL_InitTick+0x88>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	0019      	movs	r1, r3
 800074a:	23fa      	movs	r3, #250	; 0xfa
 800074c:	0098      	lsls	r0, r3, #2
 800074e:	f7ff fcd9 	bl	8000104 <__udivsi3>
 8000752:	0003      	movs	r3, r0
 8000754:	0019      	movs	r1, r3
 8000756:	0020      	movs	r0, r4
 8000758:	f7ff fcd4 	bl	8000104 <__udivsi3>
 800075c:	0003      	movs	r3, r0
 800075e:	0018      	movs	r0, r3
 8000760:	f001 f8e3 	bl	800192a <HAL_SYSTICK_Config>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d112      	bne.n	800078e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b03      	cmp	r3, #3
 800076c:	d80a      	bhi.n	8000784 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
 8000774:	2200      	movs	r2, #0
 8000776:	0018      	movs	r0, r3
 8000778:	f001 f8b2 	bl	80018e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_InitTick+0x90>)
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	e00d      	b.n	80007a0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000784:	230f      	movs	r3, #15
 8000786:	18fb      	adds	r3, r7, r3
 8000788:	2201      	movs	r2, #1
 800078a:	701a      	strb	r2, [r3, #0]
 800078c:	e008      	b.n	80007a0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800078e:	230f      	movs	r3, #15
 8000790:	18fb      	adds	r3, r7, r3
 8000792:	2201      	movs	r2, #1
 8000794:	701a      	strb	r2, [r3, #0]
 8000796:	e003      	b.n	80007a0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000798:	230f      	movs	r3, #15
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2201      	movs	r2, #1
 800079e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80007a0:	230f      	movs	r3, #15
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	781b      	ldrb	r3, [r3, #0]
}
 80007a6:	0018      	movs	r0, r3
 80007a8:	46bd      	mov	sp, r7
 80007aa:	b005      	add	sp, #20
 80007ac:	bd90      	pop	{r4, r7, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	2000000c 	.word	0x2000000c
 80007b4:	20000004 	.word	0x20000004
 80007b8:	20000008 	.word	0x20000008

080007bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <HAL_IncTick+0x1c>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	001a      	movs	r2, r3
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <HAL_IncTick+0x20>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	18d2      	adds	r2, r2, r3
 80007cc:	4b03      	ldr	r3, [pc, #12]	; (80007dc <HAL_IncTick+0x20>)
 80007ce:	601a      	str	r2, [r3, #0]
}
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	2000000c 	.word	0x2000000c
 80007dc:	200000f8 	.word	0x200000f8

080007e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  return uwTick;
 80007e4:	4b02      	ldr	r3, [pc, #8]	; (80007f0 <HAL_GetTick+0x10>)
 80007e6:	681b      	ldr	r3, [r3, #0]
}
 80007e8:	0018      	movs	r0, r3
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	200000f8 	.word	0x200000f8

080007f4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a06      	ldr	r2, [pc, #24]	; (800081c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000802:	4013      	ands	r3, r2
 8000804:	0019      	movs	r1, r3
 8000806:	4b04      	ldr	r3, [pc, #16]	; (8000818 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	430a      	orrs	r2, r1
 800080c:	601a      	str	r2, [r3, #0]
}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b002      	add	sp, #8
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	40010000 	.word	0x40010000
 800081c:	fffff9ff 	.word	0xfffff9ff

08000820 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a05      	ldr	r2, [pc, #20]	; (8000844 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000830:	401a      	ands	r2, r3
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	431a      	orrs	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	601a      	str	r2, [r3, #0]
}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	b002      	add	sp, #8
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	fe3fffff 	.word	0xfe3fffff

08000848 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	23e0      	movs	r3, #224	; 0xe0
 8000856:	045b      	lsls	r3, r3, #17
 8000858:	4013      	ands	r3, r2
}
 800085a:	0018      	movs	r0, r3
 800085c:	46bd      	mov	sp, r7
 800085e:	b002      	add	sp, #8
 8000860:	bd80      	pop	{r7, pc}

08000862 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b084      	sub	sp, #16
 8000866:	af00      	add	r7, sp, #0
 8000868:	60f8      	str	r0, [r7, #12]
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	2104      	movs	r1, #4
 8000876:	400a      	ands	r2, r1
 8000878:	2107      	movs	r1, #7
 800087a:	4091      	lsls	r1, r2
 800087c:	000a      	movs	r2, r1
 800087e:	43d2      	mvns	r2, r2
 8000880:	401a      	ands	r2, r3
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	2104      	movs	r1, #4
 8000886:	400b      	ands	r3, r1
 8000888:	6879      	ldr	r1, [r7, #4]
 800088a:	4099      	lsls	r1, r3
 800088c:	000b      	movs	r3, r1
 800088e:	431a      	orrs	r2, r3
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	b004      	add	sp, #16
 800089a:	bd80      	pop	{r7, pc}

0800089c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	68da      	ldr	r2, [r3, #12]
 80008a8:	23c0      	movs	r3, #192	; 0xc0
 80008aa:	011b      	lsls	r3, r3, #4
 80008ac:	4013      	ands	r3, r2
 80008ae:	d101      	bne.n	80008b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80008b0:	2301      	movs	r3, #1
 80008b2:	e000      	b.n	80008b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	0018      	movs	r0, r3
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b002      	add	sp, #8
 80008bc:	bd80      	pop	{r7, pc}

080008be <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b084      	sub	sp, #16
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	60f8      	str	r0, [r7, #12]
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	211f      	movs	r1, #31
 80008d2:	400a      	ands	r2, r1
 80008d4:	210f      	movs	r1, #15
 80008d6:	4091      	lsls	r1, r2
 80008d8:	000a      	movs	r2, r1
 80008da:	43d2      	mvns	r2, r2
 80008dc:	401a      	ands	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	0e9b      	lsrs	r3, r3, #26
 80008e2:	210f      	movs	r1, #15
 80008e4:	4019      	ands	r1, r3
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	201f      	movs	r0, #31
 80008ea:	4003      	ands	r3, r0
 80008ec:	4099      	lsls	r1, r3
 80008ee:	000b      	movs	r3, r1
 80008f0:	431a      	orrs	r2, r3
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b004      	add	sp, #16
 80008fc:	bd80      	pop	{r7, pc}

080008fe <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
 8000906:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	035b      	lsls	r3, r3, #13
 8000910:	0b5b      	lsrs	r3, r3, #13
 8000912:	431a      	orrs	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000918:	46c0      	nop			; (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	b002      	add	sp, #8
 800091e:	bd80      	pop	{r7, pc}

08000920 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800092e:	683a      	ldr	r2, [r7, #0]
 8000930:	0352      	lsls	r2, r2, #13
 8000932:	0b52      	lsrs	r2, r2, #13
 8000934:	43d2      	mvns	r2, r2
 8000936:	401a      	ands	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b002      	add	sp, #8
 8000942:	bd80      	pop	{r7, pc}

08000944 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	68ba      	ldr	r2, [r7, #8]
 8000956:	0212      	lsls	r2, r2, #8
 8000958:	43d2      	mvns	r2, r2
 800095a:	401a      	ands	r2, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	021b      	lsls	r3, r3, #8
 8000960:	6879      	ldr	r1, [r7, #4]
 8000962:	400b      	ands	r3, r1
 8000964:	4904      	ldr	r1, [pc, #16]	; (8000978 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000966:	400b      	ands	r3, r1
 8000968:	431a      	orrs	r2, r3
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b004      	add	sp, #16
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	07ffff00 	.word	0x07ffff00

0800097c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	4a05      	ldr	r2, [pc, #20]	; (80009a0 <LL_ADC_EnableInternalRegulator+0x24>)
 800098a:	4013      	ands	r3, r2
 800098c:	2280      	movs	r2, #128	; 0x80
 800098e:	0552      	lsls	r2, r2, #21
 8000990:	431a      	orrs	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	b002      	add	sp, #8
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	6fffffe8 	.word	0x6fffffe8

080009a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	689a      	ldr	r2, [r3, #8]
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	055b      	lsls	r3, r3, #21
 80009b4:	401a      	ands	r2, r3
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	055b      	lsls	r3, r3, #21
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d101      	bne.n	80009c2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80009be:	2301      	movs	r3, #1
 80009c0:	e000      	b.n	80009c4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80009c2:	2300      	movs	r3, #0
}
 80009c4:	0018      	movs	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b002      	add	sp, #8
 80009ca:	bd80      	pop	{r7, pc}

080009cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <LL_ADC_Enable+0x20>)
 80009da:	4013      	ands	r3, r2
 80009dc:	2201      	movs	r2, #1
 80009de:	431a      	orrs	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b002      	add	sp, #8
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	7fffffe8 	.word	0x7fffffe8

080009f0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <LL_ADC_Disable+0x20>)
 80009fe:	4013      	ands	r3, r2
 8000a00:	2202      	movs	r2, #2
 8000a02:	431a      	orrs	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b002      	add	sp, #8
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	7fffffe8 	.word	0x7fffffe8

08000a14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	2201      	movs	r2, #1
 8000a22:	4013      	ands	r3, r2
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d101      	bne.n	8000a2c <LL_ADC_IsEnabled+0x18>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e000      	b.n	8000a2e <LL_ADC_IsEnabled+0x1a>
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	0018      	movs	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b002      	add	sp, #8
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	2202      	movs	r2, #2
 8000a44:	4013      	ands	r3, r2
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d101      	bne.n	8000a4e <LL_ADC_IsDisableOngoing+0x18>
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e000      	b.n	8000a50 <LL_ADC_IsDisableOngoing+0x1a>
 8000a4e:	2300      	movs	r3, #0
}
 8000a50:	0018      	movs	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b002      	add	sp, #8
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <LL_ADC_REG_StartConversion+0x20>)
 8000a66:	4013      	ands	r3, r2
 8000a68:	2204      	movs	r2, #4
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b002      	add	sp, #8
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	7fffffe8 	.word	0x7fffffe8

08000a7c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	2204      	movs	r2, #4
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	2b04      	cmp	r3, #4
 8000a8e:	d101      	bne.n	8000a94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000a90:	2301      	movs	r3, #1
 8000a92:	e000      	b.n	8000a96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	0018      	movs	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b002      	add	sp, #8
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000aa8:	231f      	movs	r3, #31
 8000aaa:	18fb      	adds	r3, r7, r3
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d101      	bne.n	8000ac6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e1b1      	b.n	8000e2a <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d10a      	bne.n	8000ae4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f7ff fd2b 	bl	800052c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2254      	movs	r2, #84	; 0x54
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f7ff ff5b 	bl	80009a4 <LL_ADC_IsInternalRegulatorEnabled>
 8000aee:	1e03      	subs	r3, r0, #0
 8000af0:	d115      	bne.n	8000b1e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	0018      	movs	r0, r3
 8000af8:	f7ff ff40 	bl	800097c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000afc:	4bcd      	ldr	r3, [pc, #820]	; (8000e34 <HAL_ADC_Init+0x394>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	49cd      	ldr	r1, [pc, #820]	; (8000e38 <HAL_ADC_Init+0x398>)
 8000b02:	0018      	movs	r0, r3
 8000b04:	f7ff fafe 	bl	8000104 <__udivsi3>
 8000b08:	0003      	movs	r3, r0
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000b10:	e002      	b.n	8000b18 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	3b01      	subs	r3, #1
 8000b16:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d1f9      	bne.n	8000b12 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	0018      	movs	r0, r3
 8000b24:	f7ff ff3e 	bl	80009a4 <LL_ADC_IsInternalRegulatorEnabled>
 8000b28:	1e03      	subs	r3, r0, #0
 8000b2a:	d10f      	bne.n	8000b4c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b30:	2210      	movs	r2, #16
 8000b32:	431a      	orrs	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	431a      	orrs	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000b44:	231f      	movs	r3, #31
 8000b46:	18fb      	adds	r3, r7, r3
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	0018      	movs	r0, r3
 8000b52:	f7ff ff93 	bl	8000a7c <LL_ADC_REG_IsConversionOngoing>
 8000b56:	0003      	movs	r3, r0
 8000b58:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5e:	2210      	movs	r2, #16
 8000b60:	4013      	ands	r3, r2
 8000b62:	d000      	beq.n	8000b66 <HAL_ADC_Init+0xc6>
 8000b64:	e154      	b.n	8000e10 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d000      	beq.n	8000b6e <HAL_ADC_Init+0xce>
 8000b6c:	e150      	b.n	8000e10 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b72:	4ab2      	ldr	r2, [pc, #712]	; (8000e3c <HAL_ADC_Init+0x39c>)
 8000b74:	4013      	ands	r3, r2
 8000b76:	2202      	movs	r2, #2
 8000b78:	431a      	orrs	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	0018      	movs	r0, r3
 8000b84:	f7ff ff46 	bl	8000a14 <LL_ADC_IsEnabled>
 8000b88:	1e03      	subs	r3, r0, #0
 8000b8a:	d156      	bne.n	8000c3a <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	2218      	movs	r2, #24
 8000b94:	4393      	bics	r3, r2
 8000b96:	0019      	movs	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	0f9b      	lsrs	r3, r3, #30
 8000baa:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	223c      	movs	r2, #60	; 0x3c
 8000bbc:	5c9b      	ldrb	r3, [r3, r2]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d111      	bne.n	8000be6 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	0f9b      	lsrs	r3, r3, #30
 8000bc8:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000bce:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000bd4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000bda:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	2201      	movs	r2, #1
 8000be2:	4313      	orrs	r3, r2
 8000be4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	691b      	ldr	r3, [r3, #16]
 8000bec:	4a94      	ldr	r2, [pc, #592]	; (8000e40 <HAL_ADC_Init+0x3a0>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	0019      	movs	r1, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	23c0      	movs	r3, #192	; 0xc0
 8000c02:	061b      	lsls	r3, r3, #24
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d018      	beq.n	8000c3a <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	05db      	lsls	r3, r3, #23
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d012      	beq.n	8000c3a <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000c18:	2380      	movs	r3, #128	; 0x80
 8000c1a:	061b      	lsls	r3, r3, #24
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d00c      	beq.n	8000c3a <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000c20:	4b88      	ldr	r3, [pc, #544]	; (8000e44 <HAL_ADC_Init+0x3a4>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a88      	ldr	r2, [pc, #544]	; (8000e48 <HAL_ADC_Init+0x3a8>)
 8000c26:	4013      	ands	r3, r2
 8000c28:	0019      	movs	r1, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	23f0      	movs	r3, #240	; 0xf0
 8000c30:	039b      	lsls	r3, r3, #14
 8000c32:	401a      	ands	r2, r3
 8000c34:	4b83      	ldr	r3, [pc, #524]	; (8000e44 <HAL_ADC_Init+0x3a4>)
 8000c36:	430a      	orrs	r2, r1
 8000c38:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	7e1b      	ldrb	r3, [r3, #24]
 8000c3e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	7e5b      	ldrb	r3, [r3, #25]
 8000c44:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000c46:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	7e9b      	ldrb	r3, [r3, #26]
 8000c4c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000c4e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d002      	beq.n	8000c5e <HAL_ADC_Init+0x1be>
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	015b      	lsls	r3, r3, #5
 8000c5c:	e000      	b.n	8000c60 <HAL_ADC_Init+0x1c0>
 8000c5e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000c60:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000c66:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	da04      	bge.n	8000c7a <HAL_ADC_Init+0x1da>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	691b      	ldr	r3, [r3, #16]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	085b      	lsrs	r3, r3, #1
 8000c78:	e001      	b.n	8000c7e <HAL_ADC_Init+0x1de>
 8000c7a:	2380      	movs	r3, #128	; 0x80
 8000c7c:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8000c7e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	212c      	movs	r1, #44	; 0x2c
 8000c84:	5c5b      	ldrb	r3, [r3, r1]
 8000c86:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000c88:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2220      	movs	r2, #32
 8000c94:	5c9b      	ldrb	r3, [r3, r2]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d115      	bne.n	8000cc6 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	7e9b      	ldrb	r3, [r3, #26]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d105      	bne.n	8000cae <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	2280      	movs	r2, #128	; 0x80
 8000ca6:	0252      	lsls	r2, r2, #9
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
 8000cac:	e00b      	b.n	8000cc6 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb2:	2220      	movs	r2, #32
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d00a      	beq.n	8000ce4 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cd2:	23e0      	movs	r3, #224	; 0xe0
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	4a58      	ldr	r2, [pc, #352]	; (8000e4c <HAL_ADC_Init+0x3ac>)
 8000cec:	4013      	ands	r3, r2
 8000cee:	0019      	movs	r1, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	691b      	ldr	r3, [r3, #16]
 8000d00:	4a53      	ldr	r2, [pc, #332]	; (8000e50 <HAL_ADC_Init+0x3b0>)
 8000d02:	4013      	ands	r3, r2
 8000d04:	0019      	movs	r1, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	697a      	ldr	r2, [r7, #20]
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6818      	ldr	r0, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d18:	001a      	movs	r2, r3
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	f7ff fda1 	bl	8000862 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6818      	ldr	r0, [r3, #0]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d28:	494a      	ldr	r1, [pc, #296]	; (8000e54 <HAL_ADC_Init+0x3b4>)
 8000d2a:	001a      	movs	r2, r3
 8000d2c:	f7ff fd99 	bl	8000862 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	691b      	ldr	r3, [r3, #16]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d109      	bne.n	8000d4c <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2110      	movs	r1, #16
 8000d44:	4249      	negs	r1, r1
 8000d46:	430a      	orrs	r2, r1
 8000d48:	629a      	str	r2, [r3, #40]	; 0x28
 8000d4a:	e03a      	b.n	8000dc2 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	691a      	ldr	r2, [r3, #16]
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	039b      	lsls	r3, r3, #14
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d134      	bne.n	8000dc2 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	e00c      	b.n	8000d78 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	40da      	lsrs	r2, r3
 8000d68:	0013      	movs	r3, r2
 8000d6a:	220f      	movs	r2, #15
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	2b0f      	cmp	r3, #15
 8000d70:	d006      	beq.n	8000d80 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	3301      	adds	r3, #1
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	2b07      	cmp	r3, #7
 8000d7c:	d9ef      	bls.n	8000d5e <HAL_ADC_Init+0x2be>
 8000d7e:	e000      	b.n	8000d82 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8000d80:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d109      	bne.n	8000d9c <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2110      	movs	r1, #16
 8000d94:	4249      	negs	r1, r1
 8000d96:	430a      	orrs	r2, r1
 8000d98:	629a      	str	r2, [r3, #40]	; 0x28
 8000d9a:	e012      	b.n	8000dc2 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	221c      	movs	r2, #28
 8000dac:	4013      	ands	r3, r2
 8000dae:	2210      	movs	r2, #16
 8000db0:	4252      	negs	r2, r2
 8000db2:	409a      	lsls	r2, r3
 8000db4:	0011      	movs	r1, r2
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	4a23      	ldr	r2, [pc, #140]	; (8000e58 <HAL_ADC_Init+0x3b8>)
 8000dca:	4013      	ands	r3, r2
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d10b      	bne.n	8000dea <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ddc:	2203      	movs	r2, #3
 8000dde:	4393      	bics	r3, r2
 8000de0:	2201      	movs	r2, #1
 8000de2:	431a      	orrs	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000de8:	e01c      	b.n	8000e24 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dee:	2212      	movs	r2, #18
 8000df0:	4393      	bics	r3, r2
 8000df2:	2210      	movs	r2, #16
 8000df4:	431a      	orrs	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dfe:	2201      	movs	r2, #1
 8000e00:	431a      	orrs	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8000e06:	231f      	movs	r3, #31
 8000e08:	18fb      	adds	r3, r7, r3
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000e0e:	e009      	b.n	8000e24 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e14:	2210      	movs	r2, #16
 8000e16:	431a      	orrs	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000e1c:	231f      	movs	r3, #31
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000e24:	231f      	movs	r3, #31
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	781b      	ldrb	r3, [r3, #0]
}
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b008      	add	sp, #32
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	20000004 	.word	0x20000004
 8000e38:	00030d40 	.word	0x00030d40
 8000e3c:	fffffefd 	.word	0xfffffefd
 8000e40:	1ffffc02 	.word	0x1ffffc02
 8000e44:	40012708 	.word	0x40012708
 8000e48:	ffc3ffff 	.word	0xffc3ffff
 8000e4c:	fffe0219 	.word	0xfffe0219
 8000e50:	dffffc02 	.word	0xdffffc02
 8000e54:	07ffff04 	.word	0x07ffff04
 8000e58:	833fffe7 	.word	0x833fffe7

08000e5c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000e5c:	b5b0      	push	{r4, r5, r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f7ff fe05 	bl	8000a7c <LL_ADC_REG_IsConversionOngoing>
 8000e72:	1e03      	subs	r3, r0, #0
 8000e74:	d16c      	bne.n	8000f50 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2254      	movs	r2, #84	; 0x54
 8000e7a:	5c9b      	ldrb	r3, [r3, r2]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d101      	bne.n	8000e84 <HAL_ADC_Start_DMA+0x28>
 8000e80:	2302      	movs	r3, #2
 8000e82:	e06c      	b.n	8000f5e <HAL_ADC_Start_DMA+0x102>
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2254      	movs	r2, #84	; 0x54
 8000e88:	2101      	movs	r1, #1
 8000e8a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	2201      	movs	r2, #1
 8000e94:	4013      	ands	r3, r2
 8000e96:	d113      	bne.n	8000ec0 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f7ff fdb9 	bl	8000a14 <LL_ADC_IsEnabled>
 8000ea2:	1e03      	subs	r3, r0, #0
 8000ea4:	d004      	beq.n	8000eb0 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f7ff fda0 	bl	80009f0 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2101      	movs	r1, #1
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000ec0:	2517      	movs	r5, #23
 8000ec2:	197c      	adds	r4, r7, r5
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f000 fa46 	bl	8001358 <ADC_Enable>
 8000ecc:	0003      	movs	r3, r0
 8000ece:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ed0:	002c      	movs	r4, r5
 8000ed2:	193b      	adds	r3, r7, r4
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d13e      	bne.n	8000f58 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ede:	4a22      	ldr	r2, [pc, #136]	; (8000f68 <HAL_ADC_Start_DMA+0x10c>)
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	0052      	lsls	r2, r2, #1
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ef6:	4a1d      	ldr	r2, [pc, #116]	; (8000f6c <HAL_ADC_Start_DMA+0x110>)
 8000ef8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000efe:	4a1c      	ldr	r2, [pc, #112]	; (8000f70 <HAL_ADC_Start_DMA+0x114>)
 8000f00:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f06:	4a1b      	ldr	r2, [pc, #108]	; (8000f74 <HAL_ADC_Start_DMA+0x118>)
 8000f08:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	221c      	movs	r2, #28
 8000f10:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2254      	movs	r2, #84	; 0x54
 8000f16:	2100      	movs	r1, #0
 8000f18:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	685a      	ldr	r2, [r3, #4]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2110      	movs	r1, #16
 8000f26:	430a      	orrs	r2, r1
 8000f28:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	3340      	adds	r3, #64	; 0x40
 8000f34:	0019      	movs	r1, r3
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	193c      	adds	r4, r7, r4
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f000 fdae 	bl	8001a9c <HAL_DMA_Start_IT>
 8000f40:	0003      	movs	r3, r0
 8000f42:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f7ff fd85 	bl	8000a58 <LL_ADC_REG_StartConversion>
 8000f4e:	e003      	b.n	8000f58 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f50:	2317      	movs	r3, #23
 8000f52:	18fb      	adds	r3, r7, r3
 8000f54:	2202      	movs	r2, #2
 8000f56:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000f58:	2317      	movs	r3, #23
 8000f5a:	18fb      	adds	r3, r7, r3
 8000f5c:	781b      	ldrb	r3, [r3, #0]
}
 8000f5e:	0018      	movs	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b006      	add	sp, #24
 8000f64:	bdb0      	pop	{r4, r5, r7, pc}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	fffff0fe 	.word	0xfffff0fe
 8000f6c:	08001521 	.word	0x08001521
 8000f70:	080015e9 	.word	0x080015e9
 8000f74:	08001607 	.word	0x08001607

08000f78 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b002      	add	sp, #8
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b002      	add	sp, #8
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000fa0:	46c0      	nop			; (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b002      	add	sp, #8
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb2:	2317      	movs	r3, #23
 8000fb4:	18fb      	adds	r3, r7, r3
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2254      	movs	r2, #84	; 0x54
 8000fc2:	5c9b      	ldrb	r3, [r3, r2]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d101      	bne.n	8000fcc <HAL_ADC_ConfigChannel+0x24>
 8000fc8:	2302      	movs	r3, #2
 8000fca:	e1c0      	b.n	800134e <HAL_ADC_ConfigChannel+0x3a6>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2254      	movs	r2, #84	; 0x54
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f7ff fd4f 	bl	8000a7c <LL_ADC_REG_IsConversionOngoing>
 8000fde:	1e03      	subs	r3, r0, #0
 8000fe0:	d000      	beq.n	8000fe4 <HAL_ADC_ConfigChannel+0x3c>
 8000fe2:	e1a3      	b.n	800132c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d100      	bne.n	8000fee <HAL_ADC_ConfigChannel+0x46>
 8000fec:	e143      	b.n	8001276 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	691a      	ldr	r2, [r3, #16]
 8000ff2:	2380      	movs	r3, #128	; 0x80
 8000ff4:	061b      	lsls	r3, r3, #24
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d004      	beq.n	8001004 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000ffe:	4ac1      	ldr	r2, [pc, #772]	; (8001304 <HAL_ADC_ConfigChannel+0x35c>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d108      	bne.n	8001016 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	0019      	movs	r1, r3
 800100e:	0010      	movs	r0, r2
 8001010:	f7ff fc75 	bl	80008fe <LL_ADC_REG_SetSequencerChAdd>
 8001014:	e0c9      	b.n	80011aa <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	211f      	movs	r1, #31
 8001020:	400b      	ands	r3, r1
 8001022:	210f      	movs	r1, #15
 8001024:	4099      	lsls	r1, r3
 8001026:	000b      	movs	r3, r1
 8001028:	43db      	mvns	r3, r3
 800102a:	4013      	ands	r3, r2
 800102c:	0019      	movs	r1, r3
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	035b      	lsls	r3, r3, #13
 8001034:	0b5b      	lsrs	r3, r3, #13
 8001036:	d105      	bne.n	8001044 <HAL_ADC_ConfigChannel+0x9c>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	0e9b      	lsrs	r3, r3, #26
 800103e:	221f      	movs	r2, #31
 8001040:	4013      	ands	r3, r2
 8001042:	e098      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1ce>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2201      	movs	r2, #1
 800104a:	4013      	ands	r3, r2
 800104c:	d000      	beq.n	8001050 <HAL_ADC_ConfigChannel+0xa8>
 800104e:	e091      	b.n	8001174 <HAL_ADC_ConfigChannel+0x1cc>
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2202      	movs	r2, #2
 8001056:	4013      	ands	r3, r2
 8001058:	d000      	beq.n	800105c <HAL_ADC_ConfigChannel+0xb4>
 800105a:	e089      	b.n	8001170 <HAL_ADC_ConfigChannel+0x1c8>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2204      	movs	r2, #4
 8001062:	4013      	ands	r3, r2
 8001064:	d000      	beq.n	8001068 <HAL_ADC_ConfigChannel+0xc0>
 8001066:	e081      	b.n	800116c <HAL_ADC_ConfigChannel+0x1c4>
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2208      	movs	r2, #8
 800106e:	4013      	ands	r3, r2
 8001070:	d000      	beq.n	8001074 <HAL_ADC_ConfigChannel+0xcc>
 8001072:	e079      	b.n	8001168 <HAL_ADC_ConfigChannel+0x1c0>
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2210      	movs	r2, #16
 800107a:	4013      	ands	r3, r2
 800107c:	d000      	beq.n	8001080 <HAL_ADC_ConfigChannel+0xd8>
 800107e:	e071      	b.n	8001164 <HAL_ADC_ConfigChannel+0x1bc>
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2220      	movs	r2, #32
 8001086:	4013      	ands	r3, r2
 8001088:	d000      	beq.n	800108c <HAL_ADC_ConfigChannel+0xe4>
 800108a:	e069      	b.n	8001160 <HAL_ADC_ConfigChannel+0x1b8>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2240      	movs	r2, #64	; 0x40
 8001092:	4013      	ands	r3, r2
 8001094:	d000      	beq.n	8001098 <HAL_ADC_ConfigChannel+0xf0>
 8001096:	e061      	b.n	800115c <HAL_ADC_ConfigChannel+0x1b4>
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2280      	movs	r2, #128	; 0x80
 800109e:	4013      	ands	r3, r2
 80010a0:	d000      	beq.n	80010a4 <HAL_ADC_ConfigChannel+0xfc>
 80010a2:	e059      	b.n	8001158 <HAL_ADC_ConfigChannel+0x1b0>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4013      	ands	r3, r2
 80010ae:	d151      	bne.n	8001154 <HAL_ADC_ConfigChannel+0x1ac>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4013      	ands	r3, r2
 80010ba:	d149      	bne.n	8001150 <HAL_ADC_ConfigChannel+0x1a8>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	4013      	ands	r3, r2
 80010c6:	d141      	bne.n	800114c <HAL_ADC_ConfigChannel+0x1a4>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	4013      	ands	r3, r2
 80010d2:	d139      	bne.n	8001148 <HAL_ADC_ConfigChannel+0x1a0>
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	015b      	lsls	r3, r3, #5
 80010dc:	4013      	ands	r3, r2
 80010de:	d131      	bne.n	8001144 <HAL_ADC_ConfigChannel+0x19c>
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	019b      	lsls	r3, r3, #6
 80010e8:	4013      	ands	r3, r2
 80010ea:	d129      	bne.n	8001140 <HAL_ADC_ConfigChannel+0x198>
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	01db      	lsls	r3, r3, #7
 80010f4:	4013      	ands	r3, r2
 80010f6:	d121      	bne.n	800113c <HAL_ADC_ConfigChannel+0x194>
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	2380      	movs	r3, #128	; 0x80
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	4013      	ands	r3, r2
 8001102:	d119      	bne.n	8001138 <HAL_ADC_ConfigChannel+0x190>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	025b      	lsls	r3, r3, #9
 800110c:	4013      	ands	r3, r2
 800110e:	d111      	bne.n	8001134 <HAL_ADC_ConfigChannel+0x18c>
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	029b      	lsls	r3, r3, #10
 8001118:	4013      	ands	r3, r2
 800111a:	d109      	bne.n	8001130 <HAL_ADC_ConfigChannel+0x188>
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	02db      	lsls	r3, r3, #11
 8001124:	4013      	ands	r3, r2
 8001126:	d001      	beq.n	800112c <HAL_ADC_ConfigChannel+0x184>
 8001128:	2312      	movs	r3, #18
 800112a:	e024      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1ce>
 800112c:	2300      	movs	r3, #0
 800112e:	e022      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1ce>
 8001130:	2311      	movs	r3, #17
 8001132:	e020      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1ce>
 8001134:	2310      	movs	r3, #16
 8001136:	e01e      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1ce>
 8001138:	230f      	movs	r3, #15
 800113a:	e01c      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1ce>
 800113c:	230e      	movs	r3, #14
 800113e:	e01a      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1ce>
 8001140:	230d      	movs	r3, #13
 8001142:	e018      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1ce>
 8001144:	230c      	movs	r3, #12
 8001146:	e016      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1ce>
 8001148:	230b      	movs	r3, #11
 800114a:	e014      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1ce>
 800114c:	230a      	movs	r3, #10
 800114e:	e012      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1ce>
 8001150:	2309      	movs	r3, #9
 8001152:	e010      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1ce>
 8001154:	2308      	movs	r3, #8
 8001156:	e00e      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1ce>
 8001158:	2307      	movs	r3, #7
 800115a:	e00c      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1ce>
 800115c:	2306      	movs	r3, #6
 800115e:	e00a      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1ce>
 8001160:	2305      	movs	r3, #5
 8001162:	e008      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1ce>
 8001164:	2304      	movs	r3, #4
 8001166:	e006      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1ce>
 8001168:	2303      	movs	r3, #3
 800116a:	e004      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1ce>
 800116c:	2302      	movs	r3, #2
 800116e:	e002      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1ce>
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1ce>
 8001174:	2300      	movs	r3, #0
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	6852      	ldr	r2, [r2, #4]
 800117a:	201f      	movs	r0, #31
 800117c:	4002      	ands	r2, r0
 800117e:	4093      	lsls	r3, r2
 8001180:	000a      	movs	r2, r1
 8001182:	431a      	orrs	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	089b      	lsrs	r3, r3, #2
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	429a      	cmp	r2, r3
 8001196:	d808      	bhi.n	80011aa <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	6859      	ldr	r1, [r3, #4]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	001a      	movs	r2, r3
 80011a6:	f7ff fb8a 	bl	80008be <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6818      	ldr	r0, [r3, #0]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	6819      	ldr	r1, [r3, #0]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	001a      	movs	r2, r3
 80011b8:	f7ff fbc4 	bl	8000944 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	db00      	blt.n	80011c6 <HAL_ADC_ConfigChannel+0x21e>
 80011c4:	e0bc      	b.n	8001340 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80011c6:	4b50      	ldr	r3, [pc, #320]	; (8001308 <HAL_ADC_ConfigChannel+0x360>)
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7ff fb3d 	bl	8000848 <LL_ADC_GetCommonPathInternalCh>
 80011ce:	0003      	movs	r3, r0
 80011d0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a4d      	ldr	r2, [pc, #308]	; (800130c <HAL_ADC_ConfigChannel+0x364>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d122      	bne.n	8001222 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	041b      	lsls	r3, r3, #16
 80011e2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80011e4:	d11d      	bne.n	8001222 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	2280      	movs	r2, #128	; 0x80
 80011ea:	0412      	lsls	r2, r2, #16
 80011ec:	4313      	orrs	r3, r2
 80011ee:	4a46      	ldr	r2, [pc, #280]	; (8001308 <HAL_ADC_ConfigChannel+0x360>)
 80011f0:	0019      	movs	r1, r3
 80011f2:	0010      	movs	r0, r2
 80011f4:	f7ff fb14 	bl	8000820 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011f8:	4b45      	ldr	r3, [pc, #276]	; (8001310 <HAL_ADC_ConfigChannel+0x368>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4945      	ldr	r1, [pc, #276]	; (8001314 <HAL_ADC_ConfigChannel+0x36c>)
 80011fe:	0018      	movs	r0, r3
 8001200:	f7fe ff80 	bl	8000104 <__udivsi3>
 8001204:	0003      	movs	r3, r0
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	0013      	movs	r3, r2
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	189b      	adds	r3, r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001212:	e002      	b.n	800121a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3b01      	subs	r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1f9      	bne.n	8001214 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001220:	e08e      	b.n	8001340 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a3c      	ldr	r2, [pc, #240]	; (8001318 <HAL_ADC_ConfigChannel+0x370>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d10e      	bne.n	800124a <HAL_ADC_ConfigChannel+0x2a2>
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	045b      	lsls	r3, r3, #17
 8001232:	4013      	ands	r3, r2
 8001234:	d109      	bne.n	800124a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	2280      	movs	r2, #128	; 0x80
 800123a:	0452      	lsls	r2, r2, #17
 800123c:	4313      	orrs	r3, r2
 800123e:	4a32      	ldr	r2, [pc, #200]	; (8001308 <HAL_ADC_ConfigChannel+0x360>)
 8001240:	0019      	movs	r1, r3
 8001242:	0010      	movs	r0, r2
 8001244:	f7ff faec 	bl	8000820 <LL_ADC_SetCommonPathInternalCh>
 8001248:	e07a      	b.n	8001340 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a33      	ldr	r2, [pc, #204]	; (800131c <HAL_ADC_ConfigChannel+0x374>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d000      	beq.n	8001256 <HAL_ADC_ConfigChannel+0x2ae>
 8001254:	e074      	b.n	8001340 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	03db      	lsls	r3, r3, #15
 800125c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800125e:	d000      	beq.n	8001262 <HAL_ADC_ConfigChannel+0x2ba>
 8001260:	e06e      	b.n	8001340 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	2280      	movs	r2, #128	; 0x80
 8001266:	03d2      	lsls	r2, r2, #15
 8001268:	4313      	orrs	r3, r2
 800126a:	4a27      	ldr	r2, [pc, #156]	; (8001308 <HAL_ADC_ConfigChannel+0x360>)
 800126c:	0019      	movs	r1, r3
 800126e:	0010      	movs	r0, r2
 8001270:	f7ff fad6 	bl	8000820 <LL_ADC_SetCommonPathInternalCh>
 8001274:	e064      	b.n	8001340 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	691a      	ldr	r2, [r3, #16]
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	061b      	lsls	r3, r3, #24
 800127e:	429a      	cmp	r2, r3
 8001280:	d004      	beq.n	800128c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001286:	4a1f      	ldr	r2, [pc, #124]	; (8001304 <HAL_ADC_ConfigChannel+0x35c>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d107      	bne.n	800129c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	0019      	movs	r1, r3
 8001296:	0010      	movs	r0, r2
 8001298:	f7ff fb42 	bl	8000920 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	da4d      	bge.n	8001340 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012a4:	4b18      	ldr	r3, [pc, #96]	; (8001308 <HAL_ADC_ConfigChannel+0x360>)
 80012a6:	0018      	movs	r0, r3
 80012a8:	f7ff face 	bl	8000848 <LL_ADC_GetCommonPathInternalCh>
 80012ac:	0003      	movs	r3, r0
 80012ae:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a15      	ldr	r2, [pc, #84]	; (800130c <HAL_ADC_ConfigChannel+0x364>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d108      	bne.n	80012cc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4a18      	ldr	r2, [pc, #96]	; (8001320 <HAL_ADC_ConfigChannel+0x378>)
 80012be:	4013      	ands	r3, r2
 80012c0:	4a11      	ldr	r2, [pc, #68]	; (8001308 <HAL_ADC_ConfigChannel+0x360>)
 80012c2:	0019      	movs	r1, r3
 80012c4:	0010      	movs	r0, r2
 80012c6:	f7ff faab 	bl	8000820 <LL_ADC_SetCommonPathInternalCh>
 80012ca:	e039      	b.n	8001340 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a11      	ldr	r2, [pc, #68]	; (8001318 <HAL_ADC_ConfigChannel+0x370>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d108      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4a12      	ldr	r2, [pc, #72]	; (8001324 <HAL_ADC_ConfigChannel+0x37c>)
 80012da:	4013      	ands	r3, r2
 80012dc:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <HAL_ADC_ConfigChannel+0x360>)
 80012de:	0019      	movs	r1, r3
 80012e0:	0010      	movs	r0, r2
 80012e2:	f7ff fa9d 	bl	8000820 <LL_ADC_SetCommonPathInternalCh>
 80012e6:	e02b      	b.n	8001340 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0b      	ldr	r2, [pc, #44]	; (800131c <HAL_ADC_ConfigChannel+0x374>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d126      	bne.n	8001340 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4a0c      	ldr	r2, [pc, #48]	; (8001328 <HAL_ADC_ConfigChannel+0x380>)
 80012f6:	4013      	ands	r3, r2
 80012f8:	4a03      	ldr	r2, [pc, #12]	; (8001308 <HAL_ADC_ConfigChannel+0x360>)
 80012fa:	0019      	movs	r1, r3
 80012fc:	0010      	movs	r0, r2
 80012fe:	f7ff fa8f 	bl	8000820 <LL_ADC_SetCommonPathInternalCh>
 8001302:	e01d      	b.n	8001340 <HAL_ADC_ConfigChannel+0x398>
 8001304:	80000004 	.word	0x80000004
 8001308:	40012708 	.word	0x40012708
 800130c:	b0001000 	.word	0xb0001000
 8001310:	20000004 	.word	0x20000004
 8001314:	00030d40 	.word	0x00030d40
 8001318:	b8004000 	.word	0xb8004000
 800131c:	b4002000 	.word	0xb4002000
 8001320:	ff7fffff 	.word	0xff7fffff
 8001324:	feffffff 	.word	0xfeffffff
 8001328:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001330:	2220      	movs	r2, #32
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001338:	2317      	movs	r3, #23
 800133a:	18fb      	adds	r3, r7, r3
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2254      	movs	r2, #84	; 0x54
 8001344:	2100      	movs	r1, #0
 8001346:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001348:	2317      	movs	r3, #23
 800134a:	18fb      	adds	r3, r7, r3
 800134c:	781b      	ldrb	r3, [r3, #0]
}
 800134e:	0018      	movs	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	b006      	add	sp, #24
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)

08001358 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	0018      	movs	r0, r3
 800136a:	f7ff fb53 	bl	8000a14 <LL_ADC_IsEnabled>
 800136e:	1e03      	subs	r3, r0, #0
 8001370:	d000      	beq.n	8001374 <ADC_Enable+0x1c>
 8001372:	e069      	b.n	8001448 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	4a36      	ldr	r2, [pc, #216]	; (8001454 <ADC_Enable+0xfc>)
 800137c:	4013      	ands	r3, r2
 800137e:	d00d      	beq.n	800139c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001384:	2210      	movs	r2, #16
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001390:	2201      	movs	r2, #1
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e056      	b.n	800144a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	0018      	movs	r0, r3
 80013a2:	f7ff fb13 	bl	80009cc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80013a6:	4b2c      	ldr	r3, [pc, #176]	; (8001458 <ADC_Enable+0x100>)
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7ff fa4d 	bl	8000848 <LL_ADC_GetCommonPathInternalCh>
 80013ae:	0002      	movs	r2, r0
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	041b      	lsls	r3, r3, #16
 80013b4:	4013      	ands	r3, r2
 80013b6:	d00f      	beq.n	80013d8 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013b8:	4b28      	ldr	r3, [pc, #160]	; (800145c <ADC_Enable+0x104>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4928      	ldr	r1, [pc, #160]	; (8001460 <ADC_Enable+0x108>)
 80013be:	0018      	movs	r0, r3
 80013c0:	f7fe fea0 	bl	8000104 <__udivsi3>
 80013c4:	0003      	movs	r3, r0
 80013c6:	3301      	adds	r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80013ca:	e002      	b.n	80013d2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f9      	bne.n	80013cc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	7e5b      	ldrb	r3, [r3, #25]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d033      	beq.n	8001448 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80013e0:	f7ff f9fe 	bl	80007e0 <HAL_GetTick>
 80013e4:	0003      	movs	r3, r0
 80013e6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80013e8:	e027      	b.n	800143a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	0018      	movs	r0, r3
 80013f0:	f7ff fb10 	bl	8000a14 <LL_ADC_IsEnabled>
 80013f4:	1e03      	subs	r3, r0, #0
 80013f6:	d104      	bne.n	8001402 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff fae5 	bl	80009cc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001402:	f7ff f9ed 	bl	80007e0 <HAL_GetTick>
 8001406:	0002      	movs	r2, r0
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d914      	bls.n	800143a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2201      	movs	r2, #1
 8001418:	4013      	ands	r3, r2
 800141a:	2b01      	cmp	r3, #1
 800141c:	d00d      	beq.n	800143a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001422:	2210      	movs	r2, #16
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142e:	2201      	movs	r2, #1
 8001430:	431a      	orrs	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e007      	b.n	800144a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2201      	movs	r2, #1
 8001442:	4013      	ands	r3, r2
 8001444:	2b01      	cmp	r3, #1
 8001446:	d1d0      	bne.n	80013ea <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	0018      	movs	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	b004      	add	sp, #16
 8001450:	bd80      	pop	{r7, pc}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	80000017 	.word	0x80000017
 8001458:	40012708 	.word	0x40012708
 800145c:	20000004 	.word	0x20000004
 8001460:	00030d40 	.word	0x00030d40

08001464 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	0018      	movs	r0, r3
 8001472:	f7ff fae0 	bl	8000a36 <LL_ADC_IsDisableOngoing>
 8001476:	0003      	movs	r3, r0
 8001478:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	0018      	movs	r0, r3
 8001480:	f7ff fac8 	bl	8000a14 <LL_ADC_IsEnabled>
 8001484:	1e03      	subs	r3, r0, #0
 8001486:	d046      	beq.n	8001516 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d143      	bne.n	8001516 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2205      	movs	r2, #5
 8001496:	4013      	ands	r3, r2
 8001498:	2b01      	cmp	r3, #1
 800149a:	d10d      	bne.n	80014b8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	0018      	movs	r0, r3
 80014a2:	f7ff faa5 	bl	80009f0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2203      	movs	r2, #3
 80014ac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014ae:	f7ff f997 	bl	80007e0 <HAL_GetTick>
 80014b2:	0003      	movs	r3, r0
 80014b4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80014b6:	e028      	b.n	800150a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014bc:	2210      	movs	r2, #16
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c8:	2201      	movs	r2, #1
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e021      	b.n	8001518 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80014d4:	f7ff f984 	bl	80007e0 <HAL_GetTick>
 80014d8:	0002      	movs	r2, r0
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d913      	bls.n	800150a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2201      	movs	r2, #1
 80014ea:	4013      	ands	r3, r2
 80014ec:	d00d      	beq.n	800150a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f2:	2210      	movs	r2, #16
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fe:	2201      	movs	r2, #1
 8001500:	431a      	orrs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e006      	b.n	8001518 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2201      	movs	r2, #1
 8001512:	4013      	ands	r3, r2
 8001514:	d1de      	bne.n	80014d4 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	0018      	movs	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	b004      	add	sp, #16
 800151e:	bd80      	pop	{r7, pc}

08001520 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001532:	2250      	movs	r2, #80	; 0x50
 8001534:	4013      	ands	r3, r2
 8001536:	d141      	bne.n	80015bc <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153c:	2280      	movs	r2, #128	; 0x80
 800153e:	0092      	lsls	r2, r2, #2
 8001540:	431a      	orrs	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	0018      	movs	r0, r3
 800154c:	f7ff f9a6 	bl	800089c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001550:	1e03      	subs	r3, r0, #0
 8001552:	d02e      	beq.n	80015b2 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	7e9b      	ldrb	r3, [r3, #26]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d12a      	bne.n	80015b2 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2208      	movs	r2, #8
 8001564:	4013      	ands	r3, r2
 8001566:	2b08      	cmp	r3, #8
 8001568:	d123      	bne.n	80015b2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	0018      	movs	r0, r3
 8001570:	f7ff fa84 	bl	8000a7c <LL_ADC_REG_IsConversionOngoing>
 8001574:	1e03      	subs	r3, r0, #0
 8001576:	d110      	bne.n	800159a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	210c      	movs	r1, #12
 8001584:	438a      	bics	r2, r1
 8001586:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158c:	4a15      	ldr	r2, [pc, #84]	; (80015e4 <ADC_DMAConvCplt+0xc4>)
 800158e:	4013      	ands	r3, r2
 8001590:	2201      	movs	r2, #1
 8001592:	431a      	orrs	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	659a      	str	r2, [r3, #88]	; 0x58
 8001598:	e00b      	b.n	80015b2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159e:	2220      	movs	r2, #32
 80015a0:	431a      	orrs	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015aa:	2201      	movs	r2, #1
 80015ac:	431a      	orrs	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	0018      	movs	r0, r3
 80015b6:	f7ff fcdf 	bl	8000f78 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80015ba:	e00f      	b.n	80015dc <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c0:	2210      	movs	r2, #16
 80015c2:	4013      	ands	r3, r2
 80015c4:	d004      	beq.n	80015d0 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	0018      	movs	r0, r3
 80015ca:	f7ff fce5 	bl	8000f98 <HAL_ADC_ErrorCallback>
}
 80015ce:	e005      	b.n	80015dc <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	0010      	movs	r0, r2
 80015da:	4798      	blx	r3
}
 80015dc:	46c0      	nop			; (mov r8, r8)
 80015de:	46bd      	mov	sp, r7
 80015e0:	b004      	add	sp, #16
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	fffffefe 	.word	0xfffffefe

080015e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7ff fcc5 	bl	8000f88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	46bd      	mov	sp, r7
 8001602:	b004      	add	sp, #16
 8001604:	bd80      	pop	{r7, pc}

08001606 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001612:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001618:	2240      	movs	r2, #64	; 0x40
 800161a:	431a      	orrs	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001624:	2204      	movs	r2, #4
 8001626:	431a      	orrs	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	0018      	movs	r0, r3
 8001630:	f7ff fcb2 	bl	8000f98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001634:	46c0      	nop			; (mov r8, r8)
 8001636:	46bd      	mov	sp, r7
 8001638:	b004      	add	sp, #16
 800163a:	bd80      	pop	{r7, pc}

0800163c <LL_ADC_IsEnabled>:
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2201      	movs	r2, #1
 800164a:	4013      	ands	r3, r2
 800164c:	2b01      	cmp	r3, #1
 800164e:	d101      	bne.n	8001654 <LL_ADC_IsEnabled+0x18>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <LL_ADC_IsEnabled+0x1a>
 8001654:	2300      	movs	r3, #0
}
 8001656:	0018      	movs	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	b002      	add	sp, #8
 800165c:	bd80      	pop	{r7, pc}

0800165e <LL_ADC_IsCalibrationOnGoing>:
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	0fdb      	lsrs	r3, r3, #31
 800166c:	07da      	lsls	r2, r3, #31
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	061b      	lsls	r3, r3, #24
 8001672:	429a      	cmp	r2, r3
 8001674:	d101      	bne.n	800167a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <LL_ADC_IsCalibrationOnGoing+0x1e>
 800167a:	2300      	movs	r3, #0
}
 800167c:	0018      	movs	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	b002      	add	sp, #8
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2254      	movs	r2, #84	; 0x54
 8001694:	5c9b      	ldrb	r3, [r3, r2]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <HAL_ADCEx_Calibration_Start+0x1a>
 800169a:	2302      	movs	r3, #2
 800169c:	e06c      	b.n	8001778 <HAL_ADCEx_Calibration_Start+0xf4>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2254      	movs	r2, #84	; 0x54
 80016a2:	2101      	movs	r1, #1
 80016a4:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80016a6:	2317      	movs	r3, #23
 80016a8:	18fc      	adds	r4, r7, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	0018      	movs	r0, r3
 80016ae:	f7ff fed9 	bl	8001464 <ADC_Disable>
 80016b2:	0003      	movs	r3, r0
 80016b4:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	0018      	movs	r0, r3
 80016bc:	f7ff ffbe 	bl	800163c <LL_ADC_IsEnabled>
 80016c0:	1e03      	subs	r3, r0, #0
 80016c2:	d14c      	bne.n	800175e <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c8:	4a2d      	ldr	r2, [pc, #180]	; (8001780 <HAL_ADCEx_Calibration_Start+0xfc>)
 80016ca:	4013      	ands	r3, r2
 80016cc:	2202      	movs	r2, #2
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2203      	movs	r2, #3
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2103      	movs	r1, #3
 80016ec:	438a      	bics	r2, r1
 80016ee:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2180      	movs	r1, #128	; 0x80
 80016fc:	0609      	lsls	r1, r1, #24
 80016fe:	430a      	orrs	r2, r1
 8001700:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001702:	e014      	b.n	800172e <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	3301      	adds	r3, #1
 8001708:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4a1d      	ldr	r2, [pc, #116]	; (8001784 <HAL_ADCEx_Calibration_Start+0x100>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d90d      	bls.n	800172e <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001716:	2212      	movs	r2, #18
 8001718:	4393      	bics	r3, r2
 800171a:	2210      	movs	r2, #16
 800171c:	431a      	orrs	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2254      	movs	r2, #84	; 0x54
 8001726:	2100      	movs	r1, #0
 8001728:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e024      	b.n	8001778 <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	0018      	movs	r0, r3
 8001734:	f7ff ff93 	bl	800165e <LL_ADC_IsCalibrationOnGoing>
 8001738:	1e03      	subs	r3, r0, #0
 800173a:	d1e3      	bne.n	8001704 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68d9      	ldr	r1, [r3, #12]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	430a      	orrs	r2, r1
 800174a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001750:	2203      	movs	r2, #3
 8001752:	4393      	bics	r3, r2
 8001754:	2201      	movs	r2, #1
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	659a      	str	r2, [r3, #88]	; 0x58
 800175c:	e005      	b.n	800176a <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001762:	2210      	movs	r2, #16
 8001764:	431a      	orrs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2254      	movs	r2, #84	; 0x54
 800176e:	2100      	movs	r1, #0
 8001770:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001772:	2317      	movs	r3, #23
 8001774:	18fb      	adds	r3, r7, r3
 8001776:	781b      	ldrb	r3, [r3, #0]
}
 8001778:	0018      	movs	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	b007      	add	sp, #28
 800177e:	bd90      	pop	{r4, r7, pc}
 8001780:	fffffefd 	.word	0xfffffefd
 8001784:	0002f1ff 	.word	0x0002f1ff

08001788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	0002      	movs	r2, r0
 8001790:	1dfb      	adds	r3, r7, #7
 8001792:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001794:	1dfb      	adds	r3, r7, #7
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b7f      	cmp	r3, #127	; 0x7f
 800179a:	d809      	bhi.n	80017b0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800179c:	1dfb      	adds	r3, r7, #7
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	001a      	movs	r2, r3
 80017a2:	231f      	movs	r3, #31
 80017a4:	401a      	ands	r2, r3
 80017a6:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <__NVIC_EnableIRQ+0x30>)
 80017a8:	2101      	movs	r1, #1
 80017aa:	4091      	lsls	r1, r2
 80017ac:	000a      	movs	r2, r1
 80017ae:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80017b0:	46c0      	nop			; (mov r8, r8)
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b002      	add	sp, #8
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	e000e100 	.word	0xe000e100

080017bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	0002      	movs	r2, r0
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017ca:	1dfb      	adds	r3, r7, #7
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b7f      	cmp	r3, #127	; 0x7f
 80017d0:	d828      	bhi.n	8001824 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017d2:	4a2f      	ldr	r2, [pc, #188]	; (8001890 <__NVIC_SetPriority+0xd4>)
 80017d4:	1dfb      	adds	r3, r7, #7
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b25b      	sxtb	r3, r3
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	33c0      	adds	r3, #192	; 0xc0
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	589b      	ldr	r3, [r3, r2]
 80017e2:	1dfa      	adds	r2, r7, #7
 80017e4:	7812      	ldrb	r2, [r2, #0]
 80017e6:	0011      	movs	r1, r2
 80017e8:	2203      	movs	r2, #3
 80017ea:	400a      	ands	r2, r1
 80017ec:	00d2      	lsls	r2, r2, #3
 80017ee:	21ff      	movs	r1, #255	; 0xff
 80017f0:	4091      	lsls	r1, r2
 80017f2:	000a      	movs	r2, r1
 80017f4:	43d2      	mvns	r2, r2
 80017f6:	401a      	ands	r2, r3
 80017f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	019b      	lsls	r3, r3, #6
 80017fe:	22ff      	movs	r2, #255	; 0xff
 8001800:	401a      	ands	r2, r3
 8001802:	1dfb      	adds	r3, r7, #7
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	0018      	movs	r0, r3
 8001808:	2303      	movs	r3, #3
 800180a:	4003      	ands	r3, r0
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001810:	481f      	ldr	r0, [pc, #124]	; (8001890 <__NVIC_SetPriority+0xd4>)
 8001812:	1dfb      	adds	r3, r7, #7
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	b25b      	sxtb	r3, r3
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	430a      	orrs	r2, r1
 800181c:	33c0      	adds	r3, #192	; 0xc0
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001822:	e031      	b.n	8001888 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001824:	4a1b      	ldr	r2, [pc, #108]	; (8001894 <__NVIC_SetPriority+0xd8>)
 8001826:	1dfb      	adds	r3, r7, #7
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	0019      	movs	r1, r3
 800182c:	230f      	movs	r3, #15
 800182e:	400b      	ands	r3, r1
 8001830:	3b08      	subs	r3, #8
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	3306      	adds	r3, #6
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	18d3      	adds	r3, r2, r3
 800183a:	3304      	adds	r3, #4
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	1dfa      	adds	r2, r7, #7
 8001840:	7812      	ldrb	r2, [r2, #0]
 8001842:	0011      	movs	r1, r2
 8001844:	2203      	movs	r2, #3
 8001846:	400a      	ands	r2, r1
 8001848:	00d2      	lsls	r2, r2, #3
 800184a:	21ff      	movs	r1, #255	; 0xff
 800184c:	4091      	lsls	r1, r2
 800184e:	000a      	movs	r2, r1
 8001850:	43d2      	mvns	r2, r2
 8001852:	401a      	ands	r2, r3
 8001854:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	019b      	lsls	r3, r3, #6
 800185a:	22ff      	movs	r2, #255	; 0xff
 800185c:	401a      	ands	r2, r3
 800185e:	1dfb      	adds	r3, r7, #7
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	0018      	movs	r0, r3
 8001864:	2303      	movs	r3, #3
 8001866:	4003      	ands	r3, r0
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800186c:	4809      	ldr	r0, [pc, #36]	; (8001894 <__NVIC_SetPriority+0xd8>)
 800186e:	1dfb      	adds	r3, r7, #7
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	001c      	movs	r4, r3
 8001874:	230f      	movs	r3, #15
 8001876:	4023      	ands	r3, r4
 8001878:	3b08      	subs	r3, #8
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	430a      	orrs	r2, r1
 800187e:	3306      	adds	r3, #6
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	18c3      	adds	r3, r0, r3
 8001884:	3304      	adds	r3, #4
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	46c0      	nop			; (mov r8, r8)
 800188a:	46bd      	mov	sp, r7
 800188c:	b003      	add	sp, #12
 800188e:	bd90      	pop	{r4, r7, pc}
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	1e5a      	subs	r2, r3, #1
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	045b      	lsls	r3, r3, #17
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d301      	bcc.n	80018b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ac:	2301      	movs	r3, #1
 80018ae:	e010      	b.n	80018d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b0:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <SysTick_Config+0x44>)
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	3a01      	subs	r2, #1
 80018b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b8:	2301      	movs	r3, #1
 80018ba:	425b      	negs	r3, r3
 80018bc:	2103      	movs	r1, #3
 80018be:	0018      	movs	r0, r3
 80018c0:	f7ff ff7c 	bl	80017bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <SysTick_Config+0x44>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <SysTick_Config+0x44>)
 80018cc:	2207      	movs	r2, #7
 80018ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	0018      	movs	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b002      	add	sp, #8
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	e000e010 	.word	0xe000e010

080018e0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	210f      	movs	r1, #15
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	1c02      	adds	r2, r0, #0
 80018f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	187b      	adds	r3, r7, r1
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b25b      	sxtb	r3, r3
 80018fa:	0011      	movs	r1, r2
 80018fc:	0018      	movs	r0, r3
 80018fe:	f7ff ff5d 	bl	80017bc <__NVIC_SetPriority>
}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	46bd      	mov	sp, r7
 8001906:	b004      	add	sp, #16
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	0002      	movs	r2, r0
 8001912:	1dfb      	adds	r3, r7, #7
 8001914:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001916:	1dfb      	adds	r3, r7, #7
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b25b      	sxtb	r3, r3
 800191c:	0018      	movs	r0, r3
 800191e:	f7ff ff33 	bl	8001788 <__NVIC_EnableIRQ>
}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	46bd      	mov	sp, r7
 8001926:	b002      	add	sp, #8
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	0018      	movs	r0, r3
 8001936:	f7ff ffaf 	bl	8001898 <SysTick_Config>
 800193a:	0003      	movs	r3, r0
}
 800193c:	0018      	movs	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e091      	b.n	8001a7a <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	001a      	movs	r2, r3
 800195c:	4b49      	ldr	r3, [pc, #292]	; (8001a84 <HAL_DMA_Init+0x140>)
 800195e:	429a      	cmp	r2, r3
 8001960:	d810      	bhi.n	8001984 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a48      	ldr	r2, [pc, #288]	; (8001a88 <HAL_DMA_Init+0x144>)
 8001968:	4694      	mov	ip, r2
 800196a:	4463      	add	r3, ip
 800196c:	2114      	movs	r1, #20
 800196e:	0018      	movs	r0, r3
 8001970:	f7fe fbc8 	bl	8000104 <__udivsi3>
 8001974:	0003      	movs	r3, r0
 8001976:	009a      	lsls	r2, r3, #2
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a43      	ldr	r2, [pc, #268]	; (8001a8c <HAL_DMA_Init+0x148>)
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
 8001982:	e00f      	b.n	80019a4 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a41      	ldr	r2, [pc, #260]	; (8001a90 <HAL_DMA_Init+0x14c>)
 800198a:	4694      	mov	ip, r2
 800198c:	4463      	add	r3, ip
 800198e:	2114      	movs	r1, #20
 8001990:	0018      	movs	r0, r3
 8001992:	f7fe fbb7 	bl	8000104 <__udivsi3>
 8001996:	0003      	movs	r3, r0
 8001998:	009a      	lsls	r2, r3, #2
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a3c      	ldr	r2, [pc, #240]	; (8001a94 <HAL_DMA_Init+0x150>)
 80019a2:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2225      	movs	r2, #37	; 0x25
 80019a8:	2102      	movs	r1, #2
 80019aa:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4938      	ldr	r1, [pc, #224]	; (8001a98 <HAL_DMA_Init+0x154>)
 80019b8:	400a      	ands	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6819      	ldr	r1, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	0018      	movs	r0, r3
 80019f6:	f000 f9d7 	bl	8001da8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	2380      	movs	r3, #128	; 0x80
 8001a00:	01db      	lsls	r3, r3, #7
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d102      	bne.n	8001a0c <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a14:	217f      	movs	r1, #127	; 0x7f
 8001a16:	400a      	ands	r2, r1
 8001a18:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a22:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d011      	beq.n	8001a50 <HAL_DMA_Init+0x10c>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d80d      	bhi.n	8001a50 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	0018      	movs	r0, r3
 8001a38:	f000 fa00 	bl	8001e3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	e008      	b.n	8001a62 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2225      	movs	r2, #37	; 0x25
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2224      	movs	r2, #36	; 0x24
 8001a74:	2100      	movs	r1, #0
 8001a76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b002      	add	sp, #8
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	40020407 	.word	0x40020407
 8001a88:	bffdfff8 	.word	0xbffdfff8
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	bffdfbf8 	.word	0xbffdfbf8
 8001a94:	40020400 	.word	0x40020400
 8001a98:	ffff800f 	.word	0xffff800f

08001a9c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aaa:	2317      	movs	r3, #23
 8001aac:	18fb      	adds	r3, r7, r3
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2224      	movs	r2, #36	; 0x24
 8001ab6:	5c9b      	ldrb	r3, [r3, r2]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_DMA_Start_IT+0x24>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e06f      	b.n	8001ba0 <HAL_DMA_Start_IT+0x104>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2224      	movs	r2, #36	; 0x24
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2225      	movs	r2, #37	; 0x25
 8001acc:	5c9b      	ldrb	r3, [r3, r2]
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d157      	bne.n	8001b84 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2225      	movs	r2, #37	; 0x25
 8001ad8:	2102      	movs	r1, #2
 8001ada:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2101      	movs	r1, #1
 8001aee:	438a      	bics	r2, r1
 8001af0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	68b9      	ldr	r1, [r7, #8]
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f000 f919 	bl	8001d30 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d008      	beq.n	8001b18 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	210e      	movs	r1, #14
 8001b12:	430a      	orrs	r2, r1
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	e00f      	b.n	8001b38 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2104      	movs	r1, #4
 8001b24:	438a      	bics	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	210a      	movs	r1, #10
 8001b34:	430a      	orrs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	025b      	lsls	r3, r3, #9
 8001b42:	4013      	ands	r3, r2
 8001b44:	d008      	beq.n	8001b58 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b50:	2180      	movs	r1, #128	; 0x80
 8001b52:	0049      	lsls	r1, r1, #1
 8001b54:	430a      	orrs	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6a:	2180      	movs	r1, #128	; 0x80
 8001b6c:	0049      	lsls	r1, r1, #1
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	e00a      	b.n	8001b9a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2280      	movs	r2, #128	; 0x80
 8001b88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2224      	movs	r2, #36	; 0x24
 8001b8e:	2100      	movs	r1, #0
 8001b90:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001b92:	2317      	movs	r3, #23
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001b9a:	2317      	movs	r3, #23
 8001b9c:	18fb      	adds	r3, r7, r3
 8001b9e:	781b      	ldrb	r3, [r3, #0]
}
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b006      	add	sp, #24
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc4:	221c      	movs	r2, #28
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2204      	movs	r2, #4
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	0013      	movs	r3, r2
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d026      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x7a>
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d022      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2220      	movs	r2, #32
 8001be4:	4013      	ands	r3, r2
 8001be6:	d107      	bne.n	8001bf8 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2104      	movs	r1, #4
 8001bf4:	438a      	bics	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfc:	221c      	movs	r2, #28
 8001bfe:	401a      	ands	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	2104      	movs	r1, #4
 8001c06:	4091      	lsls	r1, r2
 8001c08:	000a      	movs	r2, r1
 8001c0a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d100      	bne.n	8001c16 <HAL_DMA_IRQHandler+0x6e>
 8001c14:	e080      	b.n	8001d18 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	0010      	movs	r0, r2
 8001c1e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001c20:	e07a      	b.n	8001d18 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	221c      	movs	r2, #28
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	0013      	movs	r3, r2
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	4013      	ands	r3, r2
 8001c34:	d03c      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x108>
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2202      	movs	r2, #2
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d038      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2220      	movs	r2, #32
 8001c46:	4013      	ands	r3, r2
 8001c48:	d10b      	bne.n	8001c62 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	210a      	movs	r1, #10
 8001c56:	438a      	bics	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2225      	movs	r2, #37	; 0x25
 8001c5e:	2101      	movs	r1, #1
 8001c60:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	001a      	movs	r2, r3
 8001c68:	4b2e      	ldr	r3, [pc, #184]	; (8001d24 <HAL_DMA_IRQHandler+0x17c>)
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d909      	bls.n	8001c82 <HAL_DMA_IRQHandler+0xda>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	221c      	movs	r2, #28
 8001c74:	401a      	ands	r2, r3
 8001c76:	4b2c      	ldr	r3, [pc, #176]	; (8001d28 <HAL_DMA_IRQHandler+0x180>)
 8001c78:	2102      	movs	r1, #2
 8001c7a:	4091      	lsls	r1, r2
 8001c7c:	000a      	movs	r2, r1
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	e008      	b.n	8001c94 <HAL_DMA_IRQHandler+0xec>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	221c      	movs	r2, #28
 8001c88:	401a      	ands	r2, r3
 8001c8a:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <HAL_DMA_IRQHandler+0x184>)
 8001c8c:	2102      	movs	r1, #2
 8001c8e:	4091      	lsls	r1, r2
 8001c90:	000a      	movs	r2, r1
 8001c92:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2224      	movs	r2, #36	; 0x24
 8001c98:	2100      	movs	r1, #0
 8001c9a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d039      	beq.n	8001d18 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	0010      	movs	r0, r2
 8001cac:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001cae:	e033      	b.n	8001d18 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb4:	221c      	movs	r2, #28
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2208      	movs	r2, #8
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	0013      	movs	r3, r2
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d02a      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x172>
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d026      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	210e      	movs	r1, #14
 8001cd8:	438a      	bics	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce0:	221c      	movs	r2, #28
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	2101      	movs	r1, #1
 8001cea:	4091      	lsls	r1, r2
 8001cec:	000a      	movs	r2, r1
 8001cee:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2225      	movs	r2, #37	; 0x25
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2224      	movs	r2, #36	; 0x24
 8001d02:	2100      	movs	r1, #0
 8001d04:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	0010      	movs	r0, r2
 8001d16:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d18:	46c0      	nop			; (mov r8, r8)
 8001d1a:	46c0      	nop			; (mov r8, r8)
}
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b004      	add	sp, #16
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	40020080 	.word	0x40020080
 8001d28:	40020400 	.word	0x40020400
 8001d2c:	40020000 	.word	0x40020000

08001d30 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
 8001d3c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d46:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d004      	beq.n	8001d5a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d58:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	221c      	movs	r2, #28
 8001d60:	401a      	ands	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	2101      	movs	r1, #1
 8001d68:	4091      	lsls	r1, r2
 8001d6a:	000a      	movs	r2, r1
 8001d6c:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b10      	cmp	r3, #16
 8001d7c:	d108      	bne.n	8001d90 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d8e:	e007      	b.n	8001da0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	60da      	str	r2, [r3, #12]
}
 8001da0:	46c0      	nop			; (mov r8, r8)
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b004      	add	sp, #16
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	001a      	movs	r2, r3
 8001db6:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d814      	bhi.n	8001de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc0:	089b      	lsrs	r3, r3, #2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4a1a      	ldr	r2, [pc, #104]	; (8001e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8001dc6:	189a      	adds	r2, r3, r2
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	001a      	movs	r2, r3
 8001dd2:	23ff      	movs	r3, #255	; 0xff
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	3b08      	subs	r3, #8
 8001dd8:	2114      	movs	r1, #20
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f7fe f992 	bl	8000104 <__udivsi3>
 8001de0:	0003      	movs	r3, r0
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	e014      	b.n	8001e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4a11      	ldr	r2, [pc, #68]	; (8001e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001df0:	189a      	adds	r2, r3, r2
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	001a      	movs	r2, r3
 8001dfc:	23ff      	movs	r3, #255	; 0xff
 8001dfe:	4013      	ands	r3, r2
 8001e00:	3b08      	subs	r3, #8
 8001e02:	2114      	movs	r1, #20
 8001e04:	0018      	movs	r0, r3
 8001e06:	f7fe f97d 	bl	8000104 <__udivsi3>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	3307      	adds	r3, #7
 8001e0e:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8001e14:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	221f      	movs	r2, #31
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e24:	46c0      	nop			; (mov r8, r8)
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b004      	add	sp, #16
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40020407 	.word	0x40020407
 8001e30:	40020800 	.word	0x40020800
 8001e34:	4002081c 	.word	0x4002081c
 8001e38:	40020880 	.word	0x40020880

08001e3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	227f      	movs	r2, #127	; 0x7f
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001e52:	4694      	mov	ip, r2
 8001e54:	4463      	add	r3, ip
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	001a      	movs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001e62:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	2203      	movs	r2, #3
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001e74:	46c0      	nop			; (mov r8, r8)
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b004      	add	sp, #16
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	1000823f 	.word	0x1000823f
 8001e80:	40020940 	.word	0x40020940

08001e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e92:	e14d      	b.n	8002130 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2101      	movs	r1, #1
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4091      	lsls	r1, r2
 8001e9e:	000a      	movs	r2, r1
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d100      	bne.n	8001eac <HAL_GPIO_Init+0x28>
 8001eaa:	e13e      	b.n	800212a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d005      	beq.n	8001ec4 <HAL_GPIO_Init+0x40>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d130      	bne.n	8001f26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	2203      	movs	r2, #3
 8001ed0:	409a      	lsls	r2, r3
 8001ed2:	0013      	movs	r3, r2
 8001ed4:	43da      	mvns	r2, r3
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	0013      	movs	r3, r2
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001efa:	2201      	movs	r2, #1
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	409a      	lsls	r2, r3
 8001f00:	0013      	movs	r3, r2
 8001f02:	43da      	mvns	r2, r3
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	091b      	lsrs	r3, r3, #4
 8001f10:	2201      	movs	r2, #1
 8001f12:	401a      	ands	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	409a      	lsls	r2, r3
 8001f18:	0013      	movs	r3, r2
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d017      	beq.n	8001f62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	0013      	movs	r3, r2
 8001f42:	43da      	mvns	r2, r3
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	409a      	lsls	r2, r3
 8001f54:	0013      	movs	r3, r2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2203      	movs	r2, #3
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d123      	bne.n	8001fb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	08da      	lsrs	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3208      	adds	r2, #8
 8001f76:	0092      	lsls	r2, r2, #2
 8001f78:	58d3      	ldr	r3, [r2, r3]
 8001f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	2207      	movs	r2, #7
 8001f80:	4013      	ands	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	220f      	movs	r2, #15
 8001f86:	409a      	lsls	r2, r3
 8001f88:	0013      	movs	r3, r2
 8001f8a:	43da      	mvns	r2, r3
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2107      	movs	r1, #7
 8001f9a:	400b      	ands	r3, r1
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	0013      	movs	r3, r2
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	08da      	lsrs	r2, r3, #3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3208      	adds	r2, #8
 8001fb0:	0092      	lsls	r2, r2, #2
 8001fb2:	6939      	ldr	r1, [r7, #16]
 8001fb4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	0013      	movs	r3, r2
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	0013      	movs	r3, r2
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	23c0      	movs	r3, #192	; 0xc0
 8001ff0:	029b      	lsls	r3, r3, #10
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d100      	bne.n	8001ff8 <HAL_GPIO_Init+0x174>
 8001ff6:	e098      	b.n	800212a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001ff8:	4a53      	ldr	r2, [pc, #332]	; (8002148 <HAL_GPIO_Init+0x2c4>)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	3318      	adds	r3, #24
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	589b      	ldr	r3, [r3, r2]
 8002004:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	2203      	movs	r2, #3
 800200a:	4013      	ands	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	220f      	movs	r2, #15
 8002010:	409a      	lsls	r2, r3
 8002012:	0013      	movs	r3, r2
 8002014:	43da      	mvns	r2, r3
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	23a0      	movs	r3, #160	; 0xa0
 8002020:	05db      	lsls	r3, r3, #23
 8002022:	429a      	cmp	r2, r3
 8002024:	d019      	beq.n	800205a <HAL_GPIO_Init+0x1d6>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a48      	ldr	r2, [pc, #288]	; (800214c <HAL_GPIO_Init+0x2c8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d013      	beq.n	8002056 <HAL_GPIO_Init+0x1d2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a47      	ldr	r2, [pc, #284]	; (8002150 <HAL_GPIO_Init+0x2cc>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00d      	beq.n	8002052 <HAL_GPIO_Init+0x1ce>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a46      	ldr	r2, [pc, #280]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d007      	beq.n	800204e <HAL_GPIO_Init+0x1ca>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a45      	ldr	r2, [pc, #276]	; (8002158 <HAL_GPIO_Init+0x2d4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d101      	bne.n	800204a <HAL_GPIO_Init+0x1c6>
 8002046:	2304      	movs	r3, #4
 8002048:	e008      	b.n	800205c <HAL_GPIO_Init+0x1d8>
 800204a:	2305      	movs	r3, #5
 800204c:	e006      	b.n	800205c <HAL_GPIO_Init+0x1d8>
 800204e:	2303      	movs	r3, #3
 8002050:	e004      	b.n	800205c <HAL_GPIO_Init+0x1d8>
 8002052:	2302      	movs	r3, #2
 8002054:	e002      	b.n	800205c <HAL_GPIO_Init+0x1d8>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_GPIO_Init+0x1d8>
 800205a:	2300      	movs	r3, #0
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	2103      	movs	r1, #3
 8002060:	400a      	ands	r2, r1
 8002062:	00d2      	lsls	r2, r2, #3
 8002064:	4093      	lsls	r3, r2
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800206c:	4936      	ldr	r1, [pc, #216]	; (8002148 <HAL_GPIO_Init+0x2c4>)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	3318      	adds	r3, #24
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800207a:	4a33      	ldr	r2, [pc, #204]	; (8002148 <HAL_GPIO_Init+0x2c4>)
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	58d3      	ldr	r3, [r2, r3]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	43da      	mvns	r2, r3
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	025b      	lsls	r3, r3, #9
 8002094:	4013      	ands	r3, r2
 8002096:	d003      	beq.n	80020a0 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020a0:	4929      	ldr	r1, [pc, #164]	; (8002148 <HAL_GPIO_Init+0x2c4>)
 80020a2:	2280      	movs	r2, #128	; 0x80
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80020a8:	4a27      	ldr	r2, [pc, #156]	; (8002148 <HAL_GPIO_Init+0x2c4>)
 80020aa:	2384      	movs	r3, #132	; 0x84
 80020ac:	58d3      	ldr	r3, [r2, r3]
 80020ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	43da      	mvns	r2, r3
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	029b      	lsls	r3, r3, #10
 80020c2:	4013      	ands	r3, r2
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020ce:	491e      	ldr	r1, [pc, #120]	; (8002148 <HAL_GPIO_Init+0x2c4>)
 80020d0:	2284      	movs	r2, #132	; 0x84
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020d6:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <HAL_GPIO_Init+0x2c4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	43da      	mvns	r2, r3
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	035b      	lsls	r3, r3, #13
 80020ee:	4013      	ands	r3, r2
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020fa:	4b13      	ldr	r3, [pc, #76]	; (8002148 <HAL_GPIO_Init+0x2c4>)
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <HAL_GPIO_Init+0x2c4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	43da      	mvns	r2, r3
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	039b      	lsls	r3, r3, #14
 8002118:	4013      	ands	r3, r2
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <HAL_GPIO_Init+0x2c4>)
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	3301      	adds	r3, #1
 800212e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	40da      	lsrs	r2, r3
 8002138:	1e13      	subs	r3, r2, #0
 800213a:	d000      	beq.n	800213e <HAL_GPIO_Init+0x2ba>
 800213c:	e6aa      	b.n	8001e94 <HAL_GPIO_Init+0x10>
  }
}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	46c0      	nop			; (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	b006      	add	sp, #24
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40021800 	.word	0x40021800
 800214c:	50000400 	.word	0x50000400
 8002150:	50000800 	.word	0x50000800
 8002154:	50000c00 	.word	0x50000c00
 8002158:	50001000 	.word	0x50001000

0800215c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002164:	4b19      	ldr	r3, [pc, #100]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a19      	ldr	r2, [pc, #100]	; (80021d0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800216a:	4013      	ands	r3, r2
 800216c:	0019      	movs	r1, r3
 800216e:	4b17      	ldr	r3, [pc, #92]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	430a      	orrs	r2, r1
 8002174:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	429a      	cmp	r2, r3
 800217e:	d11f      	bne.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002180:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	0013      	movs	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	189b      	adds	r3, r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4912      	ldr	r1, [pc, #72]	; (80021d8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800218e:	0018      	movs	r0, r3
 8002190:	f7fd ffb8 	bl	8000104 <__udivsi3>
 8002194:	0003      	movs	r3, r0
 8002196:	3301      	adds	r3, #1
 8002198:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800219a:	e008      	b.n	80021ae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	3b01      	subs	r3, #1
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	e001      	b.n	80021ae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e009      	b.n	80021c2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021ae:	4b07      	ldr	r3, [pc, #28]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021b0:	695a      	ldr	r2, [r3, #20]
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	401a      	ands	r2, r3
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	429a      	cmp	r2, r3
 80021be:	d0ed      	beq.n	800219c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	0018      	movs	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b004      	add	sp, #16
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	40007000 	.word	0x40007000
 80021d0:	fffff9ff 	.word	0xfffff9ff
 80021d4:	20000004 	.word	0x20000004
 80021d8:	000f4240 	.word	0x000f4240

080021dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d102      	bne.n	80021f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	f000 fb56 	bl	800289c <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2201      	movs	r2, #1
 80021f6:	4013      	ands	r3, r2
 80021f8:	d100      	bne.n	80021fc <HAL_RCC_OscConfig+0x20>
 80021fa:	e07d      	b.n	80022f8 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021fc:	4bc3      	ldr	r3, [pc, #780]	; (800250c <HAL_RCC_OscConfig+0x330>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2238      	movs	r2, #56	; 0x38
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002206:	4bc1      	ldr	r3, [pc, #772]	; (800250c <HAL_RCC_OscConfig+0x330>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	2203      	movs	r2, #3
 800220c:	4013      	ands	r3, r2
 800220e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	2b10      	cmp	r3, #16
 8002214:	d102      	bne.n	800221c <HAL_RCC_OscConfig+0x40>
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2b03      	cmp	r3, #3
 800221a:	d002      	beq.n	8002222 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	2b08      	cmp	r3, #8
 8002220:	d10c      	bne.n	800223c <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002222:	4bba      	ldr	r3, [pc, #744]	; (800250c <HAL_RCC_OscConfig+0x330>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	029b      	lsls	r3, r3, #10
 800222a:	4013      	ands	r3, r2
 800222c:	d063      	beq.n	80022f6 <HAL_RCC_OscConfig+0x11a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d15f      	bne.n	80022f6 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	f000 fb30 	bl	800289c <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	2380      	movs	r3, #128	; 0x80
 8002242:	025b      	lsls	r3, r3, #9
 8002244:	429a      	cmp	r2, r3
 8002246:	d107      	bne.n	8002258 <HAL_RCC_OscConfig+0x7c>
 8002248:	4bb0      	ldr	r3, [pc, #704]	; (800250c <HAL_RCC_OscConfig+0x330>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4baf      	ldr	r3, [pc, #700]	; (800250c <HAL_RCC_OscConfig+0x330>)
 800224e:	2180      	movs	r1, #128	; 0x80
 8002250:	0249      	lsls	r1, r1, #9
 8002252:	430a      	orrs	r2, r1
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	e020      	b.n	800229a <HAL_RCC_OscConfig+0xbe>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	23a0      	movs	r3, #160	; 0xa0
 800225e:	02db      	lsls	r3, r3, #11
 8002260:	429a      	cmp	r2, r3
 8002262:	d10e      	bne.n	8002282 <HAL_RCC_OscConfig+0xa6>
 8002264:	4ba9      	ldr	r3, [pc, #676]	; (800250c <HAL_RCC_OscConfig+0x330>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4ba8      	ldr	r3, [pc, #672]	; (800250c <HAL_RCC_OscConfig+0x330>)
 800226a:	2180      	movs	r1, #128	; 0x80
 800226c:	02c9      	lsls	r1, r1, #11
 800226e:	430a      	orrs	r2, r1
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	4ba6      	ldr	r3, [pc, #664]	; (800250c <HAL_RCC_OscConfig+0x330>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	4ba5      	ldr	r3, [pc, #660]	; (800250c <HAL_RCC_OscConfig+0x330>)
 8002278:	2180      	movs	r1, #128	; 0x80
 800227a:	0249      	lsls	r1, r1, #9
 800227c:	430a      	orrs	r2, r1
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	e00b      	b.n	800229a <HAL_RCC_OscConfig+0xbe>
 8002282:	4ba2      	ldr	r3, [pc, #648]	; (800250c <HAL_RCC_OscConfig+0x330>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	4ba1      	ldr	r3, [pc, #644]	; (800250c <HAL_RCC_OscConfig+0x330>)
 8002288:	49a1      	ldr	r1, [pc, #644]	; (8002510 <HAL_RCC_OscConfig+0x334>)
 800228a:	400a      	ands	r2, r1
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	4b9f      	ldr	r3, [pc, #636]	; (800250c <HAL_RCC_OscConfig+0x330>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	4b9e      	ldr	r3, [pc, #632]	; (800250c <HAL_RCC_OscConfig+0x330>)
 8002294:	499f      	ldr	r1, [pc, #636]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 8002296:	400a      	ands	r2, r1
 8002298:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d014      	beq.n	80022cc <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a2:	f7fe fa9d 	bl	80007e0 <HAL_GetTick>
 80022a6:	0003      	movs	r3, r0
 80022a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ac:	f7fe fa98 	bl	80007e0 <HAL_GetTick>
 80022b0:	0002      	movs	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b64      	cmp	r3, #100	; 0x64
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e2ee      	b.n	800289c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022be:	4b93      	ldr	r3, [pc, #588]	; (800250c <HAL_RCC_OscConfig+0x330>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	029b      	lsls	r3, r3, #10
 80022c6:	4013      	ands	r3, r2
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0xd0>
 80022ca:	e015      	b.n	80022f8 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7fe fa88 	bl	80007e0 <HAL_GetTick>
 80022d0:	0003      	movs	r3, r0
 80022d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d6:	f7fe fa83 	bl	80007e0 <HAL_GetTick>
 80022da:	0002      	movs	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b64      	cmp	r3, #100	; 0x64
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e2d9      	b.n	800289c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022e8:	4b88      	ldr	r3, [pc, #544]	; (800250c <HAL_RCC_OscConfig+0x330>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	029b      	lsls	r3, r3, #10
 80022f0:	4013      	ands	r3, r2
 80022f2:	d1f0      	bne.n	80022d6 <HAL_RCC_OscConfig+0xfa>
 80022f4:	e000      	b.n	80022f8 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2202      	movs	r2, #2
 80022fe:	4013      	ands	r3, r2
 8002300:	d100      	bne.n	8002304 <HAL_RCC_OscConfig+0x128>
 8002302:	e099      	b.n	8002438 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002304:	4b81      	ldr	r3, [pc, #516]	; (800250c <HAL_RCC_OscConfig+0x330>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2238      	movs	r2, #56	; 0x38
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800230e:	4b7f      	ldr	r3, [pc, #508]	; (800250c <HAL_RCC_OscConfig+0x330>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	2203      	movs	r2, #3
 8002314:	4013      	ands	r3, r2
 8002316:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	2b10      	cmp	r3, #16
 800231c:	d102      	bne.n	8002324 <HAL_RCC_OscConfig+0x148>
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2b02      	cmp	r3, #2
 8002322:	d002      	beq.n	800232a <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d135      	bne.n	8002396 <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800232a:	4b78      	ldr	r3, [pc, #480]	; (800250c <HAL_RCC_OscConfig+0x330>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4013      	ands	r3, r2
 8002334:	d005      	beq.n	8002342 <HAL_RCC_OscConfig+0x166>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e2ac      	b.n	800289c <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002342:	4b72      	ldr	r3, [pc, #456]	; (800250c <HAL_RCC_OscConfig+0x330>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4a74      	ldr	r2, [pc, #464]	; (8002518 <HAL_RCC_OscConfig+0x33c>)
 8002348:	4013      	ands	r3, r2
 800234a:	0019      	movs	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	021a      	lsls	r2, r3, #8
 8002352:	4b6e      	ldr	r3, [pc, #440]	; (800250c <HAL_RCC_OscConfig+0x330>)
 8002354:	430a      	orrs	r2, r1
 8002356:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d112      	bne.n	8002384 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800235e:	4b6b      	ldr	r3, [pc, #428]	; (800250c <HAL_RCC_OscConfig+0x330>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a6e      	ldr	r2, [pc, #440]	; (800251c <HAL_RCC_OscConfig+0x340>)
 8002364:	4013      	ands	r3, r2
 8002366:	0019      	movs	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	4b67      	ldr	r3, [pc, #412]	; (800250c <HAL_RCC_OscConfig+0x330>)
 800236e:	430a      	orrs	r2, r1
 8002370:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002372:	4b66      	ldr	r3, [pc, #408]	; (800250c <HAL_RCC_OscConfig+0x330>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	0adb      	lsrs	r3, r3, #11
 8002378:	2207      	movs	r2, #7
 800237a:	4013      	ands	r3, r2
 800237c:	4a68      	ldr	r2, [pc, #416]	; (8002520 <HAL_RCC_OscConfig+0x344>)
 800237e:	40da      	lsrs	r2, r3
 8002380:	4b68      	ldr	r3, [pc, #416]	; (8002524 <HAL_RCC_OscConfig+0x348>)
 8002382:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002384:	4b68      	ldr	r3, [pc, #416]	; (8002528 <HAL_RCC_OscConfig+0x34c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	0018      	movs	r0, r3
 800238a:	f7fe f9cd 	bl	8000728 <HAL_InitTick>
 800238e:	1e03      	subs	r3, r0, #0
 8002390:	d051      	beq.n	8002436 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e282      	b.n	800289c <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d030      	beq.n	8002400 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800239e:	4b5b      	ldr	r3, [pc, #364]	; (800250c <HAL_RCC_OscConfig+0x330>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a5e      	ldr	r2, [pc, #376]	; (800251c <HAL_RCC_OscConfig+0x340>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	0019      	movs	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	4b57      	ldr	r3, [pc, #348]	; (800250c <HAL_RCC_OscConfig+0x330>)
 80023ae:	430a      	orrs	r2, r1
 80023b0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80023b2:	4b56      	ldr	r3, [pc, #344]	; (800250c <HAL_RCC_OscConfig+0x330>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	4b55      	ldr	r3, [pc, #340]	; (800250c <HAL_RCC_OscConfig+0x330>)
 80023b8:	2180      	movs	r1, #128	; 0x80
 80023ba:	0049      	lsls	r1, r1, #1
 80023bc:	430a      	orrs	r2, r1
 80023be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7fe fa0e 	bl	80007e0 <HAL_GetTick>
 80023c4:	0003      	movs	r3, r0
 80023c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ca:	f7fe fa09 	bl	80007e0 <HAL_GetTick>
 80023ce:	0002      	movs	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e25f      	b.n	800289c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023dc:	4b4b      	ldr	r3, [pc, #300]	; (800250c <HAL_RCC_OscConfig+0x330>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4013      	ands	r3, r2
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e8:	4b48      	ldr	r3, [pc, #288]	; (800250c <HAL_RCC_OscConfig+0x330>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4a4a      	ldr	r2, [pc, #296]	; (8002518 <HAL_RCC_OscConfig+0x33c>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	0019      	movs	r1, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	021a      	lsls	r2, r3, #8
 80023f8:	4b44      	ldr	r3, [pc, #272]	; (800250c <HAL_RCC_OscConfig+0x330>)
 80023fa:	430a      	orrs	r2, r1
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	e01b      	b.n	8002438 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002400:	4b42      	ldr	r3, [pc, #264]	; (800250c <HAL_RCC_OscConfig+0x330>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b41      	ldr	r3, [pc, #260]	; (800250c <HAL_RCC_OscConfig+0x330>)
 8002406:	4949      	ldr	r1, [pc, #292]	; (800252c <HAL_RCC_OscConfig+0x350>)
 8002408:	400a      	ands	r2, r1
 800240a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7fe f9e8 	bl	80007e0 <HAL_GetTick>
 8002410:	0003      	movs	r3, r0
 8002412:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002416:	f7fe f9e3 	bl	80007e0 <HAL_GetTick>
 800241a:	0002      	movs	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e239      	b.n	800289c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002428:	4b38      	ldr	r3, [pc, #224]	; (800250c <HAL_RCC_OscConfig+0x330>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4013      	ands	r3, r2
 8002432:	d1f0      	bne.n	8002416 <HAL_RCC_OscConfig+0x23a>
 8002434:	e000      	b.n	8002438 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002436:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2208      	movs	r2, #8
 800243e:	4013      	ands	r3, r2
 8002440:	d047      	beq.n	80024d2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002442:	4b32      	ldr	r3, [pc, #200]	; (800250c <HAL_RCC_OscConfig+0x330>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2238      	movs	r2, #56	; 0x38
 8002448:	4013      	ands	r3, r2
 800244a:	2b18      	cmp	r3, #24
 800244c:	d10a      	bne.n	8002464 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800244e:	4b2f      	ldr	r3, [pc, #188]	; (800250c <HAL_RCC_OscConfig+0x330>)
 8002450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002452:	2202      	movs	r2, #2
 8002454:	4013      	ands	r3, r2
 8002456:	d03c      	beq.n	80024d2 <HAL_RCC_OscConfig+0x2f6>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d138      	bne.n	80024d2 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e21b      	b.n	800289c <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d019      	beq.n	80024a0 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800246c:	4b27      	ldr	r3, [pc, #156]	; (800250c <HAL_RCC_OscConfig+0x330>)
 800246e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002470:	4b26      	ldr	r3, [pc, #152]	; (800250c <HAL_RCC_OscConfig+0x330>)
 8002472:	2101      	movs	r1, #1
 8002474:	430a      	orrs	r2, r1
 8002476:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7fe f9b2 	bl	80007e0 <HAL_GetTick>
 800247c:	0003      	movs	r3, r0
 800247e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002482:	f7fe f9ad 	bl	80007e0 <HAL_GetTick>
 8002486:	0002      	movs	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e203      	b.n	800289c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002494:	4b1d      	ldr	r3, [pc, #116]	; (800250c <HAL_RCC_OscConfig+0x330>)
 8002496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002498:	2202      	movs	r2, #2
 800249a:	4013      	ands	r3, r2
 800249c:	d0f1      	beq.n	8002482 <HAL_RCC_OscConfig+0x2a6>
 800249e:	e018      	b.n	80024d2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80024a0:	4b1a      	ldr	r3, [pc, #104]	; (800250c <HAL_RCC_OscConfig+0x330>)
 80024a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024a4:	4b19      	ldr	r3, [pc, #100]	; (800250c <HAL_RCC_OscConfig+0x330>)
 80024a6:	2101      	movs	r1, #1
 80024a8:	438a      	bics	r2, r1
 80024aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7fe f998 	bl	80007e0 <HAL_GetTick>
 80024b0:	0003      	movs	r3, r0
 80024b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b6:	f7fe f993 	bl	80007e0 <HAL_GetTick>
 80024ba:	0002      	movs	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e1e9      	b.n	800289c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024c8:	4b10      	ldr	r3, [pc, #64]	; (800250c <HAL_RCC_OscConfig+0x330>)
 80024ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024cc:	2202      	movs	r2, #2
 80024ce:	4013      	ands	r3, r2
 80024d0:	d1f1      	bne.n	80024b6 <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2204      	movs	r2, #4
 80024d8:	4013      	ands	r3, r2
 80024da:	d100      	bne.n	80024de <HAL_RCC_OscConfig+0x302>
 80024dc:	e0c6      	b.n	800266c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024de:	231f      	movs	r3, #31
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80024e6:	4b09      	ldr	r3, [pc, #36]	; (800250c <HAL_RCC_OscConfig+0x330>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2238      	movs	r2, #56	; 0x38
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b20      	cmp	r3, #32
 80024f0:	d11e      	bne.n	8002530 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_RCC_OscConfig+0x330>)
 80024f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f6:	2202      	movs	r2, #2
 80024f8:	4013      	ands	r3, r2
 80024fa:	d100      	bne.n	80024fe <HAL_RCC_OscConfig+0x322>
 80024fc:	e0b6      	b.n	800266c <HAL_RCC_OscConfig+0x490>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d000      	beq.n	8002508 <HAL_RCC_OscConfig+0x32c>
 8002506:	e0b1      	b.n	800266c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e1c7      	b.n	800289c <HAL_RCC_OscConfig+0x6c0>
 800250c:	40021000 	.word	0x40021000
 8002510:	fffeffff 	.word	0xfffeffff
 8002514:	fffbffff 	.word	0xfffbffff
 8002518:	ffff80ff 	.word	0xffff80ff
 800251c:	ffffc7ff 	.word	0xffffc7ff
 8002520:	00f42400 	.word	0x00f42400
 8002524:	20000004 	.word	0x20000004
 8002528:	20000008 	.word	0x20000008
 800252c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002530:	4bb8      	ldr	r3, [pc, #736]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 8002532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	055b      	lsls	r3, r3, #21
 8002538:	4013      	ands	r3, r2
 800253a:	d101      	bne.n	8002540 <HAL_RCC_OscConfig+0x364>
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <HAL_RCC_OscConfig+0x366>
 8002540:	2300      	movs	r3, #0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d011      	beq.n	800256a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002546:	4bb3      	ldr	r3, [pc, #716]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 8002548:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800254a:	4bb2      	ldr	r3, [pc, #712]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 800254c:	2180      	movs	r1, #128	; 0x80
 800254e:	0549      	lsls	r1, r1, #21
 8002550:	430a      	orrs	r2, r1
 8002552:	63da      	str	r2, [r3, #60]	; 0x3c
 8002554:	4baf      	ldr	r3, [pc, #700]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 8002556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	055b      	lsls	r3, r3, #21
 800255c:	4013      	ands	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002562:	231f      	movs	r3, #31
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800256a:	4bab      	ldr	r3, [pc, #684]	; (8002818 <HAL_RCC_OscConfig+0x63c>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4013      	ands	r3, r2
 8002574:	d11a      	bne.n	80025ac <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002576:	4ba8      	ldr	r3, [pc, #672]	; (8002818 <HAL_RCC_OscConfig+0x63c>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	4ba7      	ldr	r3, [pc, #668]	; (8002818 <HAL_RCC_OscConfig+0x63c>)
 800257c:	2180      	movs	r1, #128	; 0x80
 800257e:	0049      	lsls	r1, r1, #1
 8002580:	430a      	orrs	r2, r1
 8002582:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002584:	f7fe f92c 	bl	80007e0 <HAL_GetTick>
 8002588:	0003      	movs	r3, r0
 800258a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258e:	f7fe f927 	bl	80007e0 <HAL_GetTick>
 8002592:	0002      	movs	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e17d      	b.n	800289c <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025a0:	4b9d      	ldr	r3, [pc, #628]	; (8002818 <HAL_RCC_OscConfig+0x63c>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4013      	ands	r3, r2
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d106      	bne.n	80025c2 <HAL_RCC_OscConfig+0x3e6>
 80025b4:	4b97      	ldr	r3, [pc, #604]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 80025b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025b8:	4b96      	ldr	r3, [pc, #600]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 80025ba:	2101      	movs	r1, #1
 80025bc:	430a      	orrs	r2, r1
 80025be:	65da      	str	r2, [r3, #92]	; 0x5c
 80025c0:	e01c      	b.n	80025fc <HAL_RCC_OscConfig+0x420>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b05      	cmp	r3, #5
 80025c8:	d10c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x408>
 80025ca:	4b92      	ldr	r3, [pc, #584]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 80025cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025ce:	4b91      	ldr	r3, [pc, #580]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 80025d0:	2104      	movs	r1, #4
 80025d2:	430a      	orrs	r2, r1
 80025d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80025d6:	4b8f      	ldr	r3, [pc, #572]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 80025d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025da:	4b8e      	ldr	r3, [pc, #568]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 80025dc:	2101      	movs	r1, #1
 80025de:	430a      	orrs	r2, r1
 80025e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80025e2:	e00b      	b.n	80025fc <HAL_RCC_OscConfig+0x420>
 80025e4:	4b8b      	ldr	r3, [pc, #556]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 80025e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025e8:	4b8a      	ldr	r3, [pc, #552]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 80025ea:	2101      	movs	r1, #1
 80025ec:	438a      	bics	r2, r1
 80025ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80025f0:	4b88      	ldr	r3, [pc, #544]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 80025f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025f4:	4b87      	ldr	r3, [pc, #540]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 80025f6:	2104      	movs	r1, #4
 80025f8:	438a      	bics	r2, r1
 80025fa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d014      	beq.n	800262e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7fe f8ec 	bl	80007e0 <HAL_GetTick>
 8002608:	0003      	movs	r3, r0
 800260a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800260c:	e009      	b.n	8002622 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260e:	f7fe f8e7 	bl	80007e0 <HAL_GetTick>
 8002612:	0002      	movs	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	4a80      	ldr	r2, [pc, #512]	; (800281c <HAL_RCC_OscConfig+0x640>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e13c      	b.n	800289c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002622:	4b7c      	ldr	r3, [pc, #496]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 8002624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002626:	2202      	movs	r2, #2
 8002628:	4013      	ands	r3, r2
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x432>
 800262c:	e013      	b.n	8002656 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262e:	f7fe f8d7 	bl	80007e0 <HAL_GetTick>
 8002632:	0003      	movs	r3, r0
 8002634:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002636:	e009      	b.n	800264c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002638:	f7fe f8d2 	bl	80007e0 <HAL_GetTick>
 800263c:	0002      	movs	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	4a76      	ldr	r2, [pc, #472]	; (800281c <HAL_RCC_OscConfig+0x640>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e127      	b.n	800289c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800264c:	4b71      	ldr	r3, [pc, #452]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	2202      	movs	r2, #2
 8002652:	4013      	ands	r3, r2
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002656:	231f      	movs	r3, #31
 8002658:	18fb      	adds	r3, r7, r3
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d105      	bne.n	800266c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002660:	4b6c      	ldr	r3, [pc, #432]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 8002662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002664:	4b6b      	ldr	r3, [pc, #428]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 8002666:	496e      	ldr	r1, [pc, #440]	; (8002820 <HAL_RCC_OscConfig+0x644>)
 8002668:	400a      	ands	r2, r1
 800266a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2220      	movs	r2, #32
 8002672:	4013      	ands	r3, r2
 8002674:	d039      	beq.n	80026ea <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d01b      	beq.n	80026b6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800267e:	4b65      	ldr	r3, [pc, #404]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	4b64      	ldr	r3, [pc, #400]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 8002684:	2180      	movs	r1, #128	; 0x80
 8002686:	03c9      	lsls	r1, r1, #15
 8002688:	430a      	orrs	r2, r1
 800268a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7fe f8a8 	bl	80007e0 <HAL_GetTick>
 8002690:	0003      	movs	r3, r0
 8002692:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002696:	f7fe f8a3 	bl	80007e0 <HAL_GetTick>
 800269a:	0002      	movs	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e0f9      	b.n	800289c <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80026a8:	4b5a      	ldr	r3, [pc, #360]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	041b      	lsls	r3, r3, #16
 80026b0:	4013      	ands	r3, r2
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x4ba>
 80026b4:	e019      	b.n	80026ea <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026b6:	4b57      	ldr	r3, [pc, #348]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4b56      	ldr	r3, [pc, #344]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 80026bc:	4959      	ldr	r1, [pc, #356]	; (8002824 <HAL_RCC_OscConfig+0x648>)
 80026be:	400a      	ands	r2, r1
 80026c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c2:	f7fe f88d 	bl	80007e0 <HAL_GetTick>
 80026c6:	0003      	movs	r3, r0
 80026c8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026cc:	f7fe f888 	bl	80007e0 <HAL_GetTick>
 80026d0:	0002      	movs	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e0de      	b.n	800289c <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80026de:	4b4d      	ldr	r3, [pc, #308]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	041b      	lsls	r3, r3, #16
 80026e6:	4013      	ands	r3, r2
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d100      	bne.n	80026f4 <HAL_RCC_OscConfig+0x518>
 80026f2:	e0d2      	b.n	800289a <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f4:	4b47      	ldr	r3, [pc, #284]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2238      	movs	r2, #56	; 0x38
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b10      	cmp	r3, #16
 80026fe:	d100      	bne.n	8002702 <HAL_RCC_OscConfig+0x526>
 8002700:	e081      	b.n	8002806 <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d156      	bne.n	80027b8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270a:	4b42      	ldr	r3, [pc, #264]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	4b41      	ldr	r3, [pc, #260]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 8002710:	4945      	ldr	r1, [pc, #276]	; (8002828 <HAL_RCC_OscConfig+0x64c>)
 8002712:	400a      	ands	r2, r1
 8002714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002716:	f7fe f863 	bl	80007e0 <HAL_GetTick>
 800271a:	0003      	movs	r3, r0
 800271c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002720:	f7fe f85e 	bl	80007e0 <HAL_GetTick>
 8002724:	0002      	movs	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e0b4      	b.n	800289c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002732:	4b38      	ldr	r3, [pc, #224]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	049b      	lsls	r3, r3, #18
 800273a:	4013      	ands	r3, r2
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800273e:	4b35      	ldr	r3, [pc, #212]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	4a3a      	ldr	r2, [pc, #232]	; (800282c <HAL_RCC_OscConfig+0x650>)
 8002744:	4013      	ands	r3, r2
 8002746:	0019      	movs	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276a:	431a      	orrs	r2, r3
 800276c:	4b29      	ldr	r3, [pc, #164]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 800276e:	430a      	orrs	r2, r1
 8002770:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002772:	4b28      	ldr	r3, [pc, #160]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	4b27      	ldr	r3, [pc, #156]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 8002778:	2180      	movs	r1, #128	; 0x80
 800277a:	0449      	lsls	r1, r1, #17
 800277c:	430a      	orrs	r2, r1
 800277e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002780:	4b24      	ldr	r3, [pc, #144]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	4b23      	ldr	r3, [pc, #140]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 8002786:	2180      	movs	r1, #128	; 0x80
 8002788:	0549      	lsls	r1, r1, #21
 800278a:	430a      	orrs	r2, r1
 800278c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7fe f827 	bl	80007e0 <HAL_GetTick>
 8002792:	0003      	movs	r3, r0
 8002794:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002798:	f7fe f822 	bl	80007e0 <HAL_GetTick>
 800279c:	0002      	movs	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e078      	b.n	800289c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027aa:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	049b      	lsls	r3, r3, #18
 80027b2:	4013      	ands	r3, r2
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0x5bc>
 80027b6:	e070      	b.n	800289a <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b8:	4b16      	ldr	r3, [pc, #88]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b15      	ldr	r3, [pc, #84]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 80027be:	491a      	ldr	r1, [pc, #104]	; (8002828 <HAL_RCC_OscConfig+0x64c>)
 80027c0:	400a      	ands	r2, r1
 80027c2:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80027c4:	4b13      	ldr	r3, [pc, #76]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	4b12      	ldr	r3, [pc, #72]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 80027ca:	2103      	movs	r1, #3
 80027cc:	438a      	bics	r2, r1
 80027ce:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80027d0:	4b10      	ldr	r3, [pc, #64]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 80027d6:	4916      	ldr	r1, [pc, #88]	; (8002830 <HAL_RCC_OscConfig+0x654>)
 80027d8:	400a      	ands	r2, r1
 80027da:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7fe f800 	bl	80007e0 <HAL_GetTick>
 80027e0:	0003      	movs	r3, r0
 80027e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e6:	f7fd fffb 	bl	80007e0 <HAL_GetTick>
 80027ea:	0002      	movs	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e051      	b.n	800289c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <HAL_RCC_OscConfig+0x638>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	049b      	lsls	r3, r3, #18
 8002800:	4013      	ands	r3, r2
 8002802:	d1f0      	bne.n	80027e6 <HAL_RCC_OscConfig+0x60a>
 8002804:	e049      	b.n	800289a <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d112      	bne.n	8002834 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e044      	b.n	800289c <HAL_RCC_OscConfig+0x6c0>
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	40021000 	.word	0x40021000
 8002818:	40007000 	.word	0x40007000
 800281c:	00001388 	.word	0x00001388
 8002820:	efffffff 	.word	0xefffffff
 8002824:	ffbfffff 	.word	0xffbfffff
 8002828:	feffffff 	.word	0xfeffffff
 800282c:	11c1808c 	.word	0x11c1808c
 8002830:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002834:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <HAL_RCC_OscConfig+0x6c8>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2203      	movs	r2, #3
 800283e:	401a      	ands	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	429a      	cmp	r2, r3
 8002846:	d126      	bne.n	8002896 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2270      	movs	r2, #112	; 0x70
 800284c:	401a      	ands	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002852:	429a      	cmp	r2, r3
 8002854:	d11f      	bne.n	8002896 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	23fe      	movs	r3, #254	; 0xfe
 800285a:	01db      	lsls	r3, r3, #7
 800285c:	401a      	ands	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002862:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d116      	bne.n	8002896 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	23f8      	movs	r3, #248	; 0xf8
 800286c:	039b      	lsls	r3, r3, #14
 800286e:	401a      	ands	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d10e      	bne.n	8002896 <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	23e0      	movs	r3, #224	; 0xe0
 800287c:	051b      	lsls	r3, r3, #20
 800287e:	401a      	ands	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d106      	bne.n	8002896 <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	0f5b      	lsrs	r3, r3, #29
 800288c:	075a      	lsls	r2, r3, #29
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002892:	429a      	cmp	r2, r3
 8002894:	d001      	beq.n	800289a <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	0018      	movs	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	b008      	add	sp, #32
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40021000 	.word	0x40021000

080028a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0e9      	b.n	8002a90 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028bc:	4b76      	ldr	r3, [pc, #472]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2207      	movs	r2, #7
 80028c2:	4013      	ands	r3, r2
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d91e      	bls.n	8002908 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ca:	4b73      	ldr	r3, [pc, #460]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2207      	movs	r2, #7
 80028d0:	4393      	bics	r3, r2
 80028d2:	0019      	movs	r1, r3
 80028d4:	4b70      	ldr	r3, [pc, #448]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028dc:	f7fd ff80 	bl	80007e0 <HAL_GetTick>
 80028e0:	0003      	movs	r3, r0
 80028e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028e4:	e009      	b.n	80028fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e6:	f7fd ff7b 	bl	80007e0 <HAL_GetTick>
 80028ea:	0002      	movs	r2, r0
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	4a6a      	ldr	r2, [pc, #424]	; (8002a9c <HAL_RCC_ClockConfig+0x1f4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e0ca      	b.n	8002a90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028fa:	4b67      	ldr	r3, [pc, #412]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2207      	movs	r2, #7
 8002900:	4013      	ands	r3, r2
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d1ee      	bne.n	80028e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2202      	movs	r2, #2
 800290e:	4013      	ands	r3, r2
 8002910:	d015      	beq.n	800293e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2204      	movs	r2, #4
 8002918:	4013      	ands	r3, r2
 800291a:	d006      	beq.n	800292a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800291c:	4b60      	ldr	r3, [pc, #384]	; (8002aa0 <HAL_RCC_ClockConfig+0x1f8>)
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	4b5f      	ldr	r3, [pc, #380]	; (8002aa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002922:	21e0      	movs	r1, #224	; 0xe0
 8002924:	01c9      	lsls	r1, r1, #7
 8002926:	430a      	orrs	r2, r1
 8002928:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800292a:	4b5d      	ldr	r3, [pc, #372]	; (8002aa0 <HAL_RCC_ClockConfig+0x1f8>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	4a5d      	ldr	r2, [pc, #372]	; (8002aa4 <HAL_RCC_ClockConfig+0x1fc>)
 8002930:	4013      	ands	r3, r2
 8002932:	0019      	movs	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	4b59      	ldr	r3, [pc, #356]	; (8002aa0 <HAL_RCC_ClockConfig+0x1f8>)
 800293a:	430a      	orrs	r2, r1
 800293c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2201      	movs	r2, #1
 8002944:	4013      	ands	r3, r2
 8002946:	d057      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d107      	bne.n	8002960 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002950:	4b53      	ldr	r3, [pc, #332]	; (8002aa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	2380      	movs	r3, #128	; 0x80
 8002956:	029b      	lsls	r3, r3, #10
 8002958:	4013      	ands	r3, r2
 800295a:	d12b      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e097      	b.n	8002a90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b02      	cmp	r3, #2
 8002966:	d107      	bne.n	8002978 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002968:	4b4d      	ldr	r3, [pc, #308]	; (8002aa0 <HAL_RCC_ClockConfig+0x1f8>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	049b      	lsls	r3, r3, #18
 8002970:	4013      	ands	r3, r2
 8002972:	d11f      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e08b      	b.n	8002a90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d107      	bne.n	8002990 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002980:	4b47      	ldr	r3, [pc, #284]	; (8002aa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	4013      	ands	r3, r2
 800298a:	d113      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e07f      	b.n	8002a90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d106      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002998:	4b41      	ldr	r3, [pc, #260]	; (8002aa0 <HAL_RCC_ClockConfig+0x1f8>)
 800299a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299c:	2202      	movs	r2, #2
 800299e:	4013      	ands	r3, r2
 80029a0:	d108      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e074      	b.n	8002a90 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029a6:	4b3e      	ldr	r3, [pc, #248]	; (8002aa0 <HAL_RCC_ClockConfig+0x1f8>)
 80029a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029aa:	2202      	movs	r2, #2
 80029ac:	4013      	ands	r3, r2
 80029ae:	d101      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e06d      	b.n	8002a90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029b4:	4b3a      	ldr	r3, [pc, #232]	; (8002aa0 <HAL_RCC_ClockConfig+0x1f8>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2207      	movs	r2, #7
 80029ba:	4393      	bics	r3, r2
 80029bc:	0019      	movs	r1, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <HAL_RCC_ClockConfig+0x1f8>)
 80029c4:	430a      	orrs	r2, r1
 80029c6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c8:	f7fd ff0a 	bl	80007e0 <HAL_GetTick>
 80029cc:	0003      	movs	r3, r0
 80029ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d0:	e009      	b.n	80029e6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d2:	f7fd ff05 	bl	80007e0 <HAL_GetTick>
 80029d6:	0002      	movs	r2, r0
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	4a2f      	ldr	r2, [pc, #188]	; (8002a9c <HAL_RCC_ClockConfig+0x1f4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e054      	b.n	8002a90 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e6:	4b2e      	ldr	r3, [pc, #184]	; (8002aa0 <HAL_RCC_ClockConfig+0x1f8>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2238      	movs	r2, #56	; 0x38
 80029ec:	401a      	ands	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d1ec      	bne.n	80029d2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029f8:	4b27      	ldr	r3, [pc, #156]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2207      	movs	r2, #7
 80029fe:	4013      	ands	r3, r2
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d21e      	bcs.n	8002a44 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a06:	4b24      	ldr	r3, [pc, #144]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2207      	movs	r2, #7
 8002a0c:	4393      	bics	r3, r2
 8002a0e:	0019      	movs	r1, r3
 8002a10:	4b21      	ldr	r3, [pc, #132]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a18:	f7fd fee2 	bl	80007e0 <HAL_GetTick>
 8002a1c:	0003      	movs	r3, r0
 8002a1e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a20:	e009      	b.n	8002a36 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a22:	f7fd fedd 	bl	80007e0 <HAL_GetTick>
 8002a26:	0002      	movs	r2, r0
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	4a1b      	ldr	r2, [pc, #108]	; (8002a9c <HAL_RCC_ClockConfig+0x1f4>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e02c      	b.n	8002a90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a36:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2207      	movs	r2, #7
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d1ee      	bne.n	8002a22 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2204      	movs	r2, #4
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d009      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a4e:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	4a15      	ldr	r2, [pc, #84]	; (8002aa8 <HAL_RCC_ClockConfig+0x200>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	0019      	movs	r1, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a62:	f000 f829 	bl	8002ab8 <HAL_RCC_GetSysClockFreq>
 8002a66:	0001      	movs	r1, r0
 8002a68:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	0a1b      	lsrs	r3, r3, #8
 8002a6e:	220f      	movs	r2, #15
 8002a70:	401a      	ands	r2, r3
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <HAL_RCC_ClockConfig+0x204>)
 8002a74:	0092      	lsls	r2, r2, #2
 8002a76:	58d3      	ldr	r3, [r2, r3]
 8002a78:	221f      	movs	r2, #31
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	000a      	movs	r2, r1
 8002a7e:	40da      	lsrs	r2, r3
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_RCC_ClockConfig+0x208>)
 8002a82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_RCC_ClockConfig+0x20c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f7fd fe4d 	bl	8000728 <HAL_InitTick>
 8002a8e:	0003      	movs	r3, r0
}
 8002a90:	0018      	movs	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	b004      	add	sp, #16
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40022000 	.word	0x40022000
 8002a9c:	00001388 	.word	0x00001388
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	fffff0ff 	.word	0xfffff0ff
 8002aa8:	ffff8fff 	.word	0xffff8fff
 8002aac:	080030a4 	.word	0x080030a4
 8002ab0:	20000004 	.word	0x20000004
 8002ab4:	20000008 	.word	0x20000008

08002ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002abe:	4b3c      	ldr	r3, [pc, #240]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2238      	movs	r2, #56	; 0x38
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d10f      	bne.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002ac8:	4b39      	ldr	r3, [pc, #228]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	0adb      	lsrs	r3, r3, #11
 8002ace:	2207      	movs	r2, #7
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	0013      	movs	r3, r2
 8002ad8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002ada:	6839      	ldr	r1, [r7, #0]
 8002adc:	4835      	ldr	r0, [pc, #212]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ade:	f7fd fb11 	bl	8000104 <__udivsi3>
 8002ae2:	0003      	movs	r3, r0
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	e05d      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ae8:	4b31      	ldr	r3, [pc, #196]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2238      	movs	r2, #56	; 0x38
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d102      	bne.n	8002afa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002af4:	4b30      	ldr	r3, [pc, #192]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	e054      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002afa:	4b2d      	ldr	r3, [pc, #180]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2238      	movs	r2, #56	; 0x38
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b10      	cmp	r3, #16
 8002b04:	d138      	bne.n	8002b78 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002b06:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b10:	4b27      	ldr	r3, [pc, #156]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	2207      	movs	r2, #7
 8002b18:	4013      	ands	r3, r2
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d10d      	bne.n	8002b40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	4824      	ldr	r0, [pc, #144]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b28:	f7fd faec 	bl	8000104 <__udivsi3>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	0019      	movs	r1, r3
 8002b30:	4b1f      	ldr	r3, [pc, #124]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	227f      	movs	r2, #127	; 0x7f
 8002b38:	4013      	ands	r3, r2
 8002b3a:	434b      	muls	r3, r1
 8002b3c:	617b      	str	r3, [r7, #20]
        break;
 8002b3e:	e00d      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	481c      	ldr	r0, [pc, #112]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b44:	f7fd fade 	bl	8000104 <__udivsi3>
 8002b48:	0003      	movs	r3, r0
 8002b4a:	0019      	movs	r1, r3
 8002b4c:	4b18      	ldr	r3, [pc, #96]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	0a1b      	lsrs	r3, r3, #8
 8002b52:	227f      	movs	r2, #127	; 0x7f
 8002b54:	4013      	ands	r3, r2
 8002b56:	434b      	muls	r3, r1
 8002b58:	617b      	str	r3, [r7, #20]
        break;
 8002b5a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002b5c:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	0f5b      	lsrs	r3, r3, #29
 8002b62:	2207      	movs	r2, #7
 8002b64:	4013      	ands	r3, r2
 8002b66:	3301      	adds	r3, #1
 8002b68:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	6978      	ldr	r0, [r7, #20]
 8002b6e:	f7fd fac9 	bl	8000104 <__udivsi3>
 8002b72:	0003      	movs	r3, r0
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	e015      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b78:	4b0d      	ldr	r3, [pc, #52]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	2238      	movs	r2, #56	; 0x38
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d103      	bne.n	8002b8c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	e00b      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b8c:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2238      	movs	r2, #56	; 0x38
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b18      	cmp	r3, #24
 8002b96:	d103      	bne.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002b98:	23fa      	movs	r3, #250	; 0xfa
 8002b9a:	01db      	lsls	r3, r3, #7
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	e001      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ba4:	693b      	ldr	r3, [r7, #16]
}
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b006      	add	sp, #24
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	00f42400 	.word	0x00f42400
 8002bb8:	007a1200 	.word	0x007a1200

08002bbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002bc4:	2313      	movs	r3, #19
 8002bc6:	18fb      	adds	r3, r7, r3
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bcc:	2312      	movs	r3, #18
 8002bce:	18fb      	adds	r3, r7, r3
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	029b      	lsls	r3, r3, #10
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d100      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002be0:	e0ad      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be2:	2011      	movs	r0, #17
 8002be4:	183b      	adds	r3, r7, r0
 8002be6:	2200      	movs	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bea:	4b47      	ldr	r3, [pc, #284]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002bec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bee:	2380      	movs	r3, #128	; 0x80
 8002bf0:	055b      	lsls	r3, r3, #21
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d110      	bne.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf6:	4b44      	ldr	r3, [pc, #272]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002bf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bfa:	4b43      	ldr	r3, [pc, #268]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002bfc:	2180      	movs	r1, #128	; 0x80
 8002bfe:	0549      	lsls	r1, r1, #21
 8002c00:	430a      	orrs	r2, r1
 8002c02:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c04:	4b40      	ldr	r3, [pc, #256]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	055b      	lsls	r3, r3, #21
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c12:	183b      	adds	r3, r7, r0
 8002c14:	2201      	movs	r2, #1
 8002c16:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c18:	4b3c      	ldr	r3, [pc, #240]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	4b3b      	ldr	r3, [pc, #236]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002c1e:	2180      	movs	r1, #128	; 0x80
 8002c20:	0049      	lsls	r1, r1, #1
 8002c22:	430a      	orrs	r2, r1
 8002c24:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c26:	f7fd fddb 	bl	80007e0 <HAL_GetTick>
 8002c2a:	0003      	movs	r3, r0
 8002c2c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c2e:	e00b      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c30:	f7fd fdd6 	bl	80007e0 <HAL_GetTick>
 8002c34:	0002      	movs	r2, r0
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d904      	bls.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002c3e:	2313      	movs	r3, #19
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	2203      	movs	r2, #3
 8002c44:	701a      	strb	r2, [r3, #0]
        break;
 8002c46:	e005      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c48:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	2380      	movs	r3, #128	; 0x80
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4013      	ands	r3, r2
 8002c52:	d0ed      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002c54:	2313      	movs	r3, #19
 8002c56:	18fb      	adds	r3, r7, r3
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d15e      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c5e:	4b2a      	ldr	r3, [pc, #168]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c62:	23c0      	movs	r3, #192	; 0xc0
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4013      	ands	r3, r2
 8002c68:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d019      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d014      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c7a:	4b23      	ldr	r3, [pc, #140]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7e:	4a24      	ldr	r2, [pc, #144]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c84:	4b20      	ldr	r3, [pc, #128]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c88:	4b1f      	ldr	r3, [pc, #124]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c8a:	2180      	movs	r1, #128	; 0x80
 8002c8c:	0249      	lsls	r1, r1, #9
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c92:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c96:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c98:	491e      	ldr	r1, [pc, #120]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002c9a:	400a      	ands	r2, r1
 8002c9c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c9e:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d016      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cac:	f7fd fd98 	bl	80007e0 <HAL_GetTick>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb4:	e00c      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb6:	f7fd fd93 	bl	80007e0 <HAL_GetTick>
 8002cba:	0002      	movs	r2, r0
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	4a15      	ldr	r2, [pc, #84]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d904      	bls.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002cc6:	2313      	movs	r3, #19
 8002cc8:	18fb      	adds	r3, r7, r3
 8002cca:	2203      	movs	r2, #3
 8002ccc:	701a      	strb	r2, [r3, #0]
            break;
 8002cce:	e004      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd0:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d0ed      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002cda:	2313      	movs	r3, #19
 8002cdc:	18fb      	adds	r3, r7, r3
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10a      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ce4:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce8:	4a09      	ldr	r2, [pc, #36]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	0019      	movs	r1, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cf8:	e016      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cfa:	2312      	movs	r3, #18
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	2213      	movs	r2, #19
 8002d00:	18ba      	adds	r2, r7, r2
 8002d02:	7812      	ldrb	r2, [r2, #0]
 8002d04:	701a      	strb	r2, [r3, #0]
 8002d06:	e00f      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40007000 	.word	0x40007000
 8002d10:	fffffcff 	.word	0xfffffcff
 8002d14:	fffeffff 	.word	0xfffeffff
 8002d18:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d1c:	2312      	movs	r3, #18
 8002d1e:	18fb      	adds	r3, r7, r3
 8002d20:	2213      	movs	r2, #19
 8002d22:	18ba      	adds	r2, r7, r2
 8002d24:	7812      	ldrb	r2, [r2, #0]
 8002d26:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d28:	2311      	movs	r3, #17
 8002d2a:	18fb      	adds	r3, r7, r3
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d105      	bne.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d32:	4bb6      	ldr	r3, [pc, #728]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d36:	4bb5      	ldr	r3, [pc, #724]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d38:	49b5      	ldr	r1, [pc, #724]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002d3a:	400a      	ands	r2, r1
 8002d3c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2201      	movs	r2, #1
 8002d44:	4013      	ands	r3, r2
 8002d46:	d009      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d48:	4bb0      	ldr	r3, [pc, #704]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	4393      	bics	r3, r2
 8002d50:	0019      	movs	r1, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	4bad      	ldr	r3, [pc, #692]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2202      	movs	r2, #2
 8002d62:	4013      	ands	r3, r2
 8002d64:	d009      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d66:	4ba9      	ldr	r3, [pc, #676]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6a:	220c      	movs	r2, #12
 8002d6c:	4393      	bics	r3, r2
 8002d6e:	0019      	movs	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	4ba5      	ldr	r3, [pc, #660]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d76:	430a      	orrs	r2, r1
 8002d78:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2204      	movs	r2, #4
 8002d80:	4013      	ands	r3, r2
 8002d82:	d009      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d84:	4ba1      	ldr	r3, [pc, #644]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d88:	2230      	movs	r2, #48	; 0x30
 8002d8a:	4393      	bics	r3, r2
 8002d8c:	0019      	movs	r1, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	4b9e      	ldr	r3, [pc, #632]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d94:	430a      	orrs	r2, r1
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2210      	movs	r2, #16
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d009      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002da2:	4b9a      	ldr	r3, [pc, #616]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da6:	4a9b      	ldr	r2, [pc, #620]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	0019      	movs	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	4b96      	ldr	r3, [pc, #600]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002db2:	430a      	orrs	r2, r1
 8002db4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	015b      	lsls	r3, r3, #5
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d009      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002dc2:	4b92      	ldr	r3, [pc, #584]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc6:	4a94      	ldr	r2, [pc, #592]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	0019      	movs	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	695a      	ldr	r2, [r3, #20]
 8002dd0:	4b8e      	ldr	r3, [pc, #568]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4013      	ands	r3, r2
 8002de0:	d009      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002de2:	4b8a      	ldr	r3, [pc, #552]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de6:	4a8d      	ldr	r2, [pc, #564]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	0019      	movs	r1, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002df0:	4b86      	ldr	r3, [pc, #536]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002df2:	430a      	orrs	r2, r1
 8002df4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d009      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e02:	4b82      	ldr	r3, [pc, #520]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e06:	4a86      	ldr	r2, [pc, #536]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e10:	4b7e      	ldr	r3, [pc, #504]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e12:	430a      	orrs	r2, r1
 8002e14:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d009      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e20:	4b7a      	ldr	r3, [pc, #488]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e24:	4a7f      	ldr	r2, [pc, #508]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	0019      	movs	r1, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699a      	ldr	r2, [r3, #24]
 8002e2e:	4b77      	ldr	r3, [pc, #476]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e30:	430a      	orrs	r2, r1
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2240      	movs	r2, #64	; 0x40
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d009      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e3e:	4b73      	ldr	r3, [pc, #460]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e42:	4a79      	ldr	r2, [pc, #484]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	0019      	movs	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69da      	ldr	r2, [r3, #28]
 8002e4c:	4b6f      	ldr	r3, [pc, #444]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	01db      	lsls	r3, r3, #7
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d015      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e5e:	4b6b      	ldr	r3, [pc, #428]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	0899      	lsrs	r1, r3, #2
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e6a:	4b68      	ldr	r3, [pc, #416]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e74:	2380      	movs	r3, #128	; 0x80
 8002e76:	05db      	lsls	r3, r3, #23
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d106      	bne.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e7c:	4b63      	ldr	r3, [pc, #396]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	4b62      	ldr	r3, [pc, #392]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e82:	2180      	movs	r1, #128	; 0x80
 8002e84:	0249      	lsls	r1, r1, #9
 8002e86:	430a      	orrs	r2, r1
 8002e88:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	031b      	lsls	r3, r3, #12
 8002e92:	4013      	ands	r3, r2
 8002e94:	d009      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e96:	4b5d      	ldr	r3, [pc, #372]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9a:	2240      	movs	r2, #64	; 0x40
 8002e9c:	4393      	bics	r3, r2
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ea4:	4b59      	ldr	r3, [pc, #356]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	039b      	lsls	r3, r3, #14
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d016      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002eb6:	4b55      	ldr	r3, [pc, #340]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	4a5c      	ldr	r2, [pc, #368]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	0019      	movs	r1, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ec4:	4b51      	ldr	r3, [pc, #324]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ece:	2380      	movs	r3, #128	; 0x80
 8002ed0:	03db      	lsls	r3, r3, #15
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d106      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002ed6:	4b4d      	ldr	r3, [pc, #308]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	4b4c      	ldr	r3, [pc, #304]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002edc:	2180      	movs	r1, #128	; 0x80
 8002ede:	0449      	lsls	r1, r1, #17
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	03db      	lsls	r3, r3, #15
 8002eec:	4013      	ands	r3, r2
 8002eee:	d016      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002ef0:	4b46      	ldr	r3, [pc, #280]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef4:	4a4e      	ldr	r2, [pc, #312]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	0019      	movs	r1, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002efe:	4b43      	ldr	r3, [pc, #268]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f00:	430a      	orrs	r2, r1
 8002f02:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f08:	2380      	movs	r3, #128	; 0x80
 8002f0a:	045b      	lsls	r3, r3, #17
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d106      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002f10:	4b3e      	ldr	r3, [pc, #248]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	4b3d      	ldr	r3, [pc, #244]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f16:	2180      	movs	r1, #128	; 0x80
 8002f18:	0449      	lsls	r1, r1, #17
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	4013      	ands	r3, r2
 8002f28:	d014      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002f2a:	4b38      	ldr	r3, [pc, #224]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2e:	2203      	movs	r2, #3
 8002f30:	4393      	bics	r3, r2
 8002f32:	0019      	movs	r1, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a1a      	ldr	r2, [r3, #32]
 8002f38:	4b34      	ldr	r3, [pc, #208]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d106      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f46:	4b31      	ldr	r3, [pc, #196]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	4b30      	ldr	r3, [pc, #192]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f4c:	2180      	movs	r1, #128	; 0x80
 8002f4e:	0249      	lsls	r1, r1, #9
 8002f50:	430a      	orrs	r2, r1
 8002f52:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	019b      	lsls	r3, r3, #6
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d014      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002f60:	4b2a      	ldr	r3, [pc, #168]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f64:	220c      	movs	r2, #12
 8002f66:	4393      	bics	r3, r2
 8002f68:	0019      	movs	r1, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f6e:	4b27      	ldr	r3, [pc, #156]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f70:	430a      	orrs	r2, r1
 8002f72:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d106      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f7c:	4b23      	ldr	r3, [pc, #140]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	4b22      	ldr	r3, [pc, #136]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f82:	2180      	movs	r1, #128	; 0x80
 8002f84:	0249      	lsls	r1, r1, #9
 8002f86:	430a      	orrs	r2, r1
 8002f88:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	2380      	movs	r3, #128	; 0x80
 8002f90:	045b      	lsls	r3, r3, #17
 8002f92:	4013      	ands	r3, r2
 8002f94:	d016      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f96:	4b1d      	ldr	r3, [pc, #116]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9a:	4a22      	ldr	r2, [pc, #136]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	0019      	movs	r1, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fa4:	4b19      	ldr	r3, [pc, #100]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fae:	2380      	movs	r3, #128	; 0x80
 8002fb0:	019b      	lsls	r3, r3, #6
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d106      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002fb6:	4b15      	ldr	r3, [pc, #84]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	4b14      	ldr	r3, [pc, #80]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fbc:	2180      	movs	r1, #128	; 0x80
 8002fbe:	0449      	lsls	r1, r1, #17
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	049b      	lsls	r3, r3, #18
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d016      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002fd0:	4b0e      	ldr	r3, [pc, #56]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd4:	4a10      	ldr	r2, [pc, #64]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	0019      	movs	r1, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fde:	4b0b      	ldr	r3, [pc, #44]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fe8:	2380      	movs	r3, #128	; 0x80
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d106      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002ff0:	4b06      	ldr	r3, [pc, #24]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	4b05      	ldr	r3, [pc, #20]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ff6:	2180      	movs	r1, #128	; 0x80
 8002ff8:	0449      	lsls	r1, r1, #17
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002ffe:	2312      	movs	r3, #18
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	781b      	ldrb	r3, [r3, #0]
}
 8003004:	0018      	movs	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	b006      	add	sp, #24
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40021000 	.word	0x40021000
 8003010:	efffffff 	.word	0xefffffff
 8003014:	fffff3ff 	.word	0xfffff3ff
 8003018:	fffffcff 	.word	0xfffffcff
 800301c:	fff3ffff 	.word	0xfff3ffff
 8003020:	ffcfffff 	.word	0xffcfffff
 8003024:	ffffcfff 	.word	0xffffcfff
 8003028:	ffff3fff 	.word	0xffff3fff
 800302c:	ffbfffff 	.word	0xffbfffff
 8003030:	feffffff 	.word	0xfeffffff

08003034 <__libc_init_array>:
 8003034:	b570      	push	{r4, r5, r6, lr}
 8003036:	2600      	movs	r6, #0
 8003038:	4d0c      	ldr	r5, [pc, #48]	; (800306c <__libc_init_array+0x38>)
 800303a:	4c0d      	ldr	r4, [pc, #52]	; (8003070 <__libc_init_array+0x3c>)
 800303c:	1b64      	subs	r4, r4, r5
 800303e:	10a4      	asrs	r4, r4, #2
 8003040:	42a6      	cmp	r6, r4
 8003042:	d109      	bne.n	8003058 <__libc_init_array+0x24>
 8003044:	2600      	movs	r6, #0
 8003046:	f000 f821 	bl	800308c <_init>
 800304a:	4d0a      	ldr	r5, [pc, #40]	; (8003074 <__libc_init_array+0x40>)
 800304c:	4c0a      	ldr	r4, [pc, #40]	; (8003078 <__libc_init_array+0x44>)
 800304e:	1b64      	subs	r4, r4, r5
 8003050:	10a4      	asrs	r4, r4, #2
 8003052:	42a6      	cmp	r6, r4
 8003054:	d105      	bne.n	8003062 <__libc_init_array+0x2e>
 8003056:	bd70      	pop	{r4, r5, r6, pc}
 8003058:	00b3      	lsls	r3, r6, #2
 800305a:	58eb      	ldr	r3, [r5, r3]
 800305c:	4798      	blx	r3
 800305e:	3601      	adds	r6, #1
 8003060:	e7ee      	b.n	8003040 <__libc_init_array+0xc>
 8003062:	00b3      	lsls	r3, r6, #2
 8003064:	58eb      	ldr	r3, [r5, r3]
 8003066:	4798      	blx	r3
 8003068:	3601      	adds	r6, #1
 800306a:	e7f2      	b.n	8003052 <__libc_init_array+0x1e>
 800306c:	080030e4 	.word	0x080030e4
 8003070:	080030e4 	.word	0x080030e4
 8003074:	080030e4 	.word	0x080030e4
 8003078:	080030e8 	.word	0x080030e8

0800307c <memset>:
 800307c:	0003      	movs	r3, r0
 800307e:	1882      	adds	r2, r0, r2
 8003080:	4293      	cmp	r3, r2
 8003082:	d100      	bne.n	8003086 <memset+0xa>
 8003084:	4770      	bx	lr
 8003086:	7019      	strb	r1, [r3, #0]
 8003088:	3301      	adds	r3, #1
 800308a:	e7f9      	b.n	8003080 <memset+0x4>

0800308c <_init>:
 800308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003092:	bc08      	pop	{r3}
 8003094:	469e      	mov	lr, r3
 8003096:	4770      	bx	lr

08003098 <_fini>:
 8003098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800309e:	bc08      	pop	{r3}
 80030a0:	469e      	mov	lr, r3
 80030a2:	4770      	bx	lr
