
Exercicio_8_Lista4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bec  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004ca8  08004ca8  00014ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004da8  08004da8  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08004da8  08004da8  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004da8  08004da8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004da8  08004da8  00014da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dac  08004dac  00014dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000018  08004dc8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08004dc8  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000925c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b62  00000000  00000000  0002929c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0002ae00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e0  00000000  00000000  0002b6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae60  00000000  00000000  0002be98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009935  00000000  00000000  00046cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afab1  00000000  00000000  0005062d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001000de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020a8  00000000  00000000  00100134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000018 	.word	0x20000018
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004c90 	.word	0x08004c90

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000001c 	.word	0x2000001c
 8000100:	08004c90 	.word	0x08004c90

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_cfrcmple>:
 800021c:	4684      	mov	ip, r0
 800021e:	1c08      	adds	r0, r1, #0
 8000220:	4661      	mov	r1, ip
 8000222:	e7ff      	b.n	8000224 <__aeabi_cfcmpeq>

08000224 <__aeabi_cfcmpeq>:
 8000224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000226:	f000 f8c5 	bl	80003b4 <__lesf2>
 800022a:	2800      	cmp	r0, #0
 800022c:	d401      	bmi.n	8000232 <__aeabi_cfcmpeq+0xe>
 800022e:	2100      	movs	r1, #0
 8000230:	42c8      	cmn	r0, r1
 8000232:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000234 <__aeabi_fcmpeq>:
 8000234:	b510      	push	{r4, lr}
 8000236:	f000 f849 	bl	80002cc <__eqsf2>
 800023a:	4240      	negs	r0, r0
 800023c:	3001      	adds	r0, #1
 800023e:	bd10      	pop	{r4, pc}

08000240 <__aeabi_fcmplt>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 f8b7 	bl	80003b4 <__lesf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	db01      	blt.n	800024e <__aeabi_fcmplt+0xe>
 800024a:	2000      	movs	r0, #0
 800024c:	bd10      	pop	{r4, pc}
 800024e:	2001      	movs	r0, #1
 8000250:	bd10      	pop	{r4, pc}
 8000252:	46c0      	nop			; (mov r8, r8)

08000254 <__aeabi_fcmple>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f000 f8ad 	bl	80003b4 <__lesf2>
 800025a:	2800      	cmp	r0, #0
 800025c:	dd01      	ble.n	8000262 <__aeabi_fcmple+0xe>
 800025e:	2000      	movs	r0, #0
 8000260:	bd10      	pop	{r4, pc}
 8000262:	2001      	movs	r0, #1
 8000264:	bd10      	pop	{r4, pc}
 8000266:	46c0      	nop			; (mov r8, r8)

08000268 <__aeabi_fcmpgt>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 f857 	bl	800031c <__gesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	dc01      	bgt.n	8000276 <__aeabi_fcmpgt+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			; (mov r8, r8)

0800027c <__aeabi_fcmpge>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 f84d 	bl	800031c <__gesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	da01      	bge.n	800028a <__aeabi_fcmpge+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <__aeabi_d2uiz>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	2200      	movs	r2, #0
 8000294:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <__aeabi_d2uiz+0x38>)
 8000296:	0004      	movs	r4, r0
 8000298:	000d      	movs	r5, r1
 800029a:	f001 fc35 	bl	8001b08 <__aeabi_dcmpge>
 800029e:	2800      	cmp	r0, #0
 80002a0:	d104      	bne.n	80002ac <__aeabi_d2uiz+0x1c>
 80002a2:	0020      	movs	r0, r4
 80002a4:	0029      	movs	r1, r5
 80002a6:	f001 facf 	bl	8001848 <__aeabi_d2iz>
 80002aa:	bd70      	pop	{r4, r5, r6, pc}
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <__aeabi_d2uiz+0x38>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	0020      	movs	r0, r4
 80002b2:	0029      	movs	r1, r5
 80002b4:	f000 ff36 	bl	8001124 <__aeabi_dsub>
 80002b8:	f001 fac6 	bl	8001848 <__aeabi_d2iz>
 80002bc:	2380      	movs	r3, #128	; 0x80
 80002be:	061b      	lsls	r3, r3, #24
 80002c0:	469c      	mov	ip, r3
 80002c2:	4460      	add	r0, ip
 80002c4:	e7f1      	b.n	80002aa <__aeabi_d2uiz+0x1a>
 80002c6:	46c0      	nop			; (mov r8, r8)
 80002c8:	41e00000 	.word	0x41e00000

080002cc <__eqsf2>:
 80002cc:	b570      	push	{r4, r5, r6, lr}
 80002ce:	0042      	lsls	r2, r0, #1
 80002d0:	024e      	lsls	r6, r1, #9
 80002d2:	004c      	lsls	r4, r1, #1
 80002d4:	0245      	lsls	r5, r0, #9
 80002d6:	0a6d      	lsrs	r5, r5, #9
 80002d8:	0e12      	lsrs	r2, r2, #24
 80002da:	0fc3      	lsrs	r3, r0, #31
 80002dc:	0a76      	lsrs	r6, r6, #9
 80002de:	0e24      	lsrs	r4, r4, #24
 80002e0:	0fc9      	lsrs	r1, r1, #31
 80002e2:	2aff      	cmp	r2, #255	; 0xff
 80002e4:	d00f      	beq.n	8000306 <__eqsf2+0x3a>
 80002e6:	2cff      	cmp	r4, #255	; 0xff
 80002e8:	d011      	beq.n	800030e <__eqsf2+0x42>
 80002ea:	2001      	movs	r0, #1
 80002ec:	42a2      	cmp	r2, r4
 80002ee:	d000      	beq.n	80002f2 <__eqsf2+0x26>
 80002f0:	bd70      	pop	{r4, r5, r6, pc}
 80002f2:	42b5      	cmp	r5, r6
 80002f4:	d1fc      	bne.n	80002f0 <__eqsf2+0x24>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d00d      	beq.n	8000316 <__eqsf2+0x4a>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1f8      	bne.n	80002f0 <__eqsf2+0x24>
 80002fe:	0028      	movs	r0, r5
 8000300:	1e45      	subs	r5, r0, #1
 8000302:	41a8      	sbcs	r0, r5
 8000304:	e7f4      	b.n	80002f0 <__eqsf2+0x24>
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d1f1      	bne.n	80002f0 <__eqsf2+0x24>
 800030c:	e7eb      	b.n	80002e6 <__eqsf2+0x1a>
 800030e:	2001      	movs	r0, #1
 8000310:	2e00      	cmp	r6, #0
 8000312:	d1ed      	bne.n	80002f0 <__eqsf2+0x24>
 8000314:	e7e9      	b.n	80002ea <__eqsf2+0x1e>
 8000316:	2000      	movs	r0, #0
 8000318:	e7ea      	b.n	80002f0 <__eqsf2+0x24>
 800031a:	46c0      	nop			; (mov r8, r8)

0800031c <__gesf2>:
 800031c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800031e:	0042      	lsls	r2, r0, #1
 8000320:	0246      	lsls	r6, r0, #9
 8000322:	024d      	lsls	r5, r1, #9
 8000324:	004c      	lsls	r4, r1, #1
 8000326:	0fc3      	lsrs	r3, r0, #31
 8000328:	0a76      	lsrs	r6, r6, #9
 800032a:	0e12      	lsrs	r2, r2, #24
 800032c:	0a6d      	lsrs	r5, r5, #9
 800032e:	0e24      	lsrs	r4, r4, #24
 8000330:	0fc8      	lsrs	r0, r1, #31
 8000332:	2aff      	cmp	r2, #255	; 0xff
 8000334:	d01f      	beq.n	8000376 <__gesf2+0x5a>
 8000336:	2cff      	cmp	r4, #255	; 0xff
 8000338:	d010      	beq.n	800035c <__gesf2+0x40>
 800033a:	2a00      	cmp	r2, #0
 800033c:	d11f      	bne.n	800037e <__gesf2+0x62>
 800033e:	4271      	negs	r1, r6
 8000340:	4171      	adcs	r1, r6
 8000342:	2c00      	cmp	r4, #0
 8000344:	d101      	bne.n	800034a <__gesf2+0x2e>
 8000346:	2d00      	cmp	r5, #0
 8000348:	d01e      	beq.n	8000388 <__gesf2+0x6c>
 800034a:	2900      	cmp	r1, #0
 800034c:	d10e      	bne.n	800036c <__gesf2+0x50>
 800034e:	4283      	cmp	r3, r0
 8000350:	d01e      	beq.n	8000390 <__gesf2+0x74>
 8000352:	2102      	movs	r1, #2
 8000354:	1e58      	subs	r0, r3, #1
 8000356:	4008      	ands	r0, r1
 8000358:	3801      	subs	r0, #1
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	2d00      	cmp	r5, #0
 800035e:	d126      	bne.n	80003ae <__gesf2+0x92>
 8000360:	2a00      	cmp	r2, #0
 8000362:	d1f4      	bne.n	800034e <__gesf2+0x32>
 8000364:	4271      	negs	r1, r6
 8000366:	4171      	adcs	r1, r6
 8000368:	2900      	cmp	r1, #0
 800036a:	d0f0      	beq.n	800034e <__gesf2+0x32>
 800036c:	2800      	cmp	r0, #0
 800036e:	d1f4      	bne.n	800035a <__gesf2+0x3e>
 8000370:	2001      	movs	r0, #1
 8000372:	4240      	negs	r0, r0
 8000374:	e7f1      	b.n	800035a <__gesf2+0x3e>
 8000376:	2e00      	cmp	r6, #0
 8000378:	d119      	bne.n	80003ae <__gesf2+0x92>
 800037a:	2cff      	cmp	r4, #255	; 0xff
 800037c:	d0ee      	beq.n	800035c <__gesf2+0x40>
 800037e:	2c00      	cmp	r4, #0
 8000380:	d1e5      	bne.n	800034e <__gesf2+0x32>
 8000382:	2d00      	cmp	r5, #0
 8000384:	d1e3      	bne.n	800034e <__gesf2+0x32>
 8000386:	e7e4      	b.n	8000352 <__gesf2+0x36>
 8000388:	2000      	movs	r0, #0
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e5      	beq.n	800035a <__gesf2+0x3e>
 800038e:	e7e0      	b.n	8000352 <__gesf2+0x36>
 8000390:	42a2      	cmp	r2, r4
 8000392:	dc05      	bgt.n	80003a0 <__gesf2+0x84>
 8000394:	dbea      	blt.n	800036c <__gesf2+0x50>
 8000396:	42ae      	cmp	r6, r5
 8000398:	d802      	bhi.n	80003a0 <__gesf2+0x84>
 800039a:	d3e7      	bcc.n	800036c <__gesf2+0x50>
 800039c:	2000      	movs	r0, #0
 800039e:	e7dc      	b.n	800035a <__gesf2+0x3e>
 80003a0:	4241      	negs	r1, r0
 80003a2:	4141      	adcs	r1, r0
 80003a4:	4248      	negs	r0, r1
 80003a6:	2102      	movs	r1, #2
 80003a8:	4008      	ands	r0, r1
 80003aa:	3801      	subs	r0, #1
 80003ac:	e7d5      	b.n	800035a <__gesf2+0x3e>
 80003ae:	2002      	movs	r0, #2
 80003b0:	4240      	negs	r0, r0
 80003b2:	e7d2      	b.n	800035a <__gesf2+0x3e>

080003b4 <__lesf2>:
 80003b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003b6:	0042      	lsls	r2, r0, #1
 80003b8:	0246      	lsls	r6, r0, #9
 80003ba:	024d      	lsls	r5, r1, #9
 80003bc:	004c      	lsls	r4, r1, #1
 80003be:	0fc3      	lsrs	r3, r0, #31
 80003c0:	0a76      	lsrs	r6, r6, #9
 80003c2:	0e12      	lsrs	r2, r2, #24
 80003c4:	0a6d      	lsrs	r5, r5, #9
 80003c6:	0e24      	lsrs	r4, r4, #24
 80003c8:	0fc8      	lsrs	r0, r1, #31
 80003ca:	2aff      	cmp	r2, #255	; 0xff
 80003cc:	d00d      	beq.n	80003ea <__lesf2+0x36>
 80003ce:	2cff      	cmp	r4, #255	; 0xff
 80003d0:	d00f      	beq.n	80003f2 <__lesf2+0x3e>
 80003d2:	2a00      	cmp	r2, #0
 80003d4:	d123      	bne.n	800041e <__lesf2+0x6a>
 80003d6:	4271      	negs	r1, r6
 80003d8:	4171      	adcs	r1, r6
 80003da:	2c00      	cmp	r4, #0
 80003dc:	d10f      	bne.n	80003fe <__lesf2+0x4a>
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d10d      	bne.n	80003fe <__lesf2+0x4a>
 80003e2:	2000      	movs	r0, #0
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d014      	beq.n	8000412 <__lesf2+0x5e>
 80003e8:	e00d      	b.n	8000406 <__lesf2+0x52>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d110      	bne.n	8000410 <__lesf2+0x5c>
 80003ee:	2cff      	cmp	r4, #255	; 0xff
 80003f0:	d115      	bne.n	800041e <__lesf2+0x6a>
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d10c      	bne.n	8000410 <__lesf2+0x5c>
 80003f6:	2a00      	cmp	r2, #0
 80003f8:	d103      	bne.n	8000402 <__lesf2+0x4e>
 80003fa:	4271      	negs	r1, r6
 80003fc:	4171      	adcs	r1, r6
 80003fe:	2900      	cmp	r1, #0
 8000400:	d108      	bne.n	8000414 <__lesf2+0x60>
 8000402:	4283      	cmp	r3, r0
 8000404:	d010      	beq.n	8000428 <__lesf2+0x74>
 8000406:	2102      	movs	r1, #2
 8000408:	1e58      	subs	r0, r3, #1
 800040a:	4008      	ands	r0, r1
 800040c:	3801      	subs	r0, #1
 800040e:	e000      	b.n	8000412 <__lesf2+0x5e>
 8000410:	2002      	movs	r0, #2
 8000412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000414:	2800      	cmp	r0, #0
 8000416:	d1fc      	bne.n	8000412 <__lesf2+0x5e>
 8000418:	2001      	movs	r0, #1
 800041a:	4240      	negs	r0, r0
 800041c:	e7f9      	b.n	8000412 <__lesf2+0x5e>
 800041e:	2c00      	cmp	r4, #0
 8000420:	d1ef      	bne.n	8000402 <__lesf2+0x4e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	d1ed      	bne.n	8000402 <__lesf2+0x4e>
 8000426:	e7ee      	b.n	8000406 <__lesf2+0x52>
 8000428:	42a2      	cmp	r2, r4
 800042a:	dc05      	bgt.n	8000438 <__lesf2+0x84>
 800042c:	dbf2      	blt.n	8000414 <__lesf2+0x60>
 800042e:	42ae      	cmp	r6, r5
 8000430:	d802      	bhi.n	8000438 <__lesf2+0x84>
 8000432:	d3ef      	bcc.n	8000414 <__lesf2+0x60>
 8000434:	2000      	movs	r0, #0
 8000436:	e7ec      	b.n	8000412 <__lesf2+0x5e>
 8000438:	4241      	negs	r1, r0
 800043a:	4141      	adcs	r1, r0
 800043c:	4248      	negs	r0, r1
 800043e:	2102      	movs	r1, #2
 8000440:	4008      	ands	r0, r1
 8000442:	3801      	subs	r0, #1
 8000444:	e7e5      	b.n	8000412 <__lesf2+0x5e>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_fmul>:
 8000448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044a:	4657      	mov	r7, sl
 800044c:	464e      	mov	r6, r9
 800044e:	4645      	mov	r5, r8
 8000450:	46de      	mov	lr, fp
 8000452:	0244      	lsls	r4, r0, #9
 8000454:	b5e0      	push	{r5, r6, r7, lr}
 8000456:	0045      	lsls	r5, r0, #1
 8000458:	1c0f      	adds	r7, r1, #0
 800045a:	0a64      	lsrs	r4, r4, #9
 800045c:	0e2d      	lsrs	r5, r5, #24
 800045e:	0fc6      	lsrs	r6, r0, #31
 8000460:	2d00      	cmp	r5, #0
 8000462:	d047      	beq.n	80004f4 <__aeabi_fmul+0xac>
 8000464:	2dff      	cmp	r5, #255	; 0xff
 8000466:	d04d      	beq.n	8000504 <__aeabi_fmul+0xbc>
 8000468:	2300      	movs	r3, #0
 800046a:	2080      	movs	r0, #128	; 0x80
 800046c:	469a      	mov	sl, r3
 800046e:	469b      	mov	fp, r3
 8000470:	00e4      	lsls	r4, r4, #3
 8000472:	04c0      	lsls	r0, r0, #19
 8000474:	4304      	orrs	r4, r0
 8000476:	3d7f      	subs	r5, #127	; 0x7f
 8000478:	0278      	lsls	r0, r7, #9
 800047a:	0a43      	lsrs	r3, r0, #9
 800047c:	4699      	mov	r9, r3
 800047e:	007a      	lsls	r2, r7, #1
 8000480:	0ffb      	lsrs	r3, r7, #31
 8000482:	4698      	mov	r8, r3
 8000484:	0e12      	lsrs	r2, r2, #24
 8000486:	464b      	mov	r3, r9
 8000488:	d044      	beq.n	8000514 <__aeabi_fmul+0xcc>
 800048a:	2aff      	cmp	r2, #255	; 0xff
 800048c:	d011      	beq.n	80004b2 <__aeabi_fmul+0x6a>
 800048e:	00d8      	lsls	r0, r3, #3
 8000490:	2380      	movs	r3, #128	; 0x80
 8000492:	04db      	lsls	r3, r3, #19
 8000494:	4303      	orrs	r3, r0
 8000496:	4699      	mov	r9, r3
 8000498:	2000      	movs	r0, #0
 800049a:	3a7f      	subs	r2, #127	; 0x7f
 800049c:	18ad      	adds	r5, r5, r2
 800049e:	4647      	mov	r7, r8
 80004a0:	4653      	mov	r3, sl
 80004a2:	4077      	eors	r7, r6
 80004a4:	1c69      	adds	r1, r5, #1
 80004a6:	2b0f      	cmp	r3, #15
 80004a8:	d83f      	bhi.n	800052a <__aeabi_fmul+0xe2>
 80004aa:	4a72      	ldr	r2, [pc, #456]	; (8000674 <__aeabi_fmul+0x22c>)
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	58d3      	ldr	r3, [r2, r3]
 80004b0:	469f      	mov	pc, r3
 80004b2:	35ff      	adds	r5, #255	; 0xff
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d000      	beq.n	80004ba <__aeabi_fmul+0x72>
 80004b8:	e079      	b.n	80005ae <__aeabi_fmul+0x166>
 80004ba:	4652      	mov	r2, sl
 80004bc:	2302      	movs	r3, #2
 80004be:	431a      	orrs	r2, r3
 80004c0:	4692      	mov	sl, r2
 80004c2:	2002      	movs	r0, #2
 80004c4:	e7eb      	b.n	800049e <__aeabi_fmul+0x56>
 80004c6:	4647      	mov	r7, r8
 80004c8:	464c      	mov	r4, r9
 80004ca:	4683      	mov	fp, r0
 80004cc:	465b      	mov	r3, fp
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	d028      	beq.n	8000524 <__aeabi_fmul+0xdc>
 80004d2:	2b03      	cmp	r3, #3
 80004d4:	d100      	bne.n	80004d8 <__aeabi_fmul+0x90>
 80004d6:	e0c6      	b.n	8000666 <__aeabi_fmul+0x21e>
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d14f      	bne.n	800057c <__aeabi_fmul+0x134>
 80004dc:	2000      	movs	r0, #0
 80004de:	2400      	movs	r4, #0
 80004e0:	05c0      	lsls	r0, r0, #23
 80004e2:	07ff      	lsls	r7, r7, #31
 80004e4:	4320      	orrs	r0, r4
 80004e6:	4338      	orrs	r0, r7
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004f4:	2c00      	cmp	r4, #0
 80004f6:	d171      	bne.n	80005dc <__aeabi_fmul+0x194>
 80004f8:	2304      	movs	r3, #4
 80004fa:	469a      	mov	sl, r3
 80004fc:	3b03      	subs	r3, #3
 80004fe:	2500      	movs	r5, #0
 8000500:	469b      	mov	fp, r3
 8000502:	e7b9      	b.n	8000478 <__aeabi_fmul+0x30>
 8000504:	2c00      	cmp	r4, #0
 8000506:	d163      	bne.n	80005d0 <__aeabi_fmul+0x188>
 8000508:	2308      	movs	r3, #8
 800050a:	469a      	mov	sl, r3
 800050c:	3b06      	subs	r3, #6
 800050e:	25ff      	movs	r5, #255	; 0xff
 8000510:	469b      	mov	fp, r3
 8000512:	e7b1      	b.n	8000478 <__aeabi_fmul+0x30>
 8000514:	2b00      	cmp	r3, #0
 8000516:	d150      	bne.n	80005ba <__aeabi_fmul+0x172>
 8000518:	4652      	mov	r2, sl
 800051a:	3301      	adds	r3, #1
 800051c:	431a      	orrs	r2, r3
 800051e:	4692      	mov	sl, r2
 8000520:	2001      	movs	r0, #1
 8000522:	e7bc      	b.n	800049e <__aeabi_fmul+0x56>
 8000524:	20ff      	movs	r0, #255	; 0xff
 8000526:	2400      	movs	r4, #0
 8000528:	e7da      	b.n	80004e0 <__aeabi_fmul+0x98>
 800052a:	4648      	mov	r0, r9
 800052c:	0c26      	lsrs	r6, r4, #16
 800052e:	0424      	lsls	r4, r4, #16
 8000530:	0c22      	lsrs	r2, r4, #16
 8000532:	0404      	lsls	r4, r0, #16
 8000534:	0c24      	lsrs	r4, r4, #16
 8000536:	464b      	mov	r3, r9
 8000538:	0020      	movs	r0, r4
 800053a:	0c1b      	lsrs	r3, r3, #16
 800053c:	4350      	muls	r0, r2
 800053e:	4374      	muls	r4, r6
 8000540:	435a      	muls	r2, r3
 8000542:	435e      	muls	r6, r3
 8000544:	1912      	adds	r2, r2, r4
 8000546:	0c03      	lsrs	r3, r0, #16
 8000548:	189b      	adds	r3, r3, r2
 800054a:	429c      	cmp	r4, r3
 800054c:	d903      	bls.n	8000556 <__aeabi_fmul+0x10e>
 800054e:	2280      	movs	r2, #128	; 0x80
 8000550:	0252      	lsls	r2, r2, #9
 8000552:	4694      	mov	ip, r2
 8000554:	4466      	add	r6, ip
 8000556:	0400      	lsls	r0, r0, #16
 8000558:	041a      	lsls	r2, r3, #16
 800055a:	0c00      	lsrs	r0, r0, #16
 800055c:	1812      	adds	r2, r2, r0
 800055e:	0194      	lsls	r4, r2, #6
 8000560:	1e60      	subs	r0, r4, #1
 8000562:	4184      	sbcs	r4, r0
 8000564:	0c1b      	lsrs	r3, r3, #16
 8000566:	0e92      	lsrs	r2, r2, #26
 8000568:	199b      	adds	r3, r3, r6
 800056a:	4314      	orrs	r4, r2
 800056c:	019b      	lsls	r3, r3, #6
 800056e:	431c      	orrs	r4, r3
 8000570:	011b      	lsls	r3, r3, #4
 8000572:	d572      	bpl.n	800065a <__aeabi_fmul+0x212>
 8000574:	2001      	movs	r0, #1
 8000576:	0863      	lsrs	r3, r4, #1
 8000578:	4004      	ands	r4, r0
 800057a:	431c      	orrs	r4, r3
 800057c:	0008      	movs	r0, r1
 800057e:	307f      	adds	r0, #127	; 0x7f
 8000580:	2800      	cmp	r0, #0
 8000582:	dd3c      	ble.n	80005fe <__aeabi_fmul+0x1b6>
 8000584:	0763      	lsls	r3, r4, #29
 8000586:	d004      	beq.n	8000592 <__aeabi_fmul+0x14a>
 8000588:	230f      	movs	r3, #15
 800058a:	4023      	ands	r3, r4
 800058c:	2b04      	cmp	r3, #4
 800058e:	d000      	beq.n	8000592 <__aeabi_fmul+0x14a>
 8000590:	3404      	adds	r4, #4
 8000592:	0123      	lsls	r3, r4, #4
 8000594:	d503      	bpl.n	800059e <__aeabi_fmul+0x156>
 8000596:	3180      	adds	r1, #128	; 0x80
 8000598:	0008      	movs	r0, r1
 800059a:	4b37      	ldr	r3, [pc, #220]	; (8000678 <__aeabi_fmul+0x230>)
 800059c:	401c      	ands	r4, r3
 800059e:	28fe      	cmp	r0, #254	; 0xfe
 80005a0:	dcc0      	bgt.n	8000524 <__aeabi_fmul+0xdc>
 80005a2:	01a4      	lsls	r4, r4, #6
 80005a4:	0a64      	lsrs	r4, r4, #9
 80005a6:	b2c0      	uxtb	r0, r0
 80005a8:	e79a      	b.n	80004e0 <__aeabi_fmul+0x98>
 80005aa:	0037      	movs	r7, r6
 80005ac:	e78e      	b.n	80004cc <__aeabi_fmul+0x84>
 80005ae:	4652      	mov	r2, sl
 80005b0:	2303      	movs	r3, #3
 80005b2:	431a      	orrs	r2, r3
 80005b4:	4692      	mov	sl, r2
 80005b6:	2003      	movs	r0, #3
 80005b8:	e771      	b.n	800049e <__aeabi_fmul+0x56>
 80005ba:	4648      	mov	r0, r9
 80005bc:	f001 faae 	bl	8001b1c <__clzsi2>
 80005c0:	464a      	mov	r2, r9
 80005c2:	1f43      	subs	r3, r0, #5
 80005c4:	409a      	lsls	r2, r3
 80005c6:	1a2d      	subs	r5, r5, r0
 80005c8:	4691      	mov	r9, r2
 80005ca:	2000      	movs	r0, #0
 80005cc:	3d76      	subs	r5, #118	; 0x76
 80005ce:	e766      	b.n	800049e <__aeabi_fmul+0x56>
 80005d0:	230c      	movs	r3, #12
 80005d2:	469a      	mov	sl, r3
 80005d4:	3b09      	subs	r3, #9
 80005d6:	25ff      	movs	r5, #255	; 0xff
 80005d8:	469b      	mov	fp, r3
 80005da:	e74d      	b.n	8000478 <__aeabi_fmul+0x30>
 80005dc:	0020      	movs	r0, r4
 80005de:	f001 fa9d 	bl	8001b1c <__clzsi2>
 80005e2:	2576      	movs	r5, #118	; 0x76
 80005e4:	1f43      	subs	r3, r0, #5
 80005e6:	409c      	lsls	r4, r3
 80005e8:	2300      	movs	r3, #0
 80005ea:	426d      	negs	r5, r5
 80005ec:	469a      	mov	sl, r3
 80005ee:	469b      	mov	fp, r3
 80005f0:	1a2d      	subs	r5, r5, r0
 80005f2:	e741      	b.n	8000478 <__aeabi_fmul+0x30>
 80005f4:	2480      	movs	r4, #128	; 0x80
 80005f6:	2700      	movs	r7, #0
 80005f8:	20ff      	movs	r0, #255	; 0xff
 80005fa:	03e4      	lsls	r4, r4, #15
 80005fc:	e770      	b.n	80004e0 <__aeabi_fmul+0x98>
 80005fe:	2301      	movs	r3, #1
 8000600:	1a1b      	subs	r3, r3, r0
 8000602:	2b1b      	cmp	r3, #27
 8000604:	dd00      	ble.n	8000608 <__aeabi_fmul+0x1c0>
 8000606:	e769      	b.n	80004dc <__aeabi_fmul+0x94>
 8000608:	319e      	adds	r1, #158	; 0x9e
 800060a:	0020      	movs	r0, r4
 800060c:	408c      	lsls	r4, r1
 800060e:	40d8      	lsrs	r0, r3
 8000610:	1e63      	subs	r3, r4, #1
 8000612:	419c      	sbcs	r4, r3
 8000614:	4304      	orrs	r4, r0
 8000616:	0763      	lsls	r3, r4, #29
 8000618:	d004      	beq.n	8000624 <__aeabi_fmul+0x1dc>
 800061a:	230f      	movs	r3, #15
 800061c:	4023      	ands	r3, r4
 800061e:	2b04      	cmp	r3, #4
 8000620:	d000      	beq.n	8000624 <__aeabi_fmul+0x1dc>
 8000622:	3404      	adds	r4, #4
 8000624:	0163      	lsls	r3, r4, #5
 8000626:	d51a      	bpl.n	800065e <__aeabi_fmul+0x216>
 8000628:	2001      	movs	r0, #1
 800062a:	2400      	movs	r4, #0
 800062c:	e758      	b.n	80004e0 <__aeabi_fmul+0x98>
 800062e:	2080      	movs	r0, #128	; 0x80
 8000630:	03c0      	lsls	r0, r0, #15
 8000632:	4204      	tst	r4, r0
 8000634:	d009      	beq.n	800064a <__aeabi_fmul+0x202>
 8000636:	464b      	mov	r3, r9
 8000638:	4203      	tst	r3, r0
 800063a:	d106      	bne.n	800064a <__aeabi_fmul+0x202>
 800063c:	464c      	mov	r4, r9
 800063e:	4304      	orrs	r4, r0
 8000640:	0264      	lsls	r4, r4, #9
 8000642:	4647      	mov	r7, r8
 8000644:	20ff      	movs	r0, #255	; 0xff
 8000646:	0a64      	lsrs	r4, r4, #9
 8000648:	e74a      	b.n	80004e0 <__aeabi_fmul+0x98>
 800064a:	2080      	movs	r0, #128	; 0x80
 800064c:	03c0      	lsls	r0, r0, #15
 800064e:	4304      	orrs	r4, r0
 8000650:	0264      	lsls	r4, r4, #9
 8000652:	0037      	movs	r7, r6
 8000654:	20ff      	movs	r0, #255	; 0xff
 8000656:	0a64      	lsrs	r4, r4, #9
 8000658:	e742      	b.n	80004e0 <__aeabi_fmul+0x98>
 800065a:	0029      	movs	r1, r5
 800065c:	e78e      	b.n	800057c <__aeabi_fmul+0x134>
 800065e:	01a4      	lsls	r4, r4, #6
 8000660:	2000      	movs	r0, #0
 8000662:	0a64      	lsrs	r4, r4, #9
 8000664:	e73c      	b.n	80004e0 <__aeabi_fmul+0x98>
 8000666:	2080      	movs	r0, #128	; 0x80
 8000668:	03c0      	lsls	r0, r0, #15
 800066a:	4304      	orrs	r4, r0
 800066c:	0264      	lsls	r4, r4, #9
 800066e:	20ff      	movs	r0, #255	; 0xff
 8000670:	0a64      	lsrs	r4, r4, #9
 8000672:	e735      	b.n	80004e0 <__aeabi_fmul+0x98>
 8000674:	08004ca8 	.word	0x08004ca8
 8000678:	f7ffffff 	.word	0xf7ffffff

0800067c <__aeabi_ddiv>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	4657      	mov	r7, sl
 8000680:	464e      	mov	r6, r9
 8000682:	4645      	mov	r5, r8
 8000684:	46de      	mov	lr, fp
 8000686:	b5e0      	push	{r5, r6, r7, lr}
 8000688:	4681      	mov	r9, r0
 800068a:	0005      	movs	r5, r0
 800068c:	030c      	lsls	r4, r1, #12
 800068e:	0048      	lsls	r0, r1, #1
 8000690:	4692      	mov	sl, r2
 8000692:	001f      	movs	r7, r3
 8000694:	b085      	sub	sp, #20
 8000696:	0b24      	lsrs	r4, r4, #12
 8000698:	0d40      	lsrs	r0, r0, #21
 800069a:	0fce      	lsrs	r6, r1, #31
 800069c:	2800      	cmp	r0, #0
 800069e:	d059      	beq.n	8000754 <__aeabi_ddiv+0xd8>
 80006a0:	4b87      	ldr	r3, [pc, #540]	; (80008c0 <__aeabi_ddiv+0x244>)
 80006a2:	4298      	cmp	r0, r3
 80006a4:	d100      	bne.n	80006a8 <__aeabi_ddiv+0x2c>
 80006a6:	e098      	b.n	80007da <__aeabi_ddiv+0x15e>
 80006a8:	0f6b      	lsrs	r3, r5, #29
 80006aa:	00e4      	lsls	r4, r4, #3
 80006ac:	431c      	orrs	r4, r3
 80006ae:	2380      	movs	r3, #128	; 0x80
 80006b0:	041b      	lsls	r3, r3, #16
 80006b2:	4323      	orrs	r3, r4
 80006b4:	4698      	mov	r8, r3
 80006b6:	4b83      	ldr	r3, [pc, #524]	; (80008c4 <__aeabi_ddiv+0x248>)
 80006b8:	00ed      	lsls	r5, r5, #3
 80006ba:	469b      	mov	fp, r3
 80006bc:	2300      	movs	r3, #0
 80006be:	4699      	mov	r9, r3
 80006c0:	4483      	add	fp, r0
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	033c      	lsls	r4, r7, #12
 80006c6:	007b      	lsls	r3, r7, #1
 80006c8:	4650      	mov	r0, sl
 80006ca:	0b24      	lsrs	r4, r4, #12
 80006cc:	0d5b      	lsrs	r3, r3, #21
 80006ce:	0fff      	lsrs	r7, r7, #31
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d067      	beq.n	80007a4 <__aeabi_ddiv+0x128>
 80006d4:	4a7a      	ldr	r2, [pc, #488]	; (80008c0 <__aeabi_ddiv+0x244>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d018      	beq.n	800070c <__aeabi_ddiv+0x90>
 80006da:	497a      	ldr	r1, [pc, #488]	; (80008c4 <__aeabi_ddiv+0x248>)
 80006dc:	0f42      	lsrs	r2, r0, #29
 80006de:	468c      	mov	ip, r1
 80006e0:	00e4      	lsls	r4, r4, #3
 80006e2:	4659      	mov	r1, fp
 80006e4:	4314      	orrs	r4, r2
 80006e6:	2280      	movs	r2, #128	; 0x80
 80006e8:	4463      	add	r3, ip
 80006ea:	0412      	lsls	r2, r2, #16
 80006ec:	1acb      	subs	r3, r1, r3
 80006ee:	4314      	orrs	r4, r2
 80006f0:	469b      	mov	fp, r3
 80006f2:	00c2      	lsls	r2, r0, #3
 80006f4:	2000      	movs	r0, #0
 80006f6:	0033      	movs	r3, r6
 80006f8:	407b      	eors	r3, r7
 80006fa:	469a      	mov	sl, r3
 80006fc:	464b      	mov	r3, r9
 80006fe:	2b0f      	cmp	r3, #15
 8000700:	d900      	bls.n	8000704 <__aeabi_ddiv+0x88>
 8000702:	e0ef      	b.n	80008e4 <__aeabi_ddiv+0x268>
 8000704:	4970      	ldr	r1, [pc, #448]	; (80008c8 <__aeabi_ddiv+0x24c>)
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	58cb      	ldr	r3, [r1, r3]
 800070a:	469f      	mov	pc, r3
 800070c:	4b6f      	ldr	r3, [pc, #444]	; (80008cc <__aeabi_ddiv+0x250>)
 800070e:	4652      	mov	r2, sl
 8000710:	469c      	mov	ip, r3
 8000712:	4322      	orrs	r2, r4
 8000714:	44e3      	add	fp, ip
 8000716:	2a00      	cmp	r2, #0
 8000718:	d000      	beq.n	800071c <__aeabi_ddiv+0xa0>
 800071a:	e095      	b.n	8000848 <__aeabi_ddiv+0x1cc>
 800071c:	4649      	mov	r1, r9
 800071e:	2302      	movs	r3, #2
 8000720:	4319      	orrs	r1, r3
 8000722:	4689      	mov	r9, r1
 8000724:	2400      	movs	r4, #0
 8000726:	2002      	movs	r0, #2
 8000728:	e7e5      	b.n	80006f6 <__aeabi_ddiv+0x7a>
 800072a:	2300      	movs	r3, #0
 800072c:	2400      	movs	r4, #0
 800072e:	2500      	movs	r5, #0
 8000730:	4652      	mov	r2, sl
 8000732:	051b      	lsls	r3, r3, #20
 8000734:	4323      	orrs	r3, r4
 8000736:	07d2      	lsls	r2, r2, #31
 8000738:	4313      	orrs	r3, r2
 800073a:	0028      	movs	r0, r5
 800073c:	0019      	movs	r1, r3
 800073e:	b005      	add	sp, #20
 8000740:	bcf0      	pop	{r4, r5, r6, r7}
 8000742:	46bb      	mov	fp, r7
 8000744:	46b2      	mov	sl, r6
 8000746:	46a9      	mov	r9, r5
 8000748:	46a0      	mov	r8, r4
 800074a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800074c:	2400      	movs	r4, #0
 800074e:	2500      	movs	r5, #0
 8000750:	4b5b      	ldr	r3, [pc, #364]	; (80008c0 <__aeabi_ddiv+0x244>)
 8000752:	e7ed      	b.n	8000730 <__aeabi_ddiv+0xb4>
 8000754:	464b      	mov	r3, r9
 8000756:	4323      	orrs	r3, r4
 8000758:	4698      	mov	r8, r3
 800075a:	d100      	bne.n	800075e <__aeabi_ddiv+0xe2>
 800075c:	e089      	b.n	8000872 <__aeabi_ddiv+0x1f6>
 800075e:	2c00      	cmp	r4, #0
 8000760:	d100      	bne.n	8000764 <__aeabi_ddiv+0xe8>
 8000762:	e1e0      	b.n	8000b26 <__aeabi_ddiv+0x4aa>
 8000764:	0020      	movs	r0, r4
 8000766:	f001 f9d9 	bl	8001b1c <__clzsi2>
 800076a:	0001      	movs	r1, r0
 800076c:	0002      	movs	r2, r0
 800076e:	390b      	subs	r1, #11
 8000770:	231d      	movs	r3, #29
 8000772:	1a5b      	subs	r3, r3, r1
 8000774:	4649      	mov	r1, r9
 8000776:	0010      	movs	r0, r2
 8000778:	40d9      	lsrs	r1, r3
 800077a:	3808      	subs	r0, #8
 800077c:	4084      	lsls	r4, r0
 800077e:	000b      	movs	r3, r1
 8000780:	464d      	mov	r5, r9
 8000782:	4323      	orrs	r3, r4
 8000784:	4698      	mov	r8, r3
 8000786:	4085      	lsls	r5, r0
 8000788:	4851      	ldr	r0, [pc, #324]	; (80008d0 <__aeabi_ddiv+0x254>)
 800078a:	033c      	lsls	r4, r7, #12
 800078c:	1a83      	subs	r3, r0, r2
 800078e:	469b      	mov	fp, r3
 8000790:	2300      	movs	r3, #0
 8000792:	4699      	mov	r9, r3
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	007b      	lsls	r3, r7, #1
 8000798:	4650      	mov	r0, sl
 800079a:	0b24      	lsrs	r4, r4, #12
 800079c:	0d5b      	lsrs	r3, r3, #21
 800079e:	0fff      	lsrs	r7, r7, #31
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d197      	bne.n	80006d4 <__aeabi_ddiv+0x58>
 80007a4:	4652      	mov	r2, sl
 80007a6:	4322      	orrs	r2, r4
 80007a8:	d055      	beq.n	8000856 <__aeabi_ddiv+0x1da>
 80007aa:	2c00      	cmp	r4, #0
 80007ac:	d100      	bne.n	80007b0 <__aeabi_ddiv+0x134>
 80007ae:	e1ca      	b.n	8000b46 <__aeabi_ddiv+0x4ca>
 80007b0:	0020      	movs	r0, r4
 80007b2:	f001 f9b3 	bl	8001b1c <__clzsi2>
 80007b6:	0002      	movs	r2, r0
 80007b8:	3a0b      	subs	r2, #11
 80007ba:	231d      	movs	r3, #29
 80007bc:	0001      	movs	r1, r0
 80007be:	1a9b      	subs	r3, r3, r2
 80007c0:	4652      	mov	r2, sl
 80007c2:	3908      	subs	r1, #8
 80007c4:	40da      	lsrs	r2, r3
 80007c6:	408c      	lsls	r4, r1
 80007c8:	4314      	orrs	r4, r2
 80007ca:	4652      	mov	r2, sl
 80007cc:	408a      	lsls	r2, r1
 80007ce:	4b41      	ldr	r3, [pc, #260]	; (80008d4 <__aeabi_ddiv+0x258>)
 80007d0:	4458      	add	r0, fp
 80007d2:	469b      	mov	fp, r3
 80007d4:	4483      	add	fp, r0
 80007d6:	2000      	movs	r0, #0
 80007d8:	e78d      	b.n	80006f6 <__aeabi_ddiv+0x7a>
 80007da:	464b      	mov	r3, r9
 80007dc:	4323      	orrs	r3, r4
 80007de:	4698      	mov	r8, r3
 80007e0:	d140      	bne.n	8000864 <__aeabi_ddiv+0x1e8>
 80007e2:	2308      	movs	r3, #8
 80007e4:	4699      	mov	r9, r3
 80007e6:	3b06      	subs	r3, #6
 80007e8:	2500      	movs	r5, #0
 80007ea:	4683      	mov	fp, r0
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	e769      	b.n	80006c4 <__aeabi_ddiv+0x48>
 80007f0:	46b2      	mov	sl, r6
 80007f2:	9b00      	ldr	r3, [sp, #0]
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	d0a9      	beq.n	800074c <__aeabi_ddiv+0xd0>
 80007f8:	2b03      	cmp	r3, #3
 80007fa:	d100      	bne.n	80007fe <__aeabi_ddiv+0x182>
 80007fc:	e211      	b.n	8000c22 <__aeabi_ddiv+0x5a6>
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d093      	beq.n	800072a <__aeabi_ddiv+0xae>
 8000802:	4a35      	ldr	r2, [pc, #212]	; (80008d8 <__aeabi_ddiv+0x25c>)
 8000804:	445a      	add	r2, fp
 8000806:	2a00      	cmp	r2, #0
 8000808:	dc00      	bgt.n	800080c <__aeabi_ddiv+0x190>
 800080a:	e13c      	b.n	8000a86 <__aeabi_ddiv+0x40a>
 800080c:	076b      	lsls	r3, r5, #29
 800080e:	d000      	beq.n	8000812 <__aeabi_ddiv+0x196>
 8000810:	e1a7      	b.n	8000b62 <__aeabi_ddiv+0x4e6>
 8000812:	08ed      	lsrs	r5, r5, #3
 8000814:	4643      	mov	r3, r8
 8000816:	01db      	lsls	r3, r3, #7
 8000818:	d506      	bpl.n	8000828 <__aeabi_ddiv+0x1ac>
 800081a:	4642      	mov	r2, r8
 800081c:	4b2f      	ldr	r3, [pc, #188]	; (80008dc <__aeabi_ddiv+0x260>)
 800081e:	401a      	ands	r2, r3
 8000820:	4690      	mov	r8, r2
 8000822:	2280      	movs	r2, #128	; 0x80
 8000824:	00d2      	lsls	r2, r2, #3
 8000826:	445a      	add	r2, fp
 8000828:	4b2d      	ldr	r3, [pc, #180]	; (80008e0 <__aeabi_ddiv+0x264>)
 800082a:	429a      	cmp	r2, r3
 800082c:	dc8e      	bgt.n	800074c <__aeabi_ddiv+0xd0>
 800082e:	4643      	mov	r3, r8
 8000830:	0552      	lsls	r2, r2, #21
 8000832:	0758      	lsls	r0, r3, #29
 8000834:	025c      	lsls	r4, r3, #9
 8000836:	4305      	orrs	r5, r0
 8000838:	0b24      	lsrs	r4, r4, #12
 800083a:	0d53      	lsrs	r3, r2, #21
 800083c:	e778      	b.n	8000730 <__aeabi_ddiv+0xb4>
 800083e:	46ba      	mov	sl, r7
 8000840:	46a0      	mov	r8, r4
 8000842:	0015      	movs	r5, r2
 8000844:	9000      	str	r0, [sp, #0]
 8000846:	e7d4      	b.n	80007f2 <__aeabi_ddiv+0x176>
 8000848:	464a      	mov	r2, r9
 800084a:	2303      	movs	r3, #3
 800084c:	431a      	orrs	r2, r3
 800084e:	4691      	mov	r9, r2
 8000850:	2003      	movs	r0, #3
 8000852:	4652      	mov	r2, sl
 8000854:	e74f      	b.n	80006f6 <__aeabi_ddiv+0x7a>
 8000856:	4649      	mov	r1, r9
 8000858:	2301      	movs	r3, #1
 800085a:	4319      	orrs	r1, r3
 800085c:	4689      	mov	r9, r1
 800085e:	2400      	movs	r4, #0
 8000860:	2001      	movs	r0, #1
 8000862:	e748      	b.n	80006f6 <__aeabi_ddiv+0x7a>
 8000864:	230c      	movs	r3, #12
 8000866:	4699      	mov	r9, r3
 8000868:	3b09      	subs	r3, #9
 800086a:	46a0      	mov	r8, r4
 800086c:	4683      	mov	fp, r0
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	e728      	b.n	80006c4 <__aeabi_ddiv+0x48>
 8000872:	2304      	movs	r3, #4
 8000874:	4699      	mov	r9, r3
 8000876:	2300      	movs	r3, #0
 8000878:	469b      	mov	fp, r3
 800087a:	3301      	adds	r3, #1
 800087c:	2500      	movs	r5, #0
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	e720      	b.n	80006c4 <__aeabi_ddiv+0x48>
 8000882:	2300      	movs	r3, #0
 8000884:	2480      	movs	r4, #128	; 0x80
 8000886:	469a      	mov	sl, r3
 8000888:	2500      	movs	r5, #0
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <__aeabi_ddiv+0x244>)
 800088c:	0324      	lsls	r4, r4, #12
 800088e:	e74f      	b.n	8000730 <__aeabi_ddiv+0xb4>
 8000890:	2380      	movs	r3, #128	; 0x80
 8000892:	4641      	mov	r1, r8
 8000894:	031b      	lsls	r3, r3, #12
 8000896:	4219      	tst	r1, r3
 8000898:	d008      	beq.n	80008ac <__aeabi_ddiv+0x230>
 800089a:	421c      	tst	r4, r3
 800089c:	d106      	bne.n	80008ac <__aeabi_ddiv+0x230>
 800089e:	431c      	orrs	r4, r3
 80008a0:	0324      	lsls	r4, r4, #12
 80008a2:	46ba      	mov	sl, r7
 80008a4:	0015      	movs	r5, r2
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <__aeabi_ddiv+0x244>)
 80008a8:	0b24      	lsrs	r4, r4, #12
 80008aa:	e741      	b.n	8000730 <__aeabi_ddiv+0xb4>
 80008ac:	2480      	movs	r4, #128	; 0x80
 80008ae:	4643      	mov	r3, r8
 80008b0:	0324      	lsls	r4, r4, #12
 80008b2:	431c      	orrs	r4, r3
 80008b4:	0324      	lsls	r4, r4, #12
 80008b6:	46b2      	mov	sl, r6
 80008b8:	4b01      	ldr	r3, [pc, #4]	; (80008c0 <__aeabi_ddiv+0x244>)
 80008ba:	0b24      	lsrs	r4, r4, #12
 80008bc:	e738      	b.n	8000730 <__aeabi_ddiv+0xb4>
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	000007ff 	.word	0x000007ff
 80008c4:	fffffc01 	.word	0xfffffc01
 80008c8:	08004ce8 	.word	0x08004ce8
 80008cc:	fffff801 	.word	0xfffff801
 80008d0:	fffffc0d 	.word	0xfffffc0d
 80008d4:	000003f3 	.word	0x000003f3
 80008d8:	000003ff 	.word	0x000003ff
 80008dc:	feffffff 	.word	0xfeffffff
 80008e0:	000007fe 	.word	0x000007fe
 80008e4:	4544      	cmp	r4, r8
 80008e6:	d200      	bcs.n	80008ea <__aeabi_ddiv+0x26e>
 80008e8:	e116      	b.n	8000b18 <__aeabi_ddiv+0x49c>
 80008ea:	d100      	bne.n	80008ee <__aeabi_ddiv+0x272>
 80008ec:	e111      	b.n	8000b12 <__aeabi_ddiv+0x496>
 80008ee:	2301      	movs	r3, #1
 80008f0:	425b      	negs	r3, r3
 80008f2:	469c      	mov	ip, r3
 80008f4:	002e      	movs	r6, r5
 80008f6:	4640      	mov	r0, r8
 80008f8:	2500      	movs	r5, #0
 80008fa:	44e3      	add	fp, ip
 80008fc:	0223      	lsls	r3, r4, #8
 80008fe:	0e14      	lsrs	r4, r2, #24
 8000900:	431c      	orrs	r4, r3
 8000902:	0c1b      	lsrs	r3, r3, #16
 8000904:	4699      	mov	r9, r3
 8000906:	0423      	lsls	r3, r4, #16
 8000908:	0c1f      	lsrs	r7, r3, #16
 800090a:	0212      	lsls	r2, r2, #8
 800090c:	4649      	mov	r1, r9
 800090e:	9200      	str	r2, [sp, #0]
 8000910:	9701      	str	r7, [sp, #4]
 8000912:	f7ff fc7d 	bl	8000210 <__aeabi_uidivmod>
 8000916:	0002      	movs	r2, r0
 8000918:	437a      	muls	r2, r7
 800091a:	040b      	lsls	r3, r1, #16
 800091c:	0c31      	lsrs	r1, r6, #16
 800091e:	4680      	mov	r8, r0
 8000920:	4319      	orrs	r1, r3
 8000922:	428a      	cmp	r2, r1
 8000924:	d90b      	bls.n	800093e <__aeabi_ddiv+0x2c2>
 8000926:	2301      	movs	r3, #1
 8000928:	425b      	negs	r3, r3
 800092a:	469c      	mov	ip, r3
 800092c:	1909      	adds	r1, r1, r4
 800092e:	44e0      	add	r8, ip
 8000930:	428c      	cmp	r4, r1
 8000932:	d804      	bhi.n	800093e <__aeabi_ddiv+0x2c2>
 8000934:	428a      	cmp	r2, r1
 8000936:	d902      	bls.n	800093e <__aeabi_ddiv+0x2c2>
 8000938:	1e83      	subs	r3, r0, #2
 800093a:	4698      	mov	r8, r3
 800093c:	1909      	adds	r1, r1, r4
 800093e:	1a88      	subs	r0, r1, r2
 8000940:	4649      	mov	r1, r9
 8000942:	f7ff fc65 	bl	8000210 <__aeabi_uidivmod>
 8000946:	0409      	lsls	r1, r1, #16
 8000948:	468c      	mov	ip, r1
 800094a:	0431      	lsls	r1, r6, #16
 800094c:	4666      	mov	r6, ip
 800094e:	9a01      	ldr	r2, [sp, #4]
 8000950:	0c09      	lsrs	r1, r1, #16
 8000952:	4342      	muls	r2, r0
 8000954:	0003      	movs	r3, r0
 8000956:	4331      	orrs	r1, r6
 8000958:	428a      	cmp	r2, r1
 800095a:	d904      	bls.n	8000966 <__aeabi_ddiv+0x2ea>
 800095c:	1909      	adds	r1, r1, r4
 800095e:	3b01      	subs	r3, #1
 8000960:	428c      	cmp	r4, r1
 8000962:	d800      	bhi.n	8000966 <__aeabi_ddiv+0x2ea>
 8000964:	e111      	b.n	8000b8a <__aeabi_ddiv+0x50e>
 8000966:	1a89      	subs	r1, r1, r2
 8000968:	4642      	mov	r2, r8
 800096a:	9e00      	ldr	r6, [sp, #0]
 800096c:	0412      	lsls	r2, r2, #16
 800096e:	431a      	orrs	r2, r3
 8000970:	0c33      	lsrs	r3, r6, #16
 8000972:	001f      	movs	r7, r3
 8000974:	0c10      	lsrs	r0, r2, #16
 8000976:	4690      	mov	r8, r2
 8000978:	9302      	str	r3, [sp, #8]
 800097a:	0413      	lsls	r3, r2, #16
 800097c:	0432      	lsls	r2, r6, #16
 800097e:	0c16      	lsrs	r6, r2, #16
 8000980:	0032      	movs	r2, r6
 8000982:	0c1b      	lsrs	r3, r3, #16
 8000984:	435a      	muls	r2, r3
 8000986:	9603      	str	r6, [sp, #12]
 8000988:	437b      	muls	r3, r7
 800098a:	4346      	muls	r6, r0
 800098c:	4378      	muls	r0, r7
 800098e:	0c17      	lsrs	r7, r2, #16
 8000990:	46bc      	mov	ip, r7
 8000992:	199b      	adds	r3, r3, r6
 8000994:	4463      	add	r3, ip
 8000996:	429e      	cmp	r6, r3
 8000998:	d903      	bls.n	80009a2 <__aeabi_ddiv+0x326>
 800099a:	2680      	movs	r6, #128	; 0x80
 800099c:	0276      	lsls	r6, r6, #9
 800099e:	46b4      	mov	ip, r6
 80009a0:	4460      	add	r0, ip
 80009a2:	0c1e      	lsrs	r6, r3, #16
 80009a4:	1830      	adds	r0, r6, r0
 80009a6:	0416      	lsls	r6, r2, #16
 80009a8:	041b      	lsls	r3, r3, #16
 80009aa:	0c36      	lsrs	r6, r6, #16
 80009ac:	199e      	adds	r6, r3, r6
 80009ae:	4281      	cmp	r1, r0
 80009b0:	d200      	bcs.n	80009b4 <__aeabi_ddiv+0x338>
 80009b2:	e09c      	b.n	8000aee <__aeabi_ddiv+0x472>
 80009b4:	d100      	bne.n	80009b8 <__aeabi_ddiv+0x33c>
 80009b6:	e097      	b.n	8000ae8 <__aeabi_ddiv+0x46c>
 80009b8:	1bae      	subs	r6, r5, r6
 80009ba:	1a09      	subs	r1, r1, r0
 80009bc:	42b5      	cmp	r5, r6
 80009be:	4180      	sbcs	r0, r0
 80009c0:	4240      	negs	r0, r0
 80009c2:	1a08      	subs	r0, r1, r0
 80009c4:	4284      	cmp	r4, r0
 80009c6:	d100      	bne.n	80009ca <__aeabi_ddiv+0x34e>
 80009c8:	e111      	b.n	8000bee <__aeabi_ddiv+0x572>
 80009ca:	4649      	mov	r1, r9
 80009cc:	f7ff fc20 	bl	8000210 <__aeabi_uidivmod>
 80009d0:	9a01      	ldr	r2, [sp, #4]
 80009d2:	040b      	lsls	r3, r1, #16
 80009d4:	4342      	muls	r2, r0
 80009d6:	0c31      	lsrs	r1, r6, #16
 80009d8:	0005      	movs	r5, r0
 80009da:	4319      	orrs	r1, r3
 80009dc:	428a      	cmp	r2, r1
 80009de:	d907      	bls.n	80009f0 <__aeabi_ddiv+0x374>
 80009e0:	1909      	adds	r1, r1, r4
 80009e2:	3d01      	subs	r5, #1
 80009e4:	428c      	cmp	r4, r1
 80009e6:	d803      	bhi.n	80009f0 <__aeabi_ddiv+0x374>
 80009e8:	428a      	cmp	r2, r1
 80009ea:	d901      	bls.n	80009f0 <__aeabi_ddiv+0x374>
 80009ec:	1e85      	subs	r5, r0, #2
 80009ee:	1909      	adds	r1, r1, r4
 80009f0:	1a88      	subs	r0, r1, r2
 80009f2:	4649      	mov	r1, r9
 80009f4:	f7ff fc0c 	bl	8000210 <__aeabi_uidivmod>
 80009f8:	0409      	lsls	r1, r1, #16
 80009fa:	468c      	mov	ip, r1
 80009fc:	0431      	lsls	r1, r6, #16
 80009fe:	4666      	mov	r6, ip
 8000a00:	9a01      	ldr	r2, [sp, #4]
 8000a02:	0c09      	lsrs	r1, r1, #16
 8000a04:	4342      	muls	r2, r0
 8000a06:	0003      	movs	r3, r0
 8000a08:	4331      	orrs	r1, r6
 8000a0a:	428a      	cmp	r2, r1
 8000a0c:	d907      	bls.n	8000a1e <__aeabi_ddiv+0x3a2>
 8000a0e:	1909      	adds	r1, r1, r4
 8000a10:	3b01      	subs	r3, #1
 8000a12:	428c      	cmp	r4, r1
 8000a14:	d803      	bhi.n	8000a1e <__aeabi_ddiv+0x3a2>
 8000a16:	428a      	cmp	r2, r1
 8000a18:	d901      	bls.n	8000a1e <__aeabi_ddiv+0x3a2>
 8000a1a:	1e83      	subs	r3, r0, #2
 8000a1c:	1909      	adds	r1, r1, r4
 8000a1e:	9e03      	ldr	r6, [sp, #12]
 8000a20:	1a89      	subs	r1, r1, r2
 8000a22:	0032      	movs	r2, r6
 8000a24:	042d      	lsls	r5, r5, #16
 8000a26:	431d      	orrs	r5, r3
 8000a28:	9f02      	ldr	r7, [sp, #8]
 8000a2a:	042b      	lsls	r3, r5, #16
 8000a2c:	0c1b      	lsrs	r3, r3, #16
 8000a2e:	435a      	muls	r2, r3
 8000a30:	437b      	muls	r3, r7
 8000a32:	469c      	mov	ip, r3
 8000a34:	0c28      	lsrs	r0, r5, #16
 8000a36:	4346      	muls	r6, r0
 8000a38:	0c13      	lsrs	r3, r2, #16
 8000a3a:	44b4      	add	ip, r6
 8000a3c:	4463      	add	r3, ip
 8000a3e:	4378      	muls	r0, r7
 8000a40:	429e      	cmp	r6, r3
 8000a42:	d903      	bls.n	8000a4c <__aeabi_ddiv+0x3d0>
 8000a44:	2680      	movs	r6, #128	; 0x80
 8000a46:	0276      	lsls	r6, r6, #9
 8000a48:	46b4      	mov	ip, r6
 8000a4a:	4460      	add	r0, ip
 8000a4c:	0c1e      	lsrs	r6, r3, #16
 8000a4e:	0412      	lsls	r2, r2, #16
 8000a50:	041b      	lsls	r3, r3, #16
 8000a52:	0c12      	lsrs	r2, r2, #16
 8000a54:	1830      	adds	r0, r6, r0
 8000a56:	189b      	adds	r3, r3, r2
 8000a58:	4281      	cmp	r1, r0
 8000a5a:	d306      	bcc.n	8000a6a <__aeabi_ddiv+0x3ee>
 8000a5c:	d002      	beq.n	8000a64 <__aeabi_ddiv+0x3e8>
 8000a5e:	2301      	movs	r3, #1
 8000a60:	431d      	orrs	r5, r3
 8000a62:	e6ce      	b.n	8000802 <__aeabi_ddiv+0x186>
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d100      	bne.n	8000a6a <__aeabi_ddiv+0x3ee>
 8000a68:	e6cb      	b.n	8000802 <__aeabi_ddiv+0x186>
 8000a6a:	1861      	adds	r1, r4, r1
 8000a6c:	1e6e      	subs	r6, r5, #1
 8000a6e:	42a1      	cmp	r1, r4
 8000a70:	d200      	bcs.n	8000a74 <__aeabi_ddiv+0x3f8>
 8000a72:	e0a4      	b.n	8000bbe <__aeabi_ddiv+0x542>
 8000a74:	4281      	cmp	r1, r0
 8000a76:	d200      	bcs.n	8000a7a <__aeabi_ddiv+0x3fe>
 8000a78:	e0c9      	b.n	8000c0e <__aeabi_ddiv+0x592>
 8000a7a:	d100      	bne.n	8000a7e <__aeabi_ddiv+0x402>
 8000a7c:	e0d9      	b.n	8000c32 <__aeabi_ddiv+0x5b6>
 8000a7e:	0035      	movs	r5, r6
 8000a80:	e7ed      	b.n	8000a5e <__aeabi_ddiv+0x3e2>
 8000a82:	2501      	movs	r5, #1
 8000a84:	426d      	negs	r5, r5
 8000a86:	2101      	movs	r1, #1
 8000a88:	1a89      	subs	r1, r1, r2
 8000a8a:	2938      	cmp	r1, #56	; 0x38
 8000a8c:	dd00      	ble.n	8000a90 <__aeabi_ddiv+0x414>
 8000a8e:	e64c      	b.n	800072a <__aeabi_ddiv+0xae>
 8000a90:	291f      	cmp	r1, #31
 8000a92:	dc00      	bgt.n	8000a96 <__aeabi_ddiv+0x41a>
 8000a94:	e07f      	b.n	8000b96 <__aeabi_ddiv+0x51a>
 8000a96:	231f      	movs	r3, #31
 8000a98:	425b      	negs	r3, r3
 8000a9a:	1a9a      	subs	r2, r3, r2
 8000a9c:	4643      	mov	r3, r8
 8000a9e:	40d3      	lsrs	r3, r2
 8000aa0:	2920      	cmp	r1, #32
 8000aa2:	d004      	beq.n	8000aae <__aeabi_ddiv+0x432>
 8000aa4:	4644      	mov	r4, r8
 8000aa6:	4a65      	ldr	r2, [pc, #404]	; (8000c3c <__aeabi_ddiv+0x5c0>)
 8000aa8:	445a      	add	r2, fp
 8000aaa:	4094      	lsls	r4, r2
 8000aac:	4325      	orrs	r5, r4
 8000aae:	1e6a      	subs	r2, r5, #1
 8000ab0:	4195      	sbcs	r5, r2
 8000ab2:	2207      	movs	r2, #7
 8000ab4:	432b      	orrs	r3, r5
 8000ab6:	0015      	movs	r5, r2
 8000ab8:	2400      	movs	r4, #0
 8000aba:	401d      	ands	r5, r3
 8000abc:	421a      	tst	r2, r3
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_ddiv+0x446>
 8000ac0:	e0a1      	b.n	8000c06 <__aeabi_ddiv+0x58a>
 8000ac2:	220f      	movs	r2, #15
 8000ac4:	2400      	movs	r4, #0
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	2a04      	cmp	r2, #4
 8000aca:	d100      	bne.n	8000ace <__aeabi_ddiv+0x452>
 8000acc:	e098      	b.n	8000c00 <__aeabi_ddiv+0x584>
 8000ace:	1d1a      	adds	r2, r3, #4
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	419b      	sbcs	r3, r3
 8000ad4:	425b      	negs	r3, r3
 8000ad6:	18e4      	adds	r4, r4, r3
 8000ad8:	0013      	movs	r3, r2
 8000ada:	0222      	lsls	r2, r4, #8
 8000adc:	d400      	bmi.n	8000ae0 <__aeabi_ddiv+0x464>
 8000ade:	e08f      	b.n	8000c00 <__aeabi_ddiv+0x584>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2500      	movs	r5, #0
 8000ae6:	e623      	b.n	8000730 <__aeabi_ddiv+0xb4>
 8000ae8:	42b5      	cmp	r5, r6
 8000aea:	d300      	bcc.n	8000aee <__aeabi_ddiv+0x472>
 8000aec:	e764      	b.n	80009b8 <__aeabi_ddiv+0x33c>
 8000aee:	4643      	mov	r3, r8
 8000af0:	1e5a      	subs	r2, r3, #1
 8000af2:	9b00      	ldr	r3, [sp, #0]
 8000af4:	469c      	mov	ip, r3
 8000af6:	4465      	add	r5, ip
 8000af8:	001f      	movs	r7, r3
 8000afa:	429d      	cmp	r5, r3
 8000afc:	419b      	sbcs	r3, r3
 8000afe:	425b      	negs	r3, r3
 8000b00:	191b      	adds	r3, r3, r4
 8000b02:	18c9      	adds	r1, r1, r3
 8000b04:	428c      	cmp	r4, r1
 8000b06:	d23a      	bcs.n	8000b7e <__aeabi_ddiv+0x502>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	d863      	bhi.n	8000bd4 <__aeabi_ddiv+0x558>
 8000b0c:	d060      	beq.n	8000bd0 <__aeabi_ddiv+0x554>
 8000b0e:	4690      	mov	r8, r2
 8000b10:	e752      	b.n	80009b8 <__aeabi_ddiv+0x33c>
 8000b12:	42aa      	cmp	r2, r5
 8000b14:	d900      	bls.n	8000b18 <__aeabi_ddiv+0x49c>
 8000b16:	e6ea      	b.n	80008ee <__aeabi_ddiv+0x272>
 8000b18:	4643      	mov	r3, r8
 8000b1a:	07de      	lsls	r6, r3, #31
 8000b1c:	0858      	lsrs	r0, r3, #1
 8000b1e:	086b      	lsrs	r3, r5, #1
 8000b20:	431e      	orrs	r6, r3
 8000b22:	07ed      	lsls	r5, r5, #31
 8000b24:	e6ea      	b.n	80008fc <__aeabi_ddiv+0x280>
 8000b26:	4648      	mov	r0, r9
 8000b28:	f000 fff8 	bl	8001b1c <__clzsi2>
 8000b2c:	0001      	movs	r1, r0
 8000b2e:	0002      	movs	r2, r0
 8000b30:	3115      	adds	r1, #21
 8000b32:	3220      	adds	r2, #32
 8000b34:	291c      	cmp	r1, #28
 8000b36:	dc00      	bgt.n	8000b3a <__aeabi_ddiv+0x4be>
 8000b38:	e61a      	b.n	8000770 <__aeabi_ddiv+0xf4>
 8000b3a:	464b      	mov	r3, r9
 8000b3c:	3808      	subs	r0, #8
 8000b3e:	4083      	lsls	r3, r0
 8000b40:	2500      	movs	r5, #0
 8000b42:	4698      	mov	r8, r3
 8000b44:	e620      	b.n	8000788 <__aeabi_ddiv+0x10c>
 8000b46:	f000 ffe9 	bl	8001b1c <__clzsi2>
 8000b4a:	0003      	movs	r3, r0
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	3215      	adds	r2, #21
 8000b50:	3020      	adds	r0, #32
 8000b52:	2a1c      	cmp	r2, #28
 8000b54:	dc00      	bgt.n	8000b58 <__aeabi_ddiv+0x4dc>
 8000b56:	e630      	b.n	80007ba <__aeabi_ddiv+0x13e>
 8000b58:	4654      	mov	r4, sl
 8000b5a:	3b08      	subs	r3, #8
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	409c      	lsls	r4, r3
 8000b60:	e635      	b.n	80007ce <__aeabi_ddiv+0x152>
 8000b62:	230f      	movs	r3, #15
 8000b64:	402b      	ands	r3, r5
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	d100      	bne.n	8000b6c <__aeabi_ddiv+0x4f0>
 8000b6a:	e652      	b.n	8000812 <__aeabi_ddiv+0x196>
 8000b6c:	2305      	movs	r3, #5
 8000b6e:	425b      	negs	r3, r3
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	419b      	sbcs	r3, r3
 8000b74:	3504      	adds	r5, #4
 8000b76:	425b      	negs	r3, r3
 8000b78:	08ed      	lsrs	r5, r5, #3
 8000b7a:	4498      	add	r8, r3
 8000b7c:	e64a      	b.n	8000814 <__aeabi_ddiv+0x198>
 8000b7e:	428c      	cmp	r4, r1
 8000b80:	d1c5      	bne.n	8000b0e <__aeabi_ddiv+0x492>
 8000b82:	42af      	cmp	r7, r5
 8000b84:	d9c0      	bls.n	8000b08 <__aeabi_ddiv+0x48c>
 8000b86:	4690      	mov	r8, r2
 8000b88:	e716      	b.n	80009b8 <__aeabi_ddiv+0x33c>
 8000b8a:	428a      	cmp	r2, r1
 8000b8c:	d800      	bhi.n	8000b90 <__aeabi_ddiv+0x514>
 8000b8e:	e6ea      	b.n	8000966 <__aeabi_ddiv+0x2ea>
 8000b90:	1e83      	subs	r3, r0, #2
 8000b92:	1909      	adds	r1, r1, r4
 8000b94:	e6e7      	b.n	8000966 <__aeabi_ddiv+0x2ea>
 8000b96:	4a2a      	ldr	r2, [pc, #168]	; (8000c40 <__aeabi_ddiv+0x5c4>)
 8000b98:	0028      	movs	r0, r5
 8000b9a:	445a      	add	r2, fp
 8000b9c:	4643      	mov	r3, r8
 8000b9e:	4095      	lsls	r5, r2
 8000ba0:	4093      	lsls	r3, r2
 8000ba2:	40c8      	lsrs	r0, r1
 8000ba4:	1e6a      	subs	r2, r5, #1
 8000ba6:	4195      	sbcs	r5, r2
 8000ba8:	4644      	mov	r4, r8
 8000baa:	4303      	orrs	r3, r0
 8000bac:	432b      	orrs	r3, r5
 8000bae:	40cc      	lsrs	r4, r1
 8000bb0:	075a      	lsls	r2, r3, #29
 8000bb2:	d092      	beq.n	8000ada <__aeabi_ddiv+0x45e>
 8000bb4:	220f      	movs	r2, #15
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	2a04      	cmp	r2, #4
 8000bba:	d188      	bne.n	8000ace <__aeabi_ddiv+0x452>
 8000bbc:	e78d      	b.n	8000ada <__aeabi_ddiv+0x45e>
 8000bbe:	0035      	movs	r5, r6
 8000bc0:	4281      	cmp	r1, r0
 8000bc2:	d000      	beq.n	8000bc6 <__aeabi_ddiv+0x54a>
 8000bc4:	e74b      	b.n	8000a5e <__aeabi_ddiv+0x3e2>
 8000bc6:	9a00      	ldr	r2, [sp, #0]
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d000      	beq.n	8000bce <__aeabi_ddiv+0x552>
 8000bcc:	e747      	b.n	8000a5e <__aeabi_ddiv+0x3e2>
 8000bce:	e618      	b.n	8000802 <__aeabi_ddiv+0x186>
 8000bd0:	42ae      	cmp	r6, r5
 8000bd2:	d99c      	bls.n	8000b0e <__aeabi_ddiv+0x492>
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	425b      	negs	r3, r3
 8000bd8:	469c      	mov	ip, r3
 8000bda:	9b00      	ldr	r3, [sp, #0]
 8000bdc:	44e0      	add	r8, ip
 8000bde:	469c      	mov	ip, r3
 8000be0:	4465      	add	r5, ip
 8000be2:	429d      	cmp	r5, r3
 8000be4:	419b      	sbcs	r3, r3
 8000be6:	425b      	negs	r3, r3
 8000be8:	191b      	adds	r3, r3, r4
 8000bea:	18c9      	adds	r1, r1, r3
 8000bec:	e6e4      	b.n	80009b8 <__aeabi_ddiv+0x33c>
 8000bee:	4a15      	ldr	r2, [pc, #84]	; (8000c44 <__aeabi_ddiv+0x5c8>)
 8000bf0:	445a      	add	r2, fp
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	dc00      	bgt.n	8000bf8 <__aeabi_ddiv+0x57c>
 8000bf6:	e744      	b.n	8000a82 <__aeabi_ddiv+0x406>
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	2500      	movs	r5, #0
 8000bfc:	4498      	add	r8, r3
 8000bfe:	e609      	b.n	8000814 <__aeabi_ddiv+0x198>
 8000c00:	0765      	lsls	r5, r4, #29
 8000c02:	0264      	lsls	r4, r4, #9
 8000c04:	0b24      	lsrs	r4, r4, #12
 8000c06:	08db      	lsrs	r3, r3, #3
 8000c08:	431d      	orrs	r5, r3
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e590      	b.n	8000730 <__aeabi_ddiv+0xb4>
 8000c0e:	9e00      	ldr	r6, [sp, #0]
 8000c10:	3d02      	subs	r5, #2
 8000c12:	0072      	lsls	r2, r6, #1
 8000c14:	42b2      	cmp	r2, r6
 8000c16:	41bf      	sbcs	r7, r7
 8000c18:	427f      	negs	r7, r7
 8000c1a:	193c      	adds	r4, r7, r4
 8000c1c:	1909      	adds	r1, r1, r4
 8000c1e:	9200      	str	r2, [sp, #0]
 8000c20:	e7ce      	b.n	8000bc0 <__aeabi_ddiv+0x544>
 8000c22:	2480      	movs	r4, #128	; 0x80
 8000c24:	4643      	mov	r3, r8
 8000c26:	0324      	lsls	r4, r4, #12
 8000c28:	431c      	orrs	r4, r3
 8000c2a:	0324      	lsls	r4, r4, #12
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <__aeabi_ddiv+0x5cc>)
 8000c2e:	0b24      	lsrs	r4, r4, #12
 8000c30:	e57e      	b.n	8000730 <__aeabi_ddiv+0xb4>
 8000c32:	9a00      	ldr	r2, [sp, #0]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d3ea      	bcc.n	8000c0e <__aeabi_ddiv+0x592>
 8000c38:	0035      	movs	r5, r6
 8000c3a:	e7c4      	b.n	8000bc6 <__aeabi_ddiv+0x54a>
 8000c3c:	0000043e 	.word	0x0000043e
 8000c40:	0000041e 	.word	0x0000041e
 8000c44:	000003ff 	.word	0x000003ff
 8000c48:	000007ff 	.word	0x000007ff

08000c4c <__aeabi_dmul>:
 8000c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c4e:	4657      	mov	r7, sl
 8000c50:	464e      	mov	r6, r9
 8000c52:	4645      	mov	r5, r8
 8000c54:	46de      	mov	lr, fp
 8000c56:	b5e0      	push	{r5, r6, r7, lr}
 8000c58:	4698      	mov	r8, r3
 8000c5a:	030c      	lsls	r4, r1, #12
 8000c5c:	004b      	lsls	r3, r1, #1
 8000c5e:	0006      	movs	r6, r0
 8000c60:	4692      	mov	sl, r2
 8000c62:	b087      	sub	sp, #28
 8000c64:	0b24      	lsrs	r4, r4, #12
 8000c66:	0d5b      	lsrs	r3, r3, #21
 8000c68:	0fcf      	lsrs	r7, r1, #31
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d06c      	beq.n	8000d48 <__aeabi_dmul+0xfc>
 8000c6e:	4add      	ldr	r2, [pc, #884]	; (8000fe4 <__aeabi_dmul+0x398>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d100      	bne.n	8000c76 <__aeabi_dmul+0x2a>
 8000c74:	e086      	b.n	8000d84 <__aeabi_dmul+0x138>
 8000c76:	0f42      	lsrs	r2, r0, #29
 8000c78:	00e4      	lsls	r4, r4, #3
 8000c7a:	4314      	orrs	r4, r2
 8000c7c:	2280      	movs	r2, #128	; 0x80
 8000c7e:	0412      	lsls	r2, r2, #16
 8000c80:	4314      	orrs	r4, r2
 8000c82:	4ad9      	ldr	r2, [pc, #868]	; (8000fe8 <__aeabi_dmul+0x39c>)
 8000c84:	00c5      	lsls	r5, r0, #3
 8000c86:	4694      	mov	ip, r2
 8000c88:	4463      	add	r3, ip
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4699      	mov	r9, r3
 8000c90:	469b      	mov	fp, r3
 8000c92:	4643      	mov	r3, r8
 8000c94:	4642      	mov	r2, r8
 8000c96:	031e      	lsls	r6, r3, #12
 8000c98:	0fd2      	lsrs	r2, r2, #31
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	4650      	mov	r0, sl
 8000c9e:	4690      	mov	r8, r2
 8000ca0:	0b36      	lsrs	r6, r6, #12
 8000ca2:	0d5b      	lsrs	r3, r3, #21
 8000ca4:	d100      	bne.n	8000ca8 <__aeabi_dmul+0x5c>
 8000ca6:	e078      	b.n	8000d9a <__aeabi_dmul+0x14e>
 8000ca8:	4ace      	ldr	r2, [pc, #824]	; (8000fe4 <__aeabi_dmul+0x398>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d01d      	beq.n	8000cea <__aeabi_dmul+0x9e>
 8000cae:	49ce      	ldr	r1, [pc, #824]	; (8000fe8 <__aeabi_dmul+0x39c>)
 8000cb0:	0f42      	lsrs	r2, r0, #29
 8000cb2:	468c      	mov	ip, r1
 8000cb4:	9900      	ldr	r1, [sp, #0]
 8000cb6:	4463      	add	r3, ip
 8000cb8:	00f6      	lsls	r6, r6, #3
 8000cba:	468c      	mov	ip, r1
 8000cbc:	4316      	orrs	r6, r2
 8000cbe:	2280      	movs	r2, #128	; 0x80
 8000cc0:	449c      	add	ip, r3
 8000cc2:	0412      	lsls	r2, r2, #16
 8000cc4:	4663      	mov	r3, ip
 8000cc6:	4316      	orrs	r6, r2
 8000cc8:	00c2      	lsls	r2, r0, #3
 8000cca:	2000      	movs	r0, #0
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	9900      	ldr	r1, [sp, #0]
 8000cd0:	4643      	mov	r3, r8
 8000cd2:	3101      	adds	r1, #1
 8000cd4:	468c      	mov	ip, r1
 8000cd6:	4649      	mov	r1, r9
 8000cd8:	407b      	eors	r3, r7
 8000cda:	9301      	str	r3, [sp, #4]
 8000cdc:	290f      	cmp	r1, #15
 8000cde:	d900      	bls.n	8000ce2 <__aeabi_dmul+0x96>
 8000ce0:	e07e      	b.n	8000de0 <__aeabi_dmul+0x194>
 8000ce2:	4bc2      	ldr	r3, [pc, #776]	; (8000fec <__aeabi_dmul+0x3a0>)
 8000ce4:	0089      	lsls	r1, r1, #2
 8000ce6:	5859      	ldr	r1, [r3, r1]
 8000ce8:	468f      	mov	pc, r1
 8000cea:	4652      	mov	r2, sl
 8000cec:	9b00      	ldr	r3, [sp, #0]
 8000cee:	4332      	orrs	r2, r6
 8000cf0:	d000      	beq.n	8000cf4 <__aeabi_dmul+0xa8>
 8000cf2:	e156      	b.n	8000fa2 <__aeabi_dmul+0x356>
 8000cf4:	49bb      	ldr	r1, [pc, #748]	; (8000fe4 <__aeabi_dmul+0x398>)
 8000cf6:	2600      	movs	r6, #0
 8000cf8:	468c      	mov	ip, r1
 8000cfa:	4463      	add	r3, ip
 8000cfc:	4649      	mov	r1, r9
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	2302      	movs	r3, #2
 8000d02:	4319      	orrs	r1, r3
 8000d04:	4689      	mov	r9, r1
 8000d06:	2002      	movs	r0, #2
 8000d08:	e7e1      	b.n	8000cce <__aeabi_dmul+0x82>
 8000d0a:	4643      	mov	r3, r8
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	0034      	movs	r4, r6
 8000d10:	0015      	movs	r5, r2
 8000d12:	4683      	mov	fp, r0
 8000d14:	465b      	mov	r3, fp
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d05e      	beq.n	8000dd8 <__aeabi_dmul+0x18c>
 8000d1a:	2b03      	cmp	r3, #3
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_dmul+0xd4>
 8000d1e:	e1f3      	b.n	8001108 <__aeabi_dmul+0x4bc>
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d000      	beq.n	8000d26 <__aeabi_dmul+0xda>
 8000d24:	e118      	b.n	8000f58 <__aeabi_dmul+0x30c>
 8000d26:	2200      	movs	r2, #0
 8000d28:	2400      	movs	r4, #0
 8000d2a:	2500      	movs	r5, #0
 8000d2c:	9b01      	ldr	r3, [sp, #4]
 8000d2e:	0512      	lsls	r2, r2, #20
 8000d30:	4322      	orrs	r2, r4
 8000d32:	07db      	lsls	r3, r3, #31
 8000d34:	431a      	orrs	r2, r3
 8000d36:	0028      	movs	r0, r5
 8000d38:	0011      	movs	r1, r2
 8000d3a:	b007      	add	sp, #28
 8000d3c:	bcf0      	pop	{r4, r5, r6, r7}
 8000d3e:	46bb      	mov	fp, r7
 8000d40:	46b2      	mov	sl, r6
 8000d42:	46a9      	mov	r9, r5
 8000d44:	46a0      	mov	r8, r4
 8000d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d48:	0025      	movs	r5, r4
 8000d4a:	4305      	orrs	r5, r0
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_dmul+0x104>
 8000d4e:	e141      	b.n	8000fd4 <__aeabi_dmul+0x388>
 8000d50:	2c00      	cmp	r4, #0
 8000d52:	d100      	bne.n	8000d56 <__aeabi_dmul+0x10a>
 8000d54:	e1ad      	b.n	80010b2 <__aeabi_dmul+0x466>
 8000d56:	0020      	movs	r0, r4
 8000d58:	f000 fee0 	bl	8001b1c <__clzsi2>
 8000d5c:	0001      	movs	r1, r0
 8000d5e:	0002      	movs	r2, r0
 8000d60:	390b      	subs	r1, #11
 8000d62:	231d      	movs	r3, #29
 8000d64:	0010      	movs	r0, r2
 8000d66:	1a5b      	subs	r3, r3, r1
 8000d68:	0031      	movs	r1, r6
 8000d6a:	0035      	movs	r5, r6
 8000d6c:	3808      	subs	r0, #8
 8000d6e:	4084      	lsls	r4, r0
 8000d70:	40d9      	lsrs	r1, r3
 8000d72:	4085      	lsls	r5, r0
 8000d74:	430c      	orrs	r4, r1
 8000d76:	489e      	ldr	r0, [pc, #632]	; (8000ff0 <__aeabi_dmul+0x3a4>)
 8000d78:	1a83      	subs	r3, r0, r2
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4699      	mov	r9, r3
 8000d80:	469b      	mov	fp, r3
 8000d82:	e786      	b.n	8000c92 <__aeabi_dmul+0x46>
 8000d84:	0005      	movs	r5, r0
 8000d86:	4325      	orrs	r5, r4
 8000d88:	d000      	beq.n	8000d8c <__aeabi_dmul+0x140>
 8000d8a:	e11c      	b.n	8000fc6 <__aeabi_dmul+0x37a>
 8000d8c:	2208      	movs	r2, #8
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2302      	movs	r3, #2
 8000d92:	2400      	movs	r4, #0
 8000d94:	4691      	mov	r9, r2
 8000d96:	469b      	mov	fp, r3
 8000d98:	e77b      	b.n	8000c92 <__aeabi_dmul+0x46>
 8000d9a:	4652      	mov	r2, sl
 8000d9c:	4332      	orrs	r2, r6
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_dmul+0x156>
 8000da0:	e10a      	b.n	8000fb8 <__aeabi_dmul+0x36c>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d100      	bne.n	8000da8 <__aeabi_dmul+0x15c>
 8000da6:	e176      	b.n	8001096 <__aeabi_dmul+0x44a>
 8000da8:	0030      	movs	r0, r6
 8000daa:	f000 feb7 	bl	8001b1c <__clzsi2>
 8000dae:	0002      	movs	r2, r0
 8000db0:	3a0b      	subs	r2, #11
 8000db2:	231d      	movs	r3, #29
 8000db4:	0001      	movs	r1, r0
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	4652      	mov	r2, sl
 8000dba:	3908      	subs	r1, #8
 8000dbc:	40da      	lsrs	r2, r3
 8000dbe:	408e      	lsls	r6, r1
 8000dc0:	4316      	orrs	r6, r2
 8000dc2:	4652      	mov	r2, sl
 8000dc4:	408a      	lsls	r2, r1
 8000dc6:	9b00      	ldr	r3, [sp, #0]
 8000dc8:	4989      	ldr	r1, [pc, #548]	; (8000ff0 <__aeabi_dmul+0x3a4>)
 8000dca:	1a18      	subs	r0, r3, r0
 8000dcc:	0003      	movs	r3, r0
 8000dce:	468c      	mov	ip, r1
 8000dd0:	4463      	add	r3, ip
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	e77a      	b.n	8000cce <__aeabi_dmul+0x82>
 8000dd8:	2400      	movs	r4, #0
 8000dda:	2500      	movs	r5, #0
 8000ddc:	4a81      	ldr	r2, [pc, #516]	; (8000fe4 <__aeabi_dmul+0x398>)
 8000dde:	e7a5      	b.n	8000d2c <__aeabi_dmul+0xe0>
 8000de0:	0c2f      	lsrs	r7, r5, #16
 8000de2:	042d      	lsls	r5, r5, #16
 8000de4:	0c2d      	lsrs	r5, r5, #16
 8000de6:	002b      	movs	r3, r5
 8000de8:	0c11      	lsrs	r1, r2, #16
 8000dea:	0412      	lsls	r2, r2, #16
 8000dec:	0c12      	lsrs	r2, r2, #16
 8000dee:	4353      	muls	r3, r2
 8000df0:	4698      	mov	r8, r3
 8000df2:	0013      	movs	r3, r2
 8000df4:	0028      	movs	r0, r5
 8000df6:	437b      	muls	r3, r7
 8000df8:	4699      	mov	r9, r3
 8000dfa:	4348      	muls	r0, r1
 8000dfc:	4448      	add	r0, r9
 8000dfe:	4683      	mov	fp, r0
 8000e00:	4640      	mov	r0, r8
 8000e02:	000b      	movs	r3, r1
 8000e04:	0c00      	lsrs	r0, r0, #16
 8000e06:	4682      	mov	sl, r0
 8000e08:	4658      	mov	r0, fp
 8000e0a:	437b      	muls	r3, r7
 8000e0c:	4450      	add	r0, sl
 8000e0e:	9302      	str	r3, [sp, #8]
 8000e10:	4581      	cmp	r9, r0
 8000e12:	d906      	bls.n	8000e22 <__aeabi_dmul+0x1d6>
 8000e14:	469a      	mov	sl, r3
 8000e16:	2380      	movs	r3, #128	; 0x80
 8000e18:	025b      	lsls	r3, r3, #9
 8000e1a:	4699      	mov	r9, r3
 8000e1c:	44ca      	add	sl, r9
 8000e1e:	4653      	mov	r3, sl
 8000e20:	9302      	str	r3, [sp, #8]
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	469b      	mov	fp, r3
 8000e26:	4643      	mov	r3, r8
 8000e28:	041b      	lsls	r3, r3, #16
 8000e2a:	0400      	lsls	r0, r0, #16
 8000e2c:	0c1b      	lsrs	r3, r3, #16
 8000e2e:	4698      	mov	r8, r3
 8000e30:	0003      	movs	r3, r0
 8000e32:	4443      	add	r3, r8
 8000e34:	9304      	str	r3, [sp, #16]
 8000e36:	0c33      	lsrs	r3, r6, #16
 8000e38:	4699      	mov	r9, r3
 8000e3a:	002b      	movs	r3, r5
 8000e3c:	0436      	lsls	r6, r6, #16
 8000e3e:	0c36      	lsrs	r6, r6, #16
 8000e40:	4373      	muls	r3, r6
 8000e42:	4698      	mov	r8, r3
 8000e44:	0033      	movs	r3, r6
 8000e46:	437b      	muls	r3, r7
 8000e48:	469a      	mov	sl, r3
 8000e4a:	464b      	mov	r3, r9
 8000e4c:	435d      	muls	r5, r3
 8000e4e:	435f      	muls	r7, r3
 8000e50:	4643      	mov	r3, r8
 8000e52:	4455      	add	r5, sl
 8000e54:	0c18      	lsrs	r0, r3, #16
 8000e56:	1940      	adds	r0, r0, r5
 8000e58:	4582      	cmp	sl, r0
 8000e5a:	d903      	bls.n	8000e64 <__aeabi_dmul+0x218>
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	025b      	lsls	r3, r3, #9
 8000e60:	469a      	mov	sl, r3
 8000e62:	4457      	add	r7, sl
 8000e64:	0c05      	lsrs	r5, r0, #16
 8000e66:	19eb      	adds	r3, r5, r7
 8000e68:	9305      	str	r3, [sp, #20]
 8000e6a:	4643      	mov	r3, r8
 8000e6c:	041d      	lsls	r5, r3, #16
 8000e6e:	0c2d      	lsrs	r5, r5, #16
 8000e70:	0400      	lsls	r0, r0, #16
 8000e72:	1940      	adds	r0, r0, r5
 8000e74:	0c25      	lsrs	r5, r4, #16
 8000e76:	0424      	lsls	r4, r4, #16
 8000e78:	0c24      	lsrs	r4, r4, #16
 8000e7a:	0027      	movs	r7, r4
 8000e7c:	4357      	muls	r7, r2
 8000e7e:	436a      	muls	r2, r5
 8000e80:	4690      	mov	r8, r2
 8000e82:	002a      	movs	r2, r5
 8000e84:	0c3b      	lsrs	r3, r7, #16
 8000e86:	469a      	mov	sl, r3
 8000e88:	434a      	muls	r2, r1
 8000e8a:	4361      	muls	r1, r4
 8000e8c:	4441      	add	r1, r8
 8000e8e:	4451      	add	r1, sl
 8000e90:	4483      	add	fp, r0
 8000e92:	4588      	cmp	r8, r1
 8000e94:	d903      	bls.n	8000e9e <__aeabi_dmul+0x252>
 8000e96:	2380      	movs	r3, #128	; 0x80
 8000e98:	025b      	lsls	r3, r3, #9
 8000e9a:	4698      	mov	r8, r3
 8000e9c:	4442      	add	r2, r8
 8000e9e:	043f      	lsls	r7, r7, #16
 8000ea0:	0c0b      	lsrs	r3, r1, #16
 8000ea2:	0c3f      	lsrs	r7, r7, #16
 8000ea4:	0409      	lsls	r1, r1, #16
 8000ea6:	19c9      	adds	r1, r1, r7
 8000ea8:	0027      	movs	r7, r4
 8000eaa:	4698      	mov	r8, r3
 8000eac:	464b      	mov	r3, r9
 8000eae:	4377      	muls	r7, r6
 8000eb0:	435c      	muls	r4, r3
 8000eb2:	436e      	muls	r6, r5
 8000eb4:	435d      	muls	r5, r3
 8000eb6:	0c3b      	lsrs	r3, r7, #16
 8000eb8:	4699      	mov	r9, r3
 8000eba:	19a4      	adds	r4, r4, r6
 8000ebc:	444c      	add	r4, r9
 8000ebe:	4442      	add	r2, r8
 8000ec0:	9503      	str	r5, [sp, #12]
 8000ec2:	42a6      	cmp	r6, r4
 8000ec4:	d904      	bls.n	8000ed0 <__aeabi_dmul+0x284>
 8000ec6:	2380      	movs	r3, #128	; 0x80
 8000ec8:	025b      	lsls	r3, r3, #9
 8000eca:	4698      	mov	r8, r3
 8000ecc:	4445      	add	r5, r8
 8000ece:	9503      	str	r5, [sp, #12]
 8000ed0:	9b02      	ldr	r3, [sp, #8]
 8000ed2:	043f      	lsls	r7, r7, #16
 8000ed4:	445b      	add	r3, fp
 8000ed6:	001e      	movs	r6, r3
 8000ed8:	4283      	cmp	r3, r0
 8000eda:	4180      	sbcs	r0, r0
 8000edc:	0423      	lsls	r3, r4, #16
 8000ede:	4698      	mov	r8, r3
 8000ee0:	9b05      	ldr	r3, [sp, #20]
 8000ee2:	0c3f      	lsrs	r7, r7, #16
 8000ee4:	4447      	add	r7, r8
 8000ee6:	4698      	mov	r8, r3
 8000ee8:	1876      	adds	r6, r6, r1
 8000eea:	428e      	cmp	r6, r1
 8000eec:	4189      	sbcs	r1, r1
 8000eee:	4447      	add	r7, r8
 8000ef0:	4240      	negs	r0, r0
 8000ef2:	183d      	adds	r5, r7, r0
 8000ef4:	46a8      	mov	r8, r5
 8000ef6:	4693      	mov	fp, r2
 8000ef8:	4249      	negs	r1, r1
 8000efa:	468a      	mov	sl, r1
 8000efc:	44c3      	add	fp, r8
 8000efe:	429f      	cmp	r7, r3
 8000f00:	41bf      	sbcs	r7, r7
 8000f02:	4580      	cmp	r8, r0
 8000f04:	4180      	sbcs	r0, r0
 8000f06:	9b03      	ldr	r3, [sp, #12]
 8000f08:	44da      	add	sl, fp
 8000f0a:	4698      	mov	r8, r3
 8000f0c:	4653      	mov	r3, sl
 8000f0e:	4240      	negs	r0, r0
 8000f10:	427f      	negs	r7, r7
 8000f12:	4307      	orrs	r7, r0
 8000f14:	0c24      	lsrs	r4, r4, #16
 8000f16:	4593      	cmp	fp, r2
 8000f18:	4192      	sbcs	r2, r2
 8000f1a:	458a      	cmp	sl, r1
 8000f1c:	4189      	sbcs	r1, r1
 8000f1e:	193f      	adds	r7, r7, r4
 8000f20:	0ddc      	lsrs	r4, r3, #23
 8000f22:	9b04      	ldr	r3, [sp, #16]
 8000f24:	0275      	lsls	r5, r6, #9
 8000f26:	431d      	orrs	r5, r3
 8000f28:	1e68      	subs	r0, r5, #1
 8000f2a:	4185      	sbcs	r5, r0
 8000f2c:	4653      	mov	r3, sl
 8000f2e:	4252      	negs	r2, r2
 8000f30:	4249      	negs	r1, r1
 8000f32:	430a      	orrs	r2, r1
 8000f34:	18bf      	adds	r7, r7, r2
 8000f36:	4447      	add	r7, r8
 8000f38:	0df6      	lsrs	r6, r6, #23
 8000f3a:	027f      	lsls	r7, r7, #9
 8000f3c:	4335      	orrs	r5, r6
 8000f3e:	025a      	lsls	r2, r3, #9
 8000f40:	433c      	orrs	r4, r7
 8000f42:	4315      	orrs	r5, r2
 8000f44:	01fb      	lsls	r3, r7, #7
 8000f46:	d400      	bmi.n	8000f4a <__aeabi_dmul+0x2fe>
 8000f48:	e0c1      	b.n	80010ce <__aeabi_dmul+0x482>
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	086a      	lsrs	r2, r5, #1
 8000f4e:	400d      	ands	r5, r1
 8000f50:	4315      	orrs	r5, r2
 8000f52:	07e2      	lsls	r2, r4, #31
 8000f54:	4315      	orrs	r5, r2
 8000f56:	0864      	lsrs	r4, r4, #1
 8000f58:	4926      	ldr	r1, [pc, #152]	; (8000ff4 <__aeabi_dmul+0x3a8>)
 8000f5a:	4461      	add	r1, ip
 8000f5c:	2900      	cmp	r1, #0
 8000f5e:	dd56      	ble.n	800100e <__aeabi_dmul+0x3c2>
 8000f60:	076b      	lsls	r3, r5, #29
 8000f62:	d009      	beq.n	8000f78 <__aeabi_dmul+0x32c>
 8000f64:	220f      	movs	r2, #15
 8000f66:	402a      	ands	r2, r5
 8000f68:	2a04      	cmp	r2, #4
 8000f6a:	d005      	beq.n	8000f78 <__aeabi_dmul+0x32c>
 8000f6c:	1d2a      	adds	r2, r5, #4
 8000f6e:	42aa      	cmp	r2, r5
 8000f70:	41ad      	sbcs	r5, r5
 8000f72:	426d      	negs	r5, r5
 8000f74:	1964      	adds	r4, r4, r5
 8000f76:	0015      	movs	r5, r2
 8000f78:	01e3      	lsls	r3, r4, #7
 8000f7a:	d504      	bpl.n	8000f86 <__aeabi_dmul+0x33a>
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	4a1e      	ldr	r2, [pc, #120]	; (8000ff8 <__aeabi_dmul+0x3ac>)
 8000f80:	00c9      	lsls	r1, r1, #3
 8000f82:	4014      	ands	r4, r2
 8000f84:	4461      	add	r1, ip
 8000f86:	4a1d      	ldr	r2, [pc, #116]	; (8000ffc <__aeabi_dmul+0x3b0>)
 8000f88:	4291      	cmp	r1, r2
 8000f8a:	dd00      	ble.n	8000f8e <__aeabi_dmul+0x342>
 8000f8c:	e724      	b.n	8000dd8 <__aeabi_dmul+0x18c>
 8000f8e:	0762      	lsls	r2, r4, #29
 8000f90:	08ed      	lsrs	r5, r5, #3
 8000f92:	0264      	lsls	r4, r4, #9
 8000f94:	0549      	lsls	r1, r1, #21
 8000f96:	4315      	orrs	r5, r2
 8000f98:	0b24      	lsrs	r4, r4, #12
 8000f9a:	0d4a      	lsrs	r2, r1, #21
 8000f9c:	e6c6      	b.n	8000d2c <__aeabi_dmul+0xe0>
 8000f9e:	9701      	str	r7, [sp, #4]
 8000fa0:	e6b8      	b.n	8000d14 <__aeabi_dmul+0xc8>
 8000fa2:	4a10      	ldr	r2, [pc, #64]	; (8000fe4 <__aeabi_dmul+0x398>)
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	4694      	mov	ip, r2
 8000fa8:	4463      	add	r3, ip
 8000faa:	464a      	mov	r2, r9
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2303      	movs	r3, #3
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	4691      	mov	r9, r2
 8000fb4:	4652      	mov	r2, sl
 8000fb6:	e68a      	b.n	8000cce <__aeabi_dmul+0x82>
 8000fb8:	4649      	mov	r1, r9
 8000fba:	2301      	movs	r3, #1
 8000fbc:	4319      	orrs	r1, r3
 8000fbe:	4689      	mov	r9, r1
 8000fc0:	2600      	movs	r6, #0
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	e683      	b.n	8000cce <__aeabi_dmul+0x82>
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2303      	movs	r3, #3
 8000fcc:	0005      	movs	r5, r0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	469b      	mov	fp, r3
 8000fd2:	e65e      	b.n	8000c92 <__aeabi_dmul+0x46>
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	4699      	mov	r9, r3
 8000fd8:	2300      	movs	r3, #0
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	2400      	movs	r4, #0
 8000fe0:	469b      	mov	fp, r3
 8000fe2:	e656      	b.n	8000c92 <__aeabi_dmul+0x46>
 8000fe4:	000007ff 	.word	0x000007ff
 8000fe8:	fffffc01 	.word	0xfffffc01
 8000fec:	08004d28 	.word	0x08004d28
 8000ff0:	fffffc0d 	.word	0xfffffc0d
 8000ff4:	000003ff 	.word	0x000003ff
 8000ff8:	feffffff 	.word	0xfeffffff
 8000ffc:	000007fe 	.word	0x000007fe
 8001000:	2300      	movs	r3, #0
 8001002:	2480      	movs	r4, #128	; 0x80
 8001004:	2500      	movs	r5, #0
 8001006:	4a44      	ldr	r2, [pc, #272]	; (8001118 <__aeabi_dmul+0x4cc>)
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	0324      	lsls	r4, r4, #12
 800100c:	e68e      	b.n	8000d2c <__aeabi_dmul+0xe0>
 800100e:	2001      	movs	r0, #1
 8001010:	1a40      	subs	r0, r0, r1
 8001012:	2838      	cmp	r0, #56	; 0x38
 8001014:	dd00      	ble.n	8001018 <__aeabi_dmul+0x3cc>
 8001016:	e686      	b.n	8000d26 <__aeabi_dmul+0xda>
 8001018:	281f      	cmp	r0, #31
 800101a:	dd5b      	ble.n	80010d4 <__aeabi_dmul+0x488>
 800101c:	221f      	movs	r2, #31
 800101e:	0023      	movs	r3, r4
 8001020:	4252      	negs	r2, r2
 8001022:	1a51      	subs	r1, r2, r1
 8001024:	40cb      	lsrs	r3, r1
 8001026:	0019      	movs	r1, r3
 8001028:	2820      	cmp	r0, #32
 800102a:	d003      	beq.n	8001034 <__aeabi_dmul+0x3e8>
 800102c:	4a3b      	ldr	r2, [pc, #236]	; (800111c <__aeabi_dmul+0x4d0>)
 800102e:	4462      	add	r2, ip
 8001030:	4094      	lsls	r4, r2
 8001032:	4325      	orrs	r5, r4
 8001034:	1e6a      	subs	r2, r5, #1
 8001036:	4195      	sbcs	r5, r2
 8001038:	002a      	movs	r2, r5
 800103a:	430a      	orrs	r2, r1
 800103c:	2107      	movs	r1, #7
 800103e:	000d      	movs	r5, r1
 8001040:	2400      	movs	r4, #0
 8001042:	4015      	ands	r5, r2
 8001044:	4211      	tst	r1, r2
 8001046:	d05b      	beq.n	8001100 <__aeabi_dmul+0x4b4>
 8001048:	210f      	movs	r1, #15
 800104a:	2400      	movs	r4, #0
 800104c:	4011      	ands	r1, r2
 800104e:	2904      	cmp	r1, #4
 8001050:	d053      	beq.n	80010fa <__aeabi_dmul+0x4ae>
 8001052:	1d11      	adds	r1, r2, #4
 8001054:	4291      	cmp	r1, r2
 8001056:	4192      	sbcs	r2, r2
 8001058:	4252      	negs	r2, r2
 800105a:	18a4      	adds	r4, r4, r2
 800105c:	000a      	movs	r2, r1
 800105e:	0223      	lsls	r3, r4, #8
 8001060:	d54b      	bpl.n	80010fa <__aeabi_dmul+0x4ae>
 8001062:	2201      	movs	r2, #1
 8001064:	2400      	movs	r4, #0
 8001066:	2500      	movs	r5, #0
 8001068:	e660      	b.n	8000d2c <__aeabi_dmul+0xe0>
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	031b      	lsls	r3, r3, #12
 800106e:	421c      	tst	r4, r3
 8001070:	d009      	beq.n	8001086 <__aeabi_dmul+0x43a>
 8001072:	421e      	tst	r6, r3
 8001074:	d107      	bne.n	8001086 <__aeabi_dmul+0x43a>
 8001076:	4333      	orrs	r3, r6
 8001078:	031c      	lsls	r4, r3, #12
 800107a:	4643      	mov	r3, r8
 800107c:	0015      	movs	r5, r2
 800107e:	0b24      	lsrs	r4, r4, #12
 8001080:	4a25      	ldr	r2, [pc, #148]	; (8001118 <__aeabi_dmul+0x4cc>)
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	e652      	b.n	8000d2c <__aeabi_dmul+0xe0>
 8001086:	2280      	movs	r2, #128	; 0x80
 8001088:	0312      	lsls	r2, r2, #12
 800108a:	4314      	orrs	r4, r2
 800108c:	0324      	lsls	r4, r4, #12
 800108e:	4a22      	ldr	r2, [pc, #136]	; (8001118 <__aeabi_dmul+0x4cc>)
 8001090:	0b24      	lsrs	r4, r4, #12
 8001092:	9701      	str	r7, [sp, #4]
 8001094:	e64a      	b.n	8000d2c <__aeabi_dmul+0xe0>
 8001096:	f000 fd41 	bl	8001b1c <__clzsi2>
 800109a:	0003      	movs	r3, r0
 800109c:	001a      	movs	r2, r3
 800109e:	3215      	adds	r2, #21
 80010a0:	3020      	adds	r0, #32
 80010a2:	2a1c      	cmp	r2, #28
 80010a4:	dc00      	bgt.n	80010a8 <__aeabi_dmul+0x45c>
 80010a6:	e684      	b.n	8000db2 <__aeabi_dmul+0x166>
 80010a8:	4656      	mov	r6, sl
 80010aa:	3b08      	subs	r3, #8
 80010ac:	2200      	movs	r2, #0
 80010ae:	409e      	lsls	r6, r3
 80010b0:	e689      	b.n	8000dc6 <__aeabi_dmul+0x17a>
 80010b2:	f000 fd33 	bl	8001b1c <__clzsi2>
 80010b6:	0001      	movs	r1, r0
 80010b8:	0002      	movs	r2, r0
 80010ba:	3115      	adds	r1, #21
 80010bc:	3220      	adds	r2, #32
 80010be:	291c      	cmp	r1, #28
 80010c0:	dc00      	bgt.n	80010c4 <__aeabi_dmul+0x478>
 80010c2:	e64e      	b.n	8000d62 <__aeabi_dmul+0x116>
 80010c4:	0034      	movs	r4, r6
 80010c6:	3808      	subs	r0, #8
 80010c8:	2500      	movs	r5, #0
 80010ca:	4084      	lsls	r4, r0
 80010cc:	e653      	b.n	8000d76 <__aeabi_dmul+0x12a>
 80010ce:	9b00      	ldr	r3, [sp, #0]
 80010d0:	469c      	mov	ip, r3
 80010d2:	e741      	b.n	8000f58 <__aeabi_dmul+0x30c>
 80010d4:	4912      	ldr	r1, [pc, #72]	; (8001120 <__aeabi_dmul+0x4d4>)
 80010d6:	0022      	movs	r2, r4
 80010d8:	4461      	add	r1, ip
 80010da:	002e      	movs	r6, r5
 80010dc:	408d      	lsls	r5, r1
 80010de:	408a      	lsls	r2, r1
 80010e0:	40c6      	lsrs	r6, r0
 80010e2:	1e69      	subs	r1, r5, #1
 80010e4:	418d      	sbcs	r5, r1
 80010e6:	4332      	orrs	r2, r6
 80010e8:	432a      	orrs	r2, r5
 80010ea:	40c4      	lsrs	r4, r0
 80010ec:	0753      	lsls	r3, r2, #29
 80010ee:	d0b6      	beq.n	800105e <__aeabi_dmul+0x412>
 80010f0:	210f      	movs	r1, #15
 80010f2:	4011      	ands	r1, r2
 80010f4:	2904      	cmp	r1, #4
 80010f6:	d1ac      	bne.n	8001052 <__aeabi_dmul+0x406>
 80010f8:	e7b1      	b.n	800105e <__aeabi_dmul+0x412>
 80010fa:	0765      	lsls	r5, r4, #29
 80010fc:	0264      	lsls	r4, r4, #9
 80010fe:	0b24      	lsrs	r4, r4, #12
 8001100:	08d2      	lsrs	r2, r2, #3
 8001102:	4315      	orrs	r5, r2
 8001104:	2200      	movs	r2, #0
 8001106:	e611      	b.n	8000d2c <__aeabi_dmul+0xe0>
 8001108:	2280      	movs	r2, #128	; 0x80
 800110a:	0312      	lsls	r2, r2, #12
 800110c:	4314      	orrs	r4, r2
 800110e:	0324      	lsls	r4, r4, #12
 8001110:	4a01      	ldr	r2, [pc, #4]	; (8001118 <__aeabi_dmul+0x4cc>)
 8001112:	0b24      	lsrs	r4, r4, #12
 8001114:	e60a      	b.n	8000d2c <__aeabi_dmul+0xe0>
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	000007ff 	.word	0x000007ff
 800111c:	0000043e 	.word	0x0000043e
 8001120:	0000041e 	.word	0x0000041e

08001124 <__aeabi_dsub>:
 8001124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001126:	4657      	mov	r7, sl
 8001128:	464e      	mov	r6, r9
 800112a:	4645      	mov	r5, r8
 800112c:	46de      	mov	lr, fp
 800112e:	0004      	movs	r4, r0
 8001130:	b5e0      	push	{r5, r6, r7, lr}
 8001132:	001f      	movs	r7, r3
 8001134:	0010      	movs	r0, r2
 8001136:	030b      	lsls	r3, r1, #12
 8001138:	0f62      	lsrs	r2, r4, #29
 800113a:	004e      	lsls	r6, r1, #1
 800113c:	0fcd      	lsrs	r5, r1, #31
 800113e:	0a5b      	lsrs	r3, r3, #9
 8001140:	0339      	lsls	r1, r7, #12
 8001142:	4313      	orrs	r3, r2
 8001144:	0a49      	lsrs	r1, r1, #9
 8001146:	00e2      	lsls	r2, r4, #3
 8001148:	0f44      	lsrs	r4, r0, #29
 800114a:	4321      	orrs	r1, r4
 800114c:	4cc2      	ldr	r4, [pc, #776]	; (8001458 <__aeabi_dsub+0x334>)
 800114e:	4691      	mov	r9, r2
 8001150:	4692      	mov	sl, r2
 8001152:	00c0      	lsls	r0, r0, #3
 8001154:	007a      	lsls	r2, r7, #1
 8001156:	4680      	mov	r8, r0
 8001158:	0d76      	lsrs	r6, r6, #21
 800115a:	0d52      	lsrs	r2, r2, #21
 800115c:	0fff      	lsrs	r7, r7, #31
 800115e:	42a2      	cmp	r2, r4
 8001160:	d100      	bne.n	8001164 <__aeabi_dsub+0x40>
 8001162:	e0b4      	b.n	80012ce <__aeabi_dsub+0x1aa>
 8001164:	2401      	movs	r4, #1
 8001166:	4067      	eors	r7, r4
 8001168:	46bb      	mov	fp, r7
 800116a:	42bd      	cmp	r5, r7
 800116c:	d100      	bne.n	8001170 <__aeabi_dsub+0x4c>
 800116e:	e088      	b.n	8001282 <__aeabi_dsub+0x15e>
 8001170:	1ab4      	subs	r4, r6, r2
 8001172:	46a4      	mov	ip, r4
 8001174:	2c00      	cmp	r4, #0
 8001176:	dc00      	bgt.n	800117a <__aeabi_dsub+0x56>
 8001178:	e0b2      	b.n	80012e0 <__aeabi_dsub+0x1bc>
 800117a:	2a00      	cmp	r2, #0
 800117c:	d100      	bne.n	8001180 <__aeabi_dsub+0x5c>
 800117e:	e0c5      	b.n	800130c <__aeabi_dsub+0x1e8>
 8001180:	4ab5      	ldr	r2, [pc, #724]	; (8001458 <__aeabi_dsub+0x334>)
 8001182:	4296      	cmp	r6, r2
 8001184:	d100      	bne.n	8001188 <__aeabi_dsub+0x64>
 8001186:	e28b      	b.n	80016a0 <__aeabi_dsub+0x57c>
 8001188:	2280      	movs	r2, #128	; 0x80
 800118a:	0412      	lsls	r2, r2, #16
 800118c:	4311      	orrs	r1, r2
 800118e:	4662      	mov	r2, ip
 8001190:	2a38      	cmp	r2, #56	; 0x38
 8001192:	dd00      	ble.n	8001196 <__aeabi_dsub+0x72>
 8001194:	e1a1      	b.n	80014da <__aeabi_dsub+0x3b6>
 8001196:	2a1f      	cmp	r2, #31
 8001198:	dd00      	ble.n	800119c <__aeabi_dsub+0x78>
 800119a:	e216      	b.n	80015ca <__aeabi_dsub+0x4a6>
 800119c:	2720      	movs	r7, #32
 800119e:	000c      	movs	r4, r1
 80011a0:	1abf      	subs	r7, r7, r2
 80011a2:	40bc      	lsls	r4, r7
 80011a4:	0002      	movs	r2, r0
 80011a6:	46a0      	mov	r8, r4
 80011a8:	4664      	mov	r4, ip
 80011aa:	40b8      	lsls	r0, r7
 80011ac:	40e2      	lsrs	r2, r4
 80011ae:	4644      	mov	r4, r8
 80011b0:	4314      	orrs	r4, r2
 80011b2:	0002      	movs	r2, r0
 80011b4:	1e50      	subs	r0, r2, #1
 80011b6:	4182      	sbcs	r2, r0
 80011b8:	4660      	mov	r0, ip
 80011ba:	40c1      	lsrs	r1, r0
 80011bc:	4322      	orrs	r2, r4
 80011be:	1a5b      	subs	r3, r3, r1
 80011c0:	4649      	mov	r1, r9
 80011c2:	1a8c      	subs	r4, r1, r2
 80011c4:	45a1      	cmp	r9, r4
 80011c6:	4192      	sbcs	r2, r2
 80011c8:	4252      	negs	r2, r2
 80011ca:	1a9b      	subs	r3, r3, r2
 80011cc:	4698      	mov	r8, r3
 80011ce:	4643      	mov	r3, r8
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	d400      	bmi.n	80011d6 <__aeabi_dsub+0xb2>
 80011d4:	e117      	b.n	8001406 <__aeabi_dsub+0x2e2>
 80011d6:	4643      	mov	r3, r8
 80011d8:	025b      	lsls	r3, r3, #9
 80011da:	0a5b      	lsrs	r3, r3, #9
 80011dc:	4698      	mov	r8, r3
 80011de:	4643      	mov	r3, r8
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d100      	bne.n	80011e6 <__aeabi_dsub+0xc2>
 80011e4:	e16c      	b.n	80014c0 <__aeabi_dsub+0x39c>
 80011e6:	4640      	mov	r0, r8
 80011e8:	f000 fc98 	bl	8001b1c <__clzsi2>
 80011ec:	0002      	movs	r2, r0
 80011ee:	3a08      	subs	r2, #8
 80011f0:	2120      	movs	r1, #32
 80011f2:	0020      	movs	r0, r4
 80011f4:	4643      	mov	r3, r8
 80011f6:	1a89      	subs	r1, r1, r2
 80011f8:	4093      	lsls	r3, r2
 80011fa:	40c8      	lsrs	r0, r1
 80011fc:	4094      	lsls	r4, r2
 80011fe:	4303      	orrs	r3, r0
 8001200:	4296      	cmp	r6, r2
 8001202:	dd00      	ble.n	8001206 <__aeabi_dsub+0xe2>
 8001204:	e157      	b.n	80014b6 <__aeabi_dsub+0x392>
 8001206:	1b96      	subs	r6, r2, r6
 8001208:	1c71      	adds	r1, r6, #1
 800120a:	291f      	cmp	r1, #31
 800120c:	dd00      	ble.n	8001210 <__aeabi_dsub+0xec>
 800120e:	e1cb      	b.n	80015a8 <__aeabi_dsub+0x484>
 8001210:	2220      	movs	r2, #32
 8001212:	0018      	movs	r0, r3
 8001214:	0026      	movs	r6, r4
 8001216:	1a52      	subs	r2, r2, r1
 8001218:	4094      	lsls	r4, r2
 800121a:	4090      	lsls	r0, r2
 800121c:	40ce      	lsrs	r6, r1
 800121e:	40cb      	lsrs	r3, r1
 8001220:	1e62      	subs	r2, r4, #1
 8001222:	4194      	sbcs	r4, r2
 8001224:	4330      	orrs	r0, r6
 8001226:	4698      	mov	r8, r3
 8001228:	2600      	movs	r6, #0
 800122a:	4304      	orrs	r4, r0
 800122c:	0763      	lsls	r3, r4, #29
 800122e:	d009      	beq.n	8001244 <__aeabi_dsub+0x120>
 8001230:	230f      	movs	r3, #15
 8001232:	4023      	ands	r3, r4
 8001234:	2b04      	cmp	r3, #4
 8001236:	d005      	beq.n	8001244 <__aeabi_dsub+0x120>
 8001238:	1d23      	adds	r3, r4, #4
 800123a:	42a3      	cmp	r3, r4
 800123c:	41a4      	sbcs	r4, r4
 800123e:	4264      	negs	r4, r4
 8001240:	44a0      	add	r8, r4
 8001242:	001c      	movs	r4, r3
 8001244:	4643      	mov	r3, r8
 8001246:	021b      	lsls	r3, r3, #8
 8001248:	d400      	bmi.n	800124c <__aeabi_dsub+0x128>
 800124a:	e0df      	b.n	800140c <__aeabi_dsub+0x2e8>
 800124c:	4b82      	ldr	r3, [pc, #520]	; (8001458 <__aeabi_dsub+0x334>)
 800124e:	3601      	adds	r6, #1
 8001250:	429e      	cmp	r6, r3
 8001252:	d100      	bne.n	8001256 <__aeabi_dsub+0x132>
 8001254:	e0fb      	b.n	800144e <__aeabi_dsub+0x32a>
 8001256:	4642      	mov	r2, r8
 8001258:	4b80      	ldr	r3, [pc, #512]	; (800145c <__aeabi_dsub+0x338>)
 800125a:	08e4      	lsrs	r4, r4, #3
 800125c:	401a      	ands	r2, r3
 800125e:	0013      	movs	r3, r2
 8001260:	0571      	lsls	r1, r6, #21
 8001262:	0752      	lsls	r2, r2, #29
 8001264:	025b      	lsls	r3, r3, #9
 8001266:	4322      	orrs	r2, r4
 8001268:	0b1b      	lsrs	r3, r3, #12
 800126a:	0d49      	lsrs	r1, r1, #21
 800126c:	0509      	lsls	r1, r1, #20
 800126e:	07ed      	lsls	r5, r5, #31
 8001270:	4319      	orrs	r1, r3
 8001272:	4329      	orrs	r1, r5
 8001274:	0010      	movs	r0, r2
 8001276:	bcf0      	pop	{r4, r5, r6, r7}
 8001278:	46bb      	mov	fp, r7
 800127a:	46b2      	mov	sl, r6
 800127c:	46a9      	mov	r9, r5
 800127e:	46a0      	mov	r8, r4
 8001280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001282:	1ab4      	subs	r4, r6, r2
 8001284:	46a4      	mov	ip, r4
 8001286:	2c00      	cmp	r4, #0
 8001288:	dd58      	ble.n	800133c <__aeabi_dsub+0x218>
 800128a:	2a00      	cmp	r2, #0
 800128c:	d100      	bne.n	8001290 <__aeabi_dsub+0x16c>
 800128e:	e09e      	b.n	80013ce <__aeabi_dsub+0x2aa>
 8001290:	4a71      	ldr	r2, [pc, #452]	; (8001458 <__aeabi_dsub+0x334>)
 8001292:	4296      	cmp	r6, r2
 8001294:	d100      	bne.n	8001298 <__aeabi_dsub+0x174>
 8001296:	e13b      	b.n	8001510 <__aeabi_dsub+0x3ec>
 8001298:	2280      	movs	r2, #128	; 0x80
 800129a:	0412      	lsls	r2, r2, #16
 800129c:	4311      	orrs	r1, r2
 800129e:	4662      	mov	r2, ip
 80012a0:	2a38      	cmp	r2, #56	; 0x38
 80012a2:	dd00      	ble.n	80012a6 <__aeabi_dsub+0x182>
 80012a4:	e0c1      	b.n	800142a <__aeabi_dsub+0x306>
 80012a6:	2a1f      	cmp	r2, #31
 80012a8:	dc00      	bgt.n	80012ac <__aeabi_dsub+0x188>
 80012aa:	e1bb      	b.n	8001624 <__aeabi_dsub+0x500>
 80012ac:	000c      	movs	r4, r1
 80012ae:	3a20      	subs	r2, #32
 80012b0:	40d4      	lsrs	r4, r2
 80012b2:	0022      	movs	r2, r4
 80012b4:	4664      	mov	r4, ip
 80012b6:	2c20      	cmp	r4, #32
 80012b8:	d004      	beq.n	80012c4 <__aeabi_dsub+0x1a0>
 80012ba:	2740      	movs	r7, #64	; 0x40
 80012bc:	1b3f      	subs	r7, r7, r4
 80012be:	40b9      	lsls	r1, r7
 80012c0:	4308      	orrs	r0, r1
 80012c2:	4680      	mov	r8, r0
 80012c4:	4644      	mov	r4, r8
 80012c6:	1e61      	subs	r1, r4, #1
 80012c8:	418c      	sbcs	r4, r1
 80012ca:	4314      	orrs	r4, r2
 80012cc:	e0b1      	b.n	8001432 <__aeabi_dsub+0x30e>
 80012ce:	000c      	movs	r4, r1
 80012d0:	4304      	orrs	r4, r0
 80012d2:	d02a      	beq.n	800132a <__aeabi_dsub+0x206>
 80012d4:	46bb      	mov	fp, r7
 80012d6:	42bd      	cmp	r5, r7
 80012d8:	d02d      	beq.n	8001336 <__aeabi_dsub+0x212>
 80012da:	4c61      	ldr	r4, [pc, #388]	; (8001460 <__aeabi_dsub+0x33c>)
 80012dc:	46a4      	mov	ip, r4
 80012de:	44b4      	add	ip, r6
 80012e0:	4664      	mov	r4, ip
 80012e2:	2c00      	cmp	r4, #0
 80012e4:	d05c      	beq.n	80013a0 <__aeabi_dsub+0x27c>
 80012e6:	1b94      	subs	r4, r2, r6
 80012e8:	46a4      	mov	ip, r4
 80012ea:	2e00      	cmp	r6, #0
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dsub+0x1cc>
 80012ee:	e115      	b.n	800151c <__aeabi_dsub+0x3f8>
 80012f0:	464d      	mov	r5, r9
 80012f2:	431d      	orrs	r5, r3
 80012f4:	d100      	bne.n	80012f8 <__aeabi_dsub+0x1d4>
 80012f6:	e1c3      	b.n	8001680 <__aeabi_dsub+0x55c>
 80012f8:	1e65      	subs	r5, r4, #1
 80012fa:	2c01      	cmp	r4, #1
 80012fc:	d100      	bne.n	8001300 <__aeabi_dsub+0x1dc>
 80012fe:	e20c      	b.n	800171a <__aeabi_dsub+0x5f6>
 8001300:	4e55      	ldr	r6, [pc, #340]	; (8001458 <__aeabi_dsub+0x334>)
 8001302:	42b4      	cmp	r4, r6
 8001304:	d100      	bne.n	8001308 <__aeabi_dsub+0x1e4>
 8001306:	e1f8      	b.n	80016fa <__aeabi_dsub+0x5d6>
 8001308:	46ac      	mov	ip, r5
 800130a:	e10e      	b.n	800152a <__aeabi_dsub+0x406>
 800130c:	000a      	movs	r2, r1
 800130e:	4302      	orrs	r2, r0
 8001310:	d100      	bne.n	8001314 <__aeabi_dsub+0x1f0>
 8001312:	e136      	b.n	8001582 <__aeabi_dsub+0x45e>
 8001314:	0022      	movs	r2, r4
 8001316:	3a01      	subs	r2, #1
 8001318:	2c01      	cmp	r4, #1
 800131a:	d100      	bne.n	800131e <__aeabi_dsub+0x1fa>
 800131c:	e1c6      	b.n	80016ac <__aeabi_dsub+0x588>
 800131e:	4c4e      	ldr	r4, [pc, #312]	; (8001458 <__aeabi_dsub+0x334>)
 8001320:	45a4      	cmp	ip, r4
 8001322:	d100      	bne.n	8001326 <__aeabi_dsub+0x202>
 8001324:	e0f4      	b.n	8001510 <__aeabi_dsub+0x3ec>
 8001326:	4694      	mov	ip, r2
 8001328:	e731      	b.n	800118e <__aeabi_dsub+0x6a>
 800132a:	2401      	movs	r4, #1
 800132c:	4067      	eors	r7, r4
 800132e:	46bb      	mov	fp, r7
 8001330:	42bd      	cmp	r5, r7
 8001332:	d000      	beq.n	8001336 <__aeabi_dsub+0x212>
 8001334:	e71c      	b.n	8001170 <__aeabi_dsub+0x4c>
 8001336:	4c4a      	ldr	r4, [pc, #296]	; (8001460 <__aeabi_dsub+0x33c>)
 8001338:	46a4      	mov	ip, r4
 800133a:	44b4      	add	ip, r6
 800133c:	4664      	mov	r4, ip
 800133e:	2c00      	cmp	r4, #0
 8001340:	d100      	bne.n	8001344 <__aeabi_dsub+0x220>
 8001342:	e0cf      	b.n	80014e4 <__aeabi_dsub+0x3c0>
 8001344:	1b94      	subs	r4, r2, r6
 8001346:	46a4      	mov	ip, r4
 8001348:	2e00      	cmp	r6, #0
 800134a:	d100      	bne.n	800134e <__aeabi_dsub+0x22a>
 800134c:	e15c      	b.n	8001608 <__aeabi_dsub+0x4e4>
 800134e:	4e42      	ldr	r6, [pc, #264]	; (8001458 <__aeabi_dsub+0x334>)
 8001350:	42b2      	cmp	r2, r6
 8001352:	d100      	bne.n	8001356 <__aeabi_dsub+0x232>
 8001354:	e1ec      	b.n	8001730 <__aeabi_dsub+0x60c>
 8001356:	2680      	movs	r6, #128	; 0x80
 8001358:	0436      	lsls	r6, r6, #16
 800135a:	4333      	orrs	r3, r6
 800135c:	4664      	mov	r4, ip
 800135e:	2c38      	cmp	r4, #56	; 0x38
 8001360:	dd00      	ble.n	8001364 <__aeabi_dsub+0x240>
 8001362:	e1b3      	b.n	80016cc <__aeabi_dsub+0x5a8>
 8001364:	2c1f      	cmp	r4, #31
 8001366:	dd00      	ble.n	800136a <__aeabi_dsub+0x246>
 8001368:	e238      	b.n	80017dc <__aeabi_dsub+0x6b8>
 800136a:	2620      	movs	r6, #32
 800136c:	1b36      	subs	r6, r6, r4
 800136e:	001c      	movs	r4, r3
 8001370:	40b4      	lsls	r4, r6
 8001372:	464f      	mov	r7, r9
 8001374:	46a0      	mov	r8, r4
 8001376:	4664      	mov	r4, ip
 8001378:	40e7      	lsrs	r7, r4
 800137a:	4644      	mov	r4, r8
 800137c:	433c      	orrs	r4, r7
 800137e:	464f      	mov	r7, r9
 8001380:	40b7      	lsls	r7, r6
 8001382:	003e      	movs	r6, r7
 8001384:	1e77      	subs	r7, r6, #1
 8001386:	41be      	sbcs	r6, r7
 8001388:	4334      	orrs	r4, r6
 800138a:	4666      	mov	r6, ip
 800138c:	40f3      	lsrs	r3, r6
 800138e:	18c9      	adds	r1, r1, r3
 8001390:	1824      	adds	r4, r4, r0
 8001392:	4284      	cmp	r4, r0
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	4698      	mov	r8, r3
 800139a:	0016      	movs	r6, r2
 800139c:	4488      	add	r8, r1
 800139e:	e04e      	b.n	800143e <__aeabi_dsub+0x31a>
 80013a0:	4a30      	ldr	r2, [pc, #192]	; (8001464 <__aeabi_dsub+0x340>)
 80013a2:	1c74      	adds	r4, r6, #1
 80013a4:	4214      	tst	r4, r2
 80013a6:	d000      	beq.n	80013aa <__aeabi_dsub+0x286>
 80013a8:	e0d6      	b.n	8001558 <__aeabi_dsub+0x434>
 80013aa:	464a      	mov	r2, r9
 80013ac:	431a      	orrs	r2, r3
 80013ae:	2e00      	cmp	r6, #0
 80013b0:	d000      	beq.n	80013b4 <__aeabi_dsub+0x290>
 80013b2:	e15b      	b.n	800166c <__aeabi_dsub+0x548>
 80013b4:	2a00      	cmp	r2, #0
 80013b6:	d100      	bne.n	80013ba <__aeabi_dsub+0x296>
 80013b8:	e1a5      	b.n	8001706 <__aeabi_dsub+0x5e2>
 80013ba:	000a      	movs	r2, r1
 80013bc:	4302      	orrs	r2, r0
 80013be:	d000      	beq.n	80013c2 <__aeabi_dsub+0x29e>
 80013c0:	e1bb      	b.n	800173a <__aeabi_dsub+0x616>
 80013c2:	464a      	mov	r2, r9
 80013c4:	0759      	lsls	r1, r3, #29
 80013c6:	08d2      	lsrs	r2, r2, #3
 80013c8:	430a      	orrs	r2, r1
 80013ca:	08db      	lsrs	r3, r3, #3
 80013cc:	e027      	b.n	800141e <__aeabi_dsub+0x2fa>
 80013ce:	000a      	movs	r2, r1
 80013d0:	4302      	orrs	r2, r0
 80013d2:	d100      	bne.n	80013d6 <__aeabi_dsub+0x2b2>
 80013d4:	e174      	b.n	80016c0 <__aeabi_dsub+0x59c>
 80013d6:	0022      	movs	r2, r4
 80013d8:	3a01      	subs	r2, #1
 80013da:	2c01      	cmp	r4, #1
 80013dc:	d005      	beq.n	80013ea <__aeabi_dsub+0x2c6>
 80013de:	4c1e      	ldr	r4, [pc, #120]	; (8001458 <__aeabi_dsub+0x334>)
 80013e0:	45a4      	cmp	ip, r4
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dsub+0x2c2>
 80013e4:	e094      	b.n	8001510 <__aeabi_dsub+0x3ec>
 80013e6:	4694      	mov	ip, r2
 80013e8:	e759      	b.n	800129e <__aeabi_dsub+0x17a>
 80013ea:	4448      	add	r0, r9
 80013ec:	4548      	cmp	r0, r9
 80013ee:	4192      	sbcs	r2, r2
 80013f0:	185b      	adds	r3, r3, r1
 80013f2:	4698      	mov	r8, r3
 80013f4:	0004      	movs	r4, r0
 80013f6:	4252      	negs	r2, r2
 80013f8:	4490      	add	r8, r2
 80013fa:	4643      	mov	r3, r8
 80013fc:	2602      	movs	r6, #2
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	d500      	bpl.n	8001404 <__aeabi_dsub+0x2e0>
 8001402:	e0c4      	b.n	800158e <__aeabi_dsub+0x46a>
 8001404:	3e01      	subs	r6, #1
 8001406:	0763      	lsls	r3, r4, #29
 8001408:	d000      	beq.n	800140c <__aeabi_dsub+0x2e8>
 800140a:	e711      	b.n	8001230 <__aeabi_dsub+0x10c>
 800140c:	4643      	mov	r3, r8
 800140e:	46b4      	mov	ip, r6
 8001410:	0759      	lsls	r1, r3, #29
 8001412:	08e2      	lsrs	r2, r4, #3
 8001414:	430a      	orrs	r2, r1
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	490f      	ldr	r1, [pc, #60]	; (8001458 <__aeabi_dsub+0x334>)
 800141a:	458c      	cmp	ip, r1
 800141c:	d040      	beq.n	80014a0 <__aeabi_dsub+0x37c>
 800141e:	4661      	mov	r1, ip
 8001420:	031b      	lsls	r3, r3, #12
 8001422:	0549      	lsls	r1, r1, #21
 8001424:	0b1b      	lsrs	r3, r3, #12
 8001426:	0d49      	lsrs	r1, r1, #21
 8001428:	e720      	b.n	800126c <__aeabi_dsub+0x148>
 800142a:	4301      	orrs	r1, r0
 800142c:	000c      	movs	r4, r1
 800142e:	1e61      	subs	r1, r4, #1
 8001430:	418c      	sbcs	r4, r1
 8001432:	444c      	add	r4, r9
 8001434:	454c      	cmp	r4, r9
 8001436:	4192      	sbcs	r2, r2
 8001438:	4252      	negs	r2, r2
 800143a:	4690      	mov	r8, r2
 800143c:	4498      	add	r8, r3
 800143e:	4643      	mov	r3, r8
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	d5e0      	bpl.n	8001406 <__aeabi_dsub+0x2e2>
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <__aeabi_dsub+0x334>)
 8001446:	3601      	adds	r6, #1
 8001448:	429e      	cmp	r6, r3
 800144a:	d000      	beq.n	800144e <__aeabi_dsub+0x32a>
 800144c:	e09f      	b.n	800158e <__aeabi_dsub+0x46a>
 800144e:	0031      	movs	r1, r6
 8001450:	2300      	movs	r3, #0
 8001452:	2200      	movs	r2, #0
 8001454:	e70a      	b.n	800126c <__aeabi_dsub+0x148>
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	000007ff 	.word	0x000007ff
 800145c:	ff7fffff 	.word	0xff7fffff
 8001460:	fffff801 	.word	0xfffff801
 8001464:	000007fe 	.word	0x000007fe
 8001468:	2a00      	cmp	r2, #0
 800146a:	d100      	bne.n	800146e <__aeabi_dsub+0x34a>
 800146c:	e160      	b.n	8001730 <__aeabi_dsub+0x60c>
 800146e:	000a      	movs	r2, r1
 8001470:	4302      	orrs	r2, r0
 8001472:	d04d      	beq.n	8001510 <__aeabi_dsub+0x3ec>
 8001474:	464a      	mov	r2, r9
 8001476:	075c      	lsls	r4, r3, #29
 8001478:	08d2      	lsrs	r2, r2, #3
 800147a:	4322      	orrs	r2, r4
 800147c:	2480      	movs	r4, #128	; 0x80
 800147e:	08db      	lsrs	r3, r3, #3
 8001480:	0324      	lsls	r4, r4, #12
 8001482:	4223      	tst	r3, r4
 8001484:	d007      	beq.n	8001496 <__aeabi_dsub+0x372>
 8001486:	08ce      	lsrs	r6, r1, #3
 8001488:	4226      	tst	r6, r4
 800148a:	d104      	bne.n	8001496 <__aeabi_dsub+0x372>
 800148c:	465d      	mov	r5, fp
 800148e:	0033      	movs	r3, r6
 8001490:	08c2      	lsrs	r2, r0, #3
 8001492:	0749      	lsls	r1, r1, #29
 8001494:	430a      	orrs	r2, r1
 8001496:	0f51      	lsrs	r1, r2, #29
 8001498:	00d2      	lsls	r2, r2, #3
 800149a:	08d2      	lsrs	r2, r2, #3
 800149c:	0749      	lsls	r1, r1, #29
 800149e:	430a      	orrs	r2, r1
 80014a0:	0011      	movs	r1, r2
 80014a2:	4319      	orrs	r1, r3
 80014a4:	d100      	bne.n	80014a8 <__aeabi_dsub+0x384>
 80014a6:	e1c8      	b.n	800183a <__aeabi_dsub+0x716>
 80014a8:	2180      	movs	r1, #128	; 0x80
 80014aa:	0309      	lsls	r1, r1, #12
 80014ac:	430b      	orrs	r3, r1
 80014ae:	031b      	lsls	r3, r3, #12
 80014b0:	49d5      	ldr	r1, [pc, #852]	; (8001808 <__aeabi_dsub+0x6e4>)
 80014b2:	0b1b      	lsrs	r3, r3, #12
 80014b4:	e6da      	b.n	800126c <__aeabi_dsub+0x148>
 80014b6:	49d5      	ldr	r1, [pc, #852]	; (800180c <__aeabi_dsub+0x6e8>)
 80014b8:	1ab6      	subs	r6, r6, r2
 80014ba:	400b      	ands	r3, r1
 80014bc:	4698      	mov	r8, r3
 80014be:	e6b5      	b.n	800122c <__aeabi_dsub+0x108>
 80014c0:	0020      	movs	r0, r4
 80014c2:	f000 fb2b 	bl	8001b1c <__clzsi2>
 80014c6:	0002      	movs	r2, r0
 80014c8:	3218      	adds	r2, #24
 80014ca:	2a1f      	cmp	r2, #31
 80014cc:	dc00      	bgt.n	80014d0 <__aeabi_dsub+0x3ac>
 80014ce:	e68f      	b.n	80011f0 <__aeabi_dsub+0xcc>
 80014d0:	0023      	movs	r3, r4
 80014d2:	3808      	subs	r0, #8
 80014d4:	4083      	lsls	r3, r0
 80014d6:	2400      	movs	r4, #0
 80014d8:	e692      	b.n	8001200 <__aeabi_dsub+0xdc>
 80014da:	4308      	orrs	r0, r1
 80014dc:	0002      	movs	r2, r0
 80014de:	1e50      	subs	r0, r2, #1
 80014e0:	4182      	sbcs	r2, r0
 80014e2:	e66d      	b.n	80011c0 <__aeabi_dsub+0x9c>
 80014e4:	4cca      	ldr	r4, [pc, #808]	; (8001810 <__aeabi_dsub+0x6ec>)
 80014e6:	1c72      	adds	r2, r6, #1
 80014e8:	4222      	tst	r2, r4
 80014ea:	d000      	beq.n	80014ee <__aeabi_dsub+0x3ca>
 80014ec:	e0ad      	b.n	800164a <__aeabi_dsub+0x526>
 80014ee:	464a      	mov	r2, r9
 80014f0:	431a      	orrs	r2, r3
 80014f2:	2e00      	cmp	r6, #0
 80014f4:	d1b8      	bne.n	8001468 <__aeabi_dsub+0x344>
 80014f6:	2a00      	cmp	r2, #0
 80014f8:	d100      	bne.n	80014fc <__aeabi_dsub+0x3d8>
 80014fa:	e158      	b.n	80017ae <__aeabi_dsub+0x68a>
 80014fc:	000a      	movs	r2, r1
 80014fe:	4302      	orrs	r2, r0
 8001500:	d000      	beq.n	8001504 <__aeabi_dsub+0x3e0>
 8001502:	e159      	b.n	80017b8 <__aeabi_dsub+0x694>
 8001504:	464a      	mov	r2, r9
 8001506:	0759      	lsls	r1, r3, #29
 8001508:	08d2      	lsrs	r2, r2, #3
 800150a:	430a      	orrs	r2, r1
 800150c:	08db      	lsrs	r3, r3, #3
 800150e:	e786      	b.n	800141e <__aeabi_dsub+0x2fa>
 8001510:	464a      	mov	r2, r9
 8001512:	0759      	lsls	r1, r3, #29
 8001514:	08d2      	lsrs	r2, r2, #3
 8001516:	430a      	orrs	r2, r1
 8001518:	08db      	lsrs	r3, r3, #3
 800151a:	e7c1      	b.n	80014a0 <__aeabi_dsub+0x37c>
 800151c:	4dba      	ldr	r5, [pc, #744]	; (8001808 <__aeabi_dsub+0x6e4>)
 800151e:	42aa      	cmp	r2, r5
 8001520:	d100      	bne.n	8001524 <__aeabi_dsub+0x400>
 8001522:	e11e      	b.n	8001762 <__aeabi_dsub+0x63e>
 8001524:	2580      	movs	r5, #128	; 0x80
 8001526:	042d      	lsls	r5, r5, #16
 8001528:	432b      	orrs	r3, r5
 800152a:	4664      	mov	r4, ip
 800152c:	2c38      	cmp	r4, #56	; 0x38
 800152e:	dc5d      	bgt.n	80015ec <__aeabi_dsub+0x4c8>
 8001530:	2c1f      	cmp	r4, #31
 8001532:	dd00      	ble.n	8001536 <__aeabi_dsub+0x412>
 8001534:	e0d0      	b.n	80016d8 <__aeabi_dsub+0x5b4>
 8001536:	2520      	movs	r5, #32
 8001538:	4667      	mov	r7, ip
 800153a:	1b2d      	subs	r5, r5, r4
 800153c:	464e      	mov	r6, r9
 800153e:	001c      	movs	r4, r3
 8001540:	40fe      	lsrs	r6, r7
 8001542:	40ac      	lsls	r4, r5
 8001544:	4334      	orrs	r4, r6
 8001546:	464e      	mov	r6, r9
 8001548:	40ae      	lsls	r6, r5
 800154a:	0035      	movs	r5, r6
 800154c:	40fb      	lsrs	r3, r7
 800154e:	1e6e      	subs	r6, r5, #1
 8001550:	41b5      	sbcs	r5, r6
 8001552:	1ac9      	subs	r1, r1, r3
 8001554:	432c      	orrs	r4, r5
 8001556:	e04e      	b.n	80015f6 <__aeabi_dsub+0x4d2>
 8001558:	464a      	mov	r2, r9
 800155a:	1a14      	subs	r4, r2, r0
 800155c:	45a1      	cmp	r9, r4
 800155e:	4192      	sbcs	r2, r2
 8001560:	4252      	negs	r2, r2
 8001562:	4690      	mov	r8, r2
 8001564:	1a5f      	subs	r7, r3, r1
 8001566:	003a      	movs	r2, r7
 8001568:	4647      	mov	r7, r8
 800156a:	1bd2      	subs	r2, r2, r7
 800156c:	4690      	mov	r8, r2
 800156e:	0212      	lsls	r2, r2, #8
 8001570:	d500      	bpl.n	8001574 <__aeabi_dsub+0x450>
 8001572:	e08b      	b.n	800168c <__aeabi_dsub+0x568>
 8001574:	4642      	mov	r2, r8
 8001576:	4322      	orrs	r2, r4
 8001578:	d000      	beq.n	800157c <__aeabi_dsub+0x458>
 800157a:	e630      	b.n	80011de <__aeabi_dsub+0xba>
 800157c:	2300      	movs	r3, #0
 800157e:	2500      	movs	r5, #0
 8001580:	e74d      	b.n	800141e <__aeabi_dsub+0x2fa>
 8001582:	464a      	mov	r2, r9
 8001584:	0759      	lsls	r1, r3, #29
 8001586:	08d2      	lsrs	r2, r2, #3
 8001588:	430a      	orrs	r2, r1
 800158a:	08db      	lsrs	r3, r3, #3
 800158c:	e744      	b.n	8001418 <__aeabi_dsub+0x2f4>
 800158e:	4642      	mov	r2, r8
 8001590:	4b9e      	ldr	r3, [pc, #632]	; (800180c <__aeabi_dsub+0x6e8>)
 8001592:	0861      	lsrs	r1, r4, #1
 8001594:	401a      	ands	r2, r3
 8001596:	0013      	movs	r3, r2
 8001598:	2201      	movs	r2, #1
 800159a:	4014      	ands	r4, r2
 800159c:	430c      	orrs	r4, r1
 800159e:	07da      	lsls	r2, r3, #31
 80015a0:	085b      	lsrs	r3, r3, #1
 80015a2:	4698      	mov	r8, r3
 80015a4:	4314      	orrs	r4, r2
 80015a6:	e641      	b.n	800122c <__aeabi_dsub+0x108>
 80015a8:	001a      	movs	r2, r3
 80015aa:	3e1f      	subs	r6, #31
 80015ac:	40f2      	lsrs	r2, r6
 80015ae:	0016      	movs	r6, r2
 80015b0:	2920      	cmp	r1, #32
 80015b2:	d003      	beq.n	80015bc <__aeabi_dsub+0x498>
 80015b4:	2240      	movs	r2, #64	; 0x40
 80015b6:	1a51      	subs	r1, r2, r1
 80015b8:	408b      	lsls	r3, r1
 80015ba:	431c      	orrs	r4, r3
 80015bc:	1e62      	subs	r2, r4, #1
 80015be:	4194      	sbcs	r4, r2
 80015c0:	2300      	movs	r3, #0
 80015c2:	4334      	orrs	r4, r6
 80015c4:	4698      	mov	r8, r3
 80015c6:	2600      	movs	r6, #0
 80015c8:	e71d      	b.n	8001406 <__aeabi_dsub+0x2e2>
 80015ca:	000c      	movs	r4, r1
 80015cc:	3a20      	subs	r2, #32
 80015ce:	40d4      	lsrs	r4, r2
 80015d0:	0022      	movs	r2, r4
 80015d2:	4664      	mov	r4, ip
 80015d4:	2c20      	cmp	r4, #32
 80015d6:	d004      	beq.n	80015e2 <__aeabi_dsub+0x4be>
 80015d8:	2740      	movs	r7, #64	; 0x40
 80015da:	1b3f      	subs	r7, r7, r4
 80015dc:	40b9      	lsls	r1, r7
 80015de:	4308      	orrs	r0, r1
 80015e0:	4680      	mov	r8, r0
 80015e2:	4644      	mov	r4, r8
 80015e4:	1e61      	subs	r1, r4, #1
 80015e6:	418c      	sbcs	r4, r1
 80015e8:	4322      	orrs	r2, r4
 80015ea:	e5e9      	b.n	80011c0 <__aeabi_dsub+0x9c>
 80015ec:	464c      	mov	r4, r9
 80015ee:	4323      	orrs	r3, r4
 80015f0:	001c      	movs	r4, r3
 80015f2:	1e63      	subs	r3, r4, #1
 80015f4:	419c      	sbcs	r4, r3
 80015f6:	1b04      	subs	r4, r0, r4
 80015f8:	42a0      	cmp	r0, r4
 80015fa:	419b      	sbcs	r3, r3
 80015fc:	425b      	negs	r3, r3
 80015fe:	1acb      	subs	r3, r1, r3
 8001600:	4698      	mov	r8, r3
 8001602:	465d      	mov	r5, fp
 8001604:	0016      	movs	r6, r2
 8001606:	e5e2      	b.n	80011ce <__aeabi_dsub+0xaa>
 8001608:	464e      	mov	r6, r9
 800160a:	431e      	orrs	r6, r3
 800160c:	d100      	bne.n	8001610 <__aeabi_dsub+0x4ec>
 800160e:	e0ae      	b.n	800176e <__aeabi_dsub+0x64a>
 8001610:	1e66      	subs	r6, r4, #1
 8001612:	2c01      	cmp	r4, #1
 8001614:	d100      	bne.n	8001618 <__aeabi_dsub+0x4f4>
 8001616:	e0fd      	b.n	8001814 <__aeabi_dsub+0x6f0>
 8001618:	4f7b      	ldr	r7, [pc, #492]	; (8001808 <__aeabi_dsub+0x6e4>)
 800161a:	42bc      	cmp	r4, r7
 800161c:	d100      	bne.n	8001620 <__aeabi_dsub+0x4fc>
 800161e:	e107      	b.n	8001830 <__aeabi_dsub+0x70c>
 8001620:	46b4      	mov	ip, r6
 8001622:	e69b      	b.n	800135c <__aeabi_dsub+0x238>
 8001624:	4664      	mov	r4, ip
 8001626:	2220      	movs	r2, #32
 8001628:	1b12      	subs	r2, r2, r4
 800162a:	000c      	movs	r4, r1
 800162c:	4094      	lsls	r4, r2
 800162e:	0007      	movs	r7, r0
 8001630:	4090      	lsls	r0, r2
 8001632:	46a0      	mov	r8, r4
 8001634:	4664      	mov	r4, ip
 8001636:	1e42      	subs	r2, r0, #1
 8001638:	4190      	sbcs	r0, r2
 800163a:	4662      	mov	r2, ip
 800163c:	40e7      	lsrs	r7, r4
 800163e:	4644      	mov	r4, r8
 8001640:	40d1      	lsrs	r1, r2
 8001642:	433c      	orrs	r4, r7
 8001644:	4304      	orrs	r4, r0
 8001646:	185b      	adds	r3, r3, r1
 8001648:	e6f3      	b.n	8001432 <__aeabi_dsub+0x30e>
 800164a:	4c6f      	ldr	r4, [pc, #444]	; (8001808 <__aeabi_dsub+0x6e4>)
 800164c:	42a2      	cmp	r2, r4
 800164e:	d100      	bne.n	8001652 <__aeabi_dsub+0x52e>
 8001650:	e0d5      	b.n	80017fe <__aeabi_dsub+0x6da>
 8001652:	4448      	add	r0, r9
 8001654:	185b      	adds	r3, r3, r1
 8001656:	4548      	cmp	r0, r9
 8001658:	4189      	sbcs	r1, r1
 800165a:	4249      	negs	r1, r1
 800165c:	185b      	adds	r3, r3, r1
 800165e:	07dc      	lsls	r4, r3, #31
 8001660:	0840      	lsrs	r0, r0, #1
 8001662:	085b      	lsrs	r3, r3, #1
 8001664:	4698      	mov	r8, r3
 8001666:	0016      	movs	r6, r2
 8001668:	4304      	orrs	r4, r0
 800166a:	e6cc      	b.n	8001406 <__aeabi_dsub+0x2e2>
 800166c:	2a00      	cmp	r2, #0
 800166e:	d000      	beq.n	8001672 <__aeabi_dsub+0x54e>
 8001670:	e082      	b.n	8001778 <__aeabi_dsub+0x654>
 8001672:	000a      	movs	r2, r1
 8001674:	4302      	orrs	r2, r0
 8001676:	d140      	bne.n	80016fa <__aeabi_dsub+0x5d6>
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	2500      	movs	r5, #0
 800167c:	031b      	lsls	r3, r3, #12
 800167e:	e713      	b.n	80014a8 <__aeabi_dsub+0x384>
 8001680:	074b      	lsls	r3, r1, #29
 8001682:	08c2      	lsrs	r2, r0, #3
 8001684:	431a      	orrs	r2, r3
 8001686:	465d      	mov	r5, fp
 8001688:	08cb      	lsrs	r3, r1, #3
 800168a:	e6c5      	b.n	8001418 <__aeabi_dsub+0x2f4>
 800168c:	464a      	mov	r2, r9
 800168e:	1a84      	subs	r4, r0, r2
 8001690:	42a0      	cmp	r0, r4
 8001692:	4192      	sbcs	r2, r2
 8001694:	1acb      	subs	r3, r1, r3
 8001696:	4252      	negs	r2, r2
 8001698:	1a9b      	subs	r3, r3, r2
 800169a:	4698      	mov	r8, r3
 800169c:	465d      	mov	r5, fp
 800169e:	e59e      	b.n	80011de <__aeabi_dsub+0xba>
 80016a0:	464a      	mov	r2, r9
 80016a2:	0759      	lsls	r1, r3, #29
 80016a4:	08d2      	lsrs	r2, r2, #3
 80016a6:	430a      	orrs	r2, r1
 80016a8:	08db      	lsrs	r3, r3, #3
 80016aa:	e6f9      	b.n	80014a0 <__aeabi_dsub+0x37c>
 80016ac:	464a      	mov	r2, r9
 80016ae:	1a14      	subs	r4, r2, r0
 80016b0:	45a1      	cmp	r9, r4
 80016b2:	4192      	sbcs	r2, r2
 80016b4:	1a5b      	subs	r3, r3, r1
 80016b6:	4252      	negs	r2, r2
 80016b8:	1a9b      	subs	r3, r3, r2
 80016ba:	4698      	mov	r8, r3
 80016bc:	2601      	movs	r6, #1
 80016be:	e586      	b.n	80011ce <__aeabi_dsub+0xaa>
 80016c0:	464a      	mov	r2, r9
 80016c2:	0759      	lsls	r1, r3, #29
 80016c4:	08d2      	lsrs	r2, r2, #3
 80016c6:	430a      	orrs	r2, r1
 80016c8:	08db      	lsrs	r3, r3, #3
 80016ca:	e6a5      	b.n	8001418 <__aeabi_dsub+0x2f4>
 80016cc:	464c      	mov	r4, r9
 80016ce:	4323      	orrs	r3, r4
 80016d0:	001c      	movs	r4, r3
 80016d2:	1e63      	subs	r3, r4, #1
 80016d4:	419c      	sbcs	r4, r3
 80016d6:	e65b      	b.n	8001390 <__aeabi_dsub+0x26c>
 80016d8:	4665      	mov	r5, ip
 80016da:	001e      	movs	r6, r3
 80016dc:	3d20      	subs	r5, #32
 80016de:	40ee      	lsrs	r6, r5
 80016e0:	2c20      	cmp	r4, #32
 80016e2:	d005      	beq.n	80016f0 <__aeabi_dsub+0x5cc>
 80016e4:	2540      	movs	r5, #64	; 0x40
 80016e6:	1b2d      	subs	r5, r5, r4
 80016e8:	40ab      	lsls	r3, r5
 80016ea:	464c      	mov	r4, r9
 80016ec:	431c      	orrs	r4, r3
 80016ee:	46a2      	mov	sl, r4
 80016f0:	4654      	mov	r4, sl
 80016f2:	1e63      	subs	r3, r4, #1
 80016f4:	419c      	sbcs	r4, r3
 80016f6:	4334      	orrs	r4, r6
 80016f8:	e77d      	b.n	80015f6 <__aeabi_dsub+0x4d2>
 80016fa:	074b      	lsls	r3, r1, #29
 80016fc:	08c2      	lsrs	r2, r0, #3
 80016fe:	431a      	orrs	r2, r3
 8001700:	465d      	mov	r5, fp
 8001702:	08cb      	lsrs	r3, r1, #3
 8001704:	e6cc      	b.n	80014a0 <__aeabi_dsub+0x37c>
 8001706:	000a      	movs	r2, r1
 8001708:	4302      	orrs	r2, r0
 800170a:	d100      	bne.n	800170e <__aeabi_dsub+0x5ea>
 800170c:	e736      	b.n	800157c <__aeabi_dsub+0x458>
 800170e:	074b      	lsls	r3, r1, #29
 8001710:	08c2      	lsrs	r2, r0, #3
 8001712:	431a      	orrs	r2, r3
 8001714:	465d      	mov	r5, fp
 8001716:	08cb      	lsrs	r3, r1, #3
 8001718:	e681      	b.n	800141e <__aeabi_dsub+0x2fa>
 800171a:	464a      	mov	r2, r9
 800171c:	1a84      	subs	r4, r0, r2
 800171e:	42a0      	cmp	r0, r4
 8001720:	4192      	sbcs	r2, r2
 8001722:	1acb      	subs	r3, r1, r3
 8001724:	4252      	negs	r2, r2
 8001726:	1a9b      	subs	r3, r3, r2
 8001728:	4698      	mov	r8, r3
 800172a:	465d      	mov	r5, fp
 800172c:	2601      	movs	r6, #1
 800172e:	e54e      	b.n	80011ce <__aeabi_dsub+0xaa>
 8001730:	074b      	lsls	r3, r1, #29
 8001732:	08c2      	lsrs	r2, r0, #3
 8001734:	431a      	orrs	r2, r3
 8001736:	08cb      	lsrs	r3, r1, #3
 8001738:	e6b2      	b.n	80014a0 <__aeabi_dsub+0x37c>
 800173a:	464a      	mov	r2, r9
 800173c:	1a14      	subs	r4, r2, r0
 800173e:	45a1      	cmp	r9, r4
 8001740:	4192      	sbcs	r2, r2
 8001742:	1a5f      	subs	r7, r3, r1
 8001744:	4252      	negs	r2, r2
 8001746:	1aba      	subs	r2, r7, r2
 8001748:	4690      	mov	r8, r2
 800174a:	0212      	lsls	r2, r2, #8
 800174c:	d56b      	bpl.n	8001826 <__aeabi_dsub+0x702>
 800174e:	464a      	mov	r2, r9
 8001750:	1a84      	subs	r4, r0, r2
 8001752:	42a0      	cmp	r0, r4
 8001754:	4192      	sbcs	r2, r2
 8001756:	1acb      	subs	r3, r1, r3
 8001758:	4252      	negs	r2, r2
 800175a:	1a9b      	subs	r3, r3, r2
 800175c:	4698      	mov	r8, r3
 800175e:	465d      	mov	r5, fp
 8001760:	e564      	b.n	800122c <__aeabi_dsub+0x108>
 8001762:	074b      	lsls	r3, r1, #29
 8001764:	08c2      	lsrs	r2, r0, #3
 8001766:	431a      	orrs	r2, r3
 8001768:	465d      	mov	r5, fp
 800176a:	08cb      	lsrs	r3, r1, #3
 800176c:	e698      	b.n	80014a0 <__aeabi_dsub+0x37c>
 800176e:	074b      	lsls	r3, r1, #29
 8001770:	08c2      	lsrs	r2, r0, #3
 8001772:	431a      	orrs	r2, r3
 8001774:	08cb      	lsrs	r3, r1, #3
 8001776:	e64f      	b.n	8001418 <__aeabi_dsub+0x2f4>
 8001778:	000a      	movs	r2, r1
 800177a:	4302      	orrs	r2, r0
 800177c:	d090      	beq.n	80016a0 <__aeabi_dsub+0x57c>
 800177e:	464a      	mov	r2, r9
 8001780:	075c      	lsls	r4, r3, #29
 8001782:	08d2      	lsrs	r2, r2, #3
 8001784:	4314      	orrs	r4, r2
 8001786:	2280      	movs	r2, #128	; 0x80
 8001788:	08db      	lsrs	r3, r3, #3
 800178a:	0312      	lsls	r2, r2, #12
 800178c:	4213      	tst	r3, r2
 800178e:	d008      	beq.n	80017a2 <__aeabi_dsub+0x67e>
 8001790:	08ce      	lsrs	r6, r1, #3
 8001792:	4216      	tst	r6, r2
 8001794:	d105      	bne.n	80017a2 <__aeabi_dsub+0x67e>
 8001796:	08c0      	lsrs	r0, r0, #3
 8001798:	0749      	lsls	r1, r1, #29
 800179a:	4308      	orrs	r0, r1
 800179c:	0004      	movs	r4, r0
 800179e:	465d      	mov	r5, fp
 80017a0:	0033      	movs	r3, r6
 80017a2:	0f61      	lsrs	r1, r4, #29
 80017a4:	00e2      	lsls	r2, r4, #3
 80017a6:	0749      	lsls	r1, r1, #29
 80017a8:	08d2      	lsrs	r2, r2, #3
 80017aa:	430a      	orrs	r2, r1
 80017ac:	e678      	b.n	80014a0 <__aeabi_dsub+0x37c>
 80017ae:	074b      	lsls	r3, r1, #29
 80017b0:	08c2      	lsrs	r2, r0, #3
 80017b2:	431a      	orrs	r2, r3
 80017b4:	08cb      	lsrs	r3, r1, #3
 80017b6:	e632      	b.n	800141e <__aeabi_dsub+0x2fa>
 80017b8:	4448      	add	r0, r9
 80017ba:	185b      	adds	r3, r3, r1
 80017bc:	4548      	cmp	r0, r9
 80017be:	4192      	sbcs	r2, r2
 80017c0:	4698      	mov	r8, r3
 80017c2:	4252      	negs	r2, r2
 80017c4:	4490      	add	r8, r2
 80017c6:	4643      	mov	r3, r8
 80017c8:	0004      	movs	r4, r0
 80017ca:	021b      	lsls	r3, r3, #8
 80017cc:	d400      	bmi.n	80017d0 <__aeabi_dsub+0x6ac>
 80017ce:	e61a      	b.n	8001406 <__aeabi_dsub+0x2e2>
 80017d0:	4642      	mov	r2, r8
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <__aeabi_dsub+0x6e8>)
 80017d4:	2601      	movs	r6, #1
 80017d6:	401a      	ands	r2, r3
 80017d8:	4690      	mov	r8, r2
 80017da:	e614      	b.n	8001406 <__aeabi_dsub+0x2e2>
 80017dc:	4666      	mov	r6, ip
 80017de:	001f      	movs	r7, r3
 80017e0:	3e20      	subs	r6, #32
 80017e2:	40f7      	lsrs	r7, r6
 80017e4:	2c20      	cmp	r4, #32
 80017e6:	d005      	beq.n	80017f4 <__aeabi_dsub+0x6d0>
 80017e8:	2640      	movs	r6, #64	; 0x40
 80017ea:	1b36      	subs	r6, r6, r4
 80017ec:	40b3      	lsls	r3, r6
 80017ee:	464c      	mov	r4, r9
 80017f0:	431c      	orrs	r4, r3
 80017f2:	46a2      	mov	sl, r4
 80017f4:	4654      	mov	r4, sl
 80017f6:	1e63      	subs	r3, r4, #1
 80017f8:	419c      	sbcs	r4, r3
 80017fa:	433c      	orrs	r4, r7
 80017fc:	e5c8      	b.n	8001390 <__aeabi_dsub+0x26c>
 80017fe:	0011      	movs	r1, r2
 8001800:	2300      	movs	r3, #0
 8001802:	2200      	movs	r2, #0
 8001804:	e532      	b.n	800126c <__aeabi_dsub+0x148>
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	000007ff 	.word	0x000007ff
 800180c:	ff7fffff 	.word	0xff7fffff
 8001810:	000007fe 	.word	0x000007fe
 8001814:	464a      	mov	r2, r9
 8001816:	1814      	adds	r4, r2, r0
 8001818:	4284      	cmp	r4, r0
 800181a:	4192      	sbcs	r2, r2
 800181c:	185b      	adds	r3, r3, r1
 800181e:	4698      	mov	r8, r3
 8001820:	4252      	negs	r2, r2
 8001822:	4490      	add	r8, r2
 8001824:	e5e9      	b.n	80013fa <__aeabi_dsub+0x2d6>
 8001826:	4642      	mov	r2, r8
 8001828:	4322      	orrs	r2, r4
 800182a:	d100      	bne.n	800182e <__aeabi_dsub+0x70a>
 800182c:	e6a6      	b.n	800157c <__aeabi_dsub+0x458>
 800182e:	e5ea      	b.n	8001406 <__aeabi_dsub+0x2e2>
 8001830:	074b      	lsls	r3, r1, #29
 8001832:	08c2      	lsrs	r2, r0, #3
 8001834:	431a      	orrs	r2, r3
 8001836:	08cb      	lsrs	r3, r1, #3
 8001838:	e632      	b.n	80014a0 <__aeabi_dsub+0x37c>
 800183a:	2200      	movs	r2, #0
 800183c:	4901      	ldr	r1, [pc, #4]	; (8001844 <__aeabi_dsub+0x720>)
 800183e:	0013      	movs	r3, r2
 8001840:	e514      	b.n	800126c <__aeabi_dsub+0x148>
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	000007ff 	.word	0x000007ff

08001848 <__aeabi_d2iz>:
 8001848:	000a      	movs	r2, r1
 800184a:	b530      	push	{r4, r5, lr}
 800184c:	4c13      	ldr	r4, [pc, #76]	; (800189c <__aeabi_d2iz+0x54>)
 800184e:	0053      	lsls	r3, r2, #1
 8001850:	0309      	lsls	r1, r1, #12
 8001852:	0005      	movs	r5, r0
 8001854:	0b09      	lsrs	r1, r1, #12
 8001856:	2000      	movs	r0, #0
 8001858:	0d5b      	lsrs	r3, r3, #21
 800185a:	0fd2      	lsrs	r2, r2, #31
 800185c:	42a3      	cmp	r3, r4
 800185e:	dd04      	ble.n	800186a <__aeabi_d2iz+0x22>
 8001860:	480f      	ldr	r0, [pc, #60]	; (80018a0 <__aeabi_d2iz+0x58>)
 8001862:	4283      	cmp	r3, r0
 8001864:	dd02      	ble.n	800186c <__aeabi_d2iz+0x24>
 8001866:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <__aeabi_d2iz+0x5c>)
 8001868:	18d0      	adds	r0, r2, r3
 800186a:	bd30      	pop	{r4, r5, pc}
 800186c:	2080      	movs	r0, #128	; 0x80
 800186e:	0340      	lsls	r0, r0, #13
 8001870:	4301      	orrs	r1, r0
 8001872:	480d      	ldr	r0, [pc, #52]	; (80018a8 <__aeabi_d2iz+0x60>)
 8001874:	1ac0      	subs	r0, r0, r3
 8001876:	281f      	cmp	r0, #31
 8001878:	dd08      	ble.n	800188c <__aeabi_d2iz+0x44>
 800187a:	480c      	ldr	r0, [pc, #48]	; (80018ac <__aeabi_d2iz+0x64>)
 800187c:	1ac3      	subs	r3, r0, r3
 800187e:	40d9      	lsrs	r1, r3
 8001880:	000b      	movs	r3, r1
 8001882:	4258      	negs	r0, r3
 8001884:	2a00      	cmp	r2, #0
 8001886:	d1f0      	bne.n	800186a <__aeabi_d2iz+0x22>
 8001888:	0018      	movs	r0, r3
 800188a:	e7ee      	b.n	800186a <__aeabi_d2iz+0x22>
 800188c:	4c08      	ldr	r4, [pc, #32]	; (80018b0 <__aeabi_d2iz+0x68>)
 800188e:	40c5      	lsrs	r5, r0
 8001890:	46a4      	mov	ip, r4
 8001892:	4463      	add	r3, ip
 8001894:	4099      	lsls	r1, r3
 8001896:	000b      	movs	r3, r1
 8001898:	432b      	orrs	r3, r5
 800189a:	e7f2      	b.n	8001882 <__aeabi_d2iz+0x3a>
 800189c:	000003fe 	.word	0x000003fe
 80018a0:	0000041d 	.word	0x0000041d
 80018a4:	7fffffff 	.word	0x7fffffff
 80018a8:	00000433 	.word	0x00000433
 80018ac:	00000413 	.word	0x00000413
 80018b0:	fffffbed 	.word	0xfffffbed

080018b4 <__aeabi_ui2d>:
 80018b4:	b510      	push	{r4, lr}
 80018b6:	1e04      	subs	r4, r0, #0
 80018b8:	d010      	beq.n	80018dc <__aeabi_ui2d+0x28>
 80018ba:	f000 f92f 	bl	8001b1c <__clzsi2>
 80018be:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <__aeabi_ui2d+0x48>)
 80018c0:	1a1b      	subs	r3, r3, r0
 80018c2:	280a      	cmp	r0, #10
 80018c4:	dc11      	bgt.n	80018ea <__aeabi_ui2d+0x36>
 80018c6:	220b      	movs	r2, #11
 80018c8:	0021      	movs	r1, r4
 80018ca:	1a12      	subs	r2, r2, r0
 80018cc:	40d1      	lsrs	r1, r2
 80018ce:	3015      	adds	r0, #21
 80018d0:	030a      	lsls	r2, r1, #12
 80018d2:	055b      	lsls	r3, r3, #21
 80018d4:	4084      	lsls	r4, r0
 80018d6:	0b12      	lsrs	r2, r2, #12
 80018d8:	0d5b      	lsrs	r3, r3, #21
 80018da:	e001      	b.n	80018e0 <__aeabi_ui2d+0x2c>
 80018dc:	2300      	movs	r3, #0
 80018de:	2200      	movs	r2, #0
 80018e0:	051b      	lsls	r3, r3, #20
 80018e2:	4313      	orrs	r3, r2
 80018e4:	0020      	movs	r0, r4
 80018e6:	0019      	movs	r1, r3
 80018e8:	bd10      	pop	{r4, pc}
 80018ea:	0022      	movs	r2, r4
 80018ec:	380b      	subs	r0, #11
 80018ee:	4082      	lsls	r2, r0
 80018f0:	055b      	lsls	r3, r3, #21
 80018f2:	0312      	lsls	r2, r2, #12
 80018f4:	2400      	movs	r4, #0
 80018f6:	0b12      	lsrs	r2, r2, #12
 80018f8:	0d5b      	lsrs	r3, r3, #21
 80018fa:	e7f1      	b.n	80018e0 <__aeabi_ui2d+0x2c>
 80018fc:	0000041e 	.word	0x0000041e

08001900 <__aeabi_f2d>:
 8001900:	b570      	push	{r4, r5, r6, lr}
 8001902:	0043      	lsls	r3, r0, #1
 8001904:	0246      	lsls	r6, r0, #9
 8001906:	0fc4      	lsrs	r4, r0, #31
 8001908:	20fe      	movs	r0, #254	; 0xfe
 800190a:	0e1b      	lsrs	r3, r3, #24
 800190c:	1c59      	adds	r1, r3, #1
 800190e:	0a75      	lsrs	r5, r6, #9
 8001910:	4208      	tst	r0, r1
 8001912:	d00c      	beq.n	800192e <__aeabi_f2d+0x2e>
 8001914:	22e0      	movs	r2, #224	; 0xe0
 8001916:	0092      	lsls	r2, r2, #2
 8001918:	4694      	mov	ip, r2
 800191a:	076d      	lsls	r5, r5, #29
 800191c:	0b36      	lsrs	r6, r6, #12
 800191e:	4463      	add	r3, ip
 8001920:	051b      	lsls	r3, r3, #20
 8001922:	4333      	orrs	r3, r6
 8001924:	07e4      	lsls	r4, r4, #31
 8001926:	4323      	orrs	r3, r4
 8001928:	0028      	movs	r0, r5
 800192a:	0019      	movs	r1, r3
 800192c:	bd70      	pop	{r4, r5, r6, pc}
 800192e:	2b00      	cmp	r3, #0
 8001930:	d114      	bne.n	800195c <__aeabi_f2d+0x5c>
 8001932:	2d00      	cmp	r5, #0
 8001934:	d01b      	beq.n	800196e <__aeabi_f2d+0x6e>
 8001936:	0028      	movs	r0, r5
 8001938:	f000 f8f0 	bl	8001b1c <__clzsi2>
 800193c:	280a      	cmp	r0, #10
 800193e:	dc1c      	bgt.n	800197a <__aeabi_f2d+0x7a>
 8001940:	230b      	movs	r3, #11
 8001942:	002a      	movs	r2, r5
 8001944:	1a1b      	subs	r3, r3, r0
 8001946:	40da      	lsrs	r2, r3
 8001948:	0003      	movs	r3, r0
 800194a:	3315      	adds	r3, #21
 800194c:	409d      	lsls	r5, r3
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <__aeabi_f2d+0x88>)
 8001950:	0312      	lsls	r2, r2, #12
 8001952:	1a1b      	subs	r3, r3, r0
 8001954:	055b      	lsls	r3, r3, #21
 8001956:	0b16      	lsrs	r6, r2, #12
 8001958:	0d5b      	lsrs	r3, r3, #21
 800195a:	e7e1      	b.n	8001920 <__aeabi_f2d+0x20>
 800195c:	2d00      	cmp	r5, #0
 800195e:	d009      	beq.n	8001974 <__aeabi_f2d+0x74>
 8001960:	0b32      	lsrs	r2, r6, #12
 8001962:	2680      	movs	r6, #128	; 0x80
 8001964:	0336      	lsls	r6, r6, #12
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <__aeabi_f2d+0x8c>)
 8001968:	076d      	lsls	r5, r5, #29
 800196a:	4316      	orrs	r6, r2
 800196c:	e7d8      	b.n	8001920 <__aeabi_f2d+0x20>
 800196e:	2300      	movs	r3, #0
 8001970:	2600      	movs	r6, #0
 8001972:	e7d5      	b.n	8001920 <__aeabi_f2d+0x20>
 8001974:	2600      	movs	r6, #0
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <__aeabi_f2d+0x8c>)
 8001978:	e7d2      	b.n	8001920 <__aeabi_f2d+0x20>
 800197a:	0003      	movs	r3, r0
 800197c:	002a      	movs	r2, r5
 800197e:	3b0b      	subs	r3, #11
 8001980:	409a      	lsls	r2, r3
 8001982:	2500      	movs	r5, #0
 8001984:	e7e3      	b.n	800194e <__aeabi_f2d+0x4e>
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	00000389 	.word	0x00000389
 800198c:	000007ff 	.word	0x000007ff

08001990 <__aeabi_d2f>:
 8001990:	0002      	movs	r2, r0
 8001992:	004b      	lsls	r3, r1, #1
 8001994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001996:	0308      	lsls	r0, r1, #12
 8001998:	0d5b      	lsrs	r3, r3, #21
 800199a:	4e3d      	ldr	r6, [pc, #244]	; (8001a90 <__aeabi_d2f+0x100>)
 800199c:	0fcc      	lsrs	r4, r1, #31
 800199e:	0a40      	lsrs	r0, r0, #9
 80019a0:	0f51      	lsrs	r1, r2, #29
 80019a2:	1c5f      	adds	r7, r3, #1
 80019a4:	4308      	orrs	r0, r1
 80019a6:	00d5      	lsls	r5, r2, #3
 80019a8:	4237      	tst	r7, r6
 80019aa:	d00a      	beq.n	80019c2 <__aeabi_d2f+0x32>
 80019ac:	4939      	ldr	r1, [pc, #228]	; (8001a94 <__aeabi_d2f+0x104>)
 80019ae:	185e      	adds	r6, r3, r1
 80019b0:	2efe      	cmp	r6, #254	; 0xfe
 80019b2:	dd16      	ble.n	80019e2 <__aeabi_d2f+0x52>
 80019b4:	23ff      	movs	r3, #255	; 0xff
 80019b6:	2100      	movs	r1, #0
 80019b8:	05db      	lsls	r3, r3, #23
 80019ba:	430b      	orrs	r3, r1
 80019bc:	07e0      	lsls	r0, r4, #31
 80019be:	4318      	orrs	r0, r3
 80019c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d106      	bne.n	80019d4 <__aeabi_d2f+0x44>
 80019c6:	4328      	orrs	r0, r5
 80019c8:	d027      	beq.n	8001a1a <__aeabi_d2f+0x8a>
 80019ca:	2105      	movs	r1, #5
 80019cc:	0189      	lsls	r1, r1, #6
 80019ce:	0a49      	lsrs	r1, r1, #9
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	e7f1      	b.n	80019b8 <__aeabi_d2f+0x28>
 80019d4:	4305      	orrs	r5, r0
 80019d6:	d0ed      	beq.n	80019b4 <__aeabi_d2f+0x24>
 80019d8:	2180      	movs	r1, #128	; 0x80
 80019da:	03c9      	lsls	r1, r1, #15
 80019dc:	23ff      	movs	r3, #255	; 0xff
 80019de:	4301      	orrs	r1, r0
 80019e0:	e7ea      	b.n	80019b8 <__aeabi_d2f+0x28>
 80019e2:	2e00      	cmp	r6, #0
 80019e4:	dd1c      	ble.n	8001a20 <__aeabi_d2f+0x90>
 80019e6:	0192      	lsls	r2, r2, #6
 80019e8:	0011      	movs	r1, r2
 80019ea:	1e4a      	subs	r2, r1, #1
 80019ec:	4191      	sbcs	r1, r2
 80019ee:	00c0      	lsls	r0, r0, #3
 80019f0:	0f6d      	lsrs	r5, r5, #29
 80019f2:	4301      	orrs	r1, r0
 80019f4:	4329      	orrs	r1, r5
 80019f6:	074b      	lsls	r3, r1, #29
 80019f8:	d048      	beq.n	8001a8c <__aeabi_d2f+0xfc>
 80019fa:	230f      	movs	r3, #15
 80019fc:	400b      	ands	r3, r1
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d000      	beq.n	8001a04 <__aeabi_d2f+0x74>
 8001a02:	3104      	adds	r1, #4
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	04db      	lsls	r3, r3, #19
 8001a08:	400b      	ands	r3, r1
 8001a0a:	d03f      	beq.n	8001a8c <__aeabi_d2f+0xfc>
 8001a0c:	1c72      	adds	r2, r6, #1
 8001a0e:	2efe      	cmp	r6, #254	; 0xfe
 8001a10:	d0d0      	beq.n	80019b4 <__aeabi_d2f+0x24>
 8001a12:	0189      	lsls	r1, r1, #6
 8001a14:	0a49      	lsrs	r1, r1, #9
 8001a16:	b2d3      	uxtb	r3, r2
 8001a18:	e7ce      	b.n	80019b8 <__aeabi_d2f+0x28>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	e7cb      	b.n	80019b8 <__aeabi_d2f+0x28>
 8001a20:	0032      	movs	r2, r6
 8001a22:	3217      	adds	r2, #23
 8001a24:	db22      	blt.n	8001a6c <__aeabi_d2f+0xdc>
 8001a26:	2180      	movs	r1, #128	; 0x80
 8001a28:	221e      	movs	r2, #30
 8001a2a:	0409      	lsls	r1, r1, #16
 8001a2c:	4308      	orrs	r0, r1
 8001a2e:	1b92      	subs	r2, r2, r6
 8001a30:	2a1f      	cmp	r2, #31
 8001a32:	dd1d      	ble.n	8001a70 <__aeabi_d2f+0xe0>
 8001a34:	2102      	movs	r1, #2
 8001a36:	4249      	negs	r1, r1
 8001a38:	1b8e      	subs	r6, r1, r6
 8001a3a:	0001      	movs	r1, r0
 8001a3c:	40f1      	lsrs	r1, r6
 8001a3e:	000e      	movs	r6, r1
 8001a40:	2a20      	cmp	r2, #32
 8001a42:	d004      	beq.n	8001a4e <__aeabi_d2f+0xbe>
 8001a44:	4a14      	ldr	r2, [pc, #80]	; (8001a98 <__aeabi_d2f+0x108>)
 8001a46:	4694      	mov	ip, r2
 8001a48:	4463      	add	r3, ip
 8001a4a:	4098      	lsls	r0, r3
 8001a4c:	4305      	orrs	r5, r0
 8001a4e:	0029      	movs	r1, r5
 8001a50:	1e4d      	subs	r5, r1, #1
 8001a52:	41a9      	sbcs	r1, r5
 8001a54:	4331      	orrs	r1, r6
 8001a56:	2600      	movs	r6, #0
 8001a58:	074b      	lsls	r3, r1, #29
 8001a5a:	d1ce      	bne.n	80019fa <__aeabi_d2f+0x6a>
 8001a5c:	2080      	movs	r0, #128	; 0x80
 8001a5e:	000b      	movs	r3, r1
 8001a60:	04c0      	lsls	r0, r0, #19
 8001a62:	2201      	movs	r2, #1
 8001a64:	4003      	ands	r3, r0
 8001a66:	4201      	tst	r1, r0
 8001a68:	d1d3      	bne.n	8001a12 <__aeabi_d2f+0x82>
 8001a6a:	e7af      	b.n	80019cc <__aeabi_d2f+0x3c>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	e7ac      	b.n	80019ca <__aeabi_d2f+0x3a>
 8001a70:	490a      	ldr	r1, [pc, #40]	; (8001a9c <__aeabi_d2f+0x10c>)
 8001a72:	468c      	mov	ip, r1
 8001a74:	0029      	movs	r1, r5
 8001a76:	4463      	add	r3, ip
 8001a78:	40d1      	lsrs	r1, r2
 8001a7a:	409d      	lsls	r5, r3
 8001a7c:	000a      	movs	r2, r1
 8001a7e:	0029      	movs	r1, r5
 8001a80:	4098      	lsls	r0, r3
 8001a82:	1e4d      	subs	r5, r1, #1
 8001a84:	41a9      	sbcs	r1, r5
 8001a86:	4301      	orrs	r1, r0
 8001a88:	4311      	orrs	r1, r2
 8001a8a:	e7e4      	b.n	8001a56 <__aeabi_d2f+0xc6>
 8001a8c:	0033      	movs	r3, r6
 8001a8e:	e79d      	b.n	80019cc <__aeabi_d2f+0x3c>
 8001a90:	000007fe 	.word	0x000007fe
 8001a94:	fffffc80 	.word	0xfffffc80
 8001a98:	fffffca2 	.word	0xfffffca2
 8001a9c:	fffffc82 	.word	0xfffffc82

08001aa0 <__aeabi_cdrcmple>:
 8001aa0:	4684      	mov	ip, r0
 8001aa2:	1c10      	adds	r0, r2, #0
 8001aa4:	4662      	mov	r2, ip
 8001aa6:	468c      	mov	ip, r1
 8001aa8:	1c19      	adds	r1, r3, #0
 8001aaa:	4663      	mov	r3, ip
 8001aac:	e000      	b.n	8001ab0 <__aeabi_cdcmpeq>
 8001aae:	46c0      	nop			; (mov r8, r8)

08001ab0 <__aeabi_cdcmpeq>:
 8001ab0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001ab2:	f000 f8ff 	bl	8001cb4 <__ledf2>
 8001ab6:	2800      	cmp	r0, #0
 8001ab8:	d401      	bmi.n	8001abe <__aeabi_cdcmpeq+0xe>
 8001aba:	2100      	movs	r1, #0
 8001abc:	42c8      	cmn	r0, r1
 8001abe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001ac0 <__aeabi_dcmpeq>:
 8001ac0:	b510      	push	{r4, lr}
 8001ac2:	f000 f849 	bl	8001b58 <__eqdf2>
 8001ac6:	4240      	negs	r0, r0
 8001ac8:	3001      	adds	r0, #1
 8001aca:	bd10      	pop	{r4, pc}

08001acc <__aeabi_dcmplt>:
 8001acc:	b510      	push	{r4, lr}
 8001ace:	f000 f8f1 	bl	8001cb4 <__ledf2>
 8001ad2:	2800      	cmp	r0, #0
 8001ad4:	db01      	blt.n	8001ada <__aeabi_dcmplt+0xe>
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	bd10      	pop	{r4, pc}
 8001ada:	2001      	movs	r0, #1
 8001adc:	bd10      	pop	{r4, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)

08001ae0 <__aeabi_dcmple>:
 8001ae0:	b510      	push	{r4, lr}
 8001ae2:	f000 f8e7 	bl	8001cb4 <__ledf2>
 8001ae6:	2800      	cmp	r0, #0
 8001ae8:	dd01      	ble.n	8001aee <__aeabi_dcmple+0xe>
 8001aea:	2000      	movs	r0, #0
 8001aec:	bd10      	pop	{r4, pc}
 8001aee:	2001      	movs	r0, #1
 8001af0:	bd10      	pop	{r4, pc}
 8001af2:	46c0      	nop			; (mov r8, r8)

08001af4 <__aeabi_dcmpgt>:
 8001af4:	b510      	push	{r4, lr}
 8001af6:	f000 f86b 	bl	8001bd0 <__gedf2>
 8001afa:	2800      	cmp	r0, #0
 8001afc:	dc01      	bgt.n	8001b02 <__aeabi_dcmpgt+0xe>
 8001afe:	2000      	movs	r0, #0
 8001b00:	bd10      	pop	{r4, pc}
 8001b02:	2001      	movs	r0, #1
 8001b04:	bd10      	pop	{r4, pc}
 8001b06:	46c0      	nop			; (mov r8, r8)

08001b08 <__aeabi_dcmpge>:
 8001b08:	b510      	push	{r4, lr}
 8001b0a:	f000 f861 	bl	8001bd0 <__gedf2>
 8001b0e:	2800      	cmp	r0, #0
 8001b10:	da01      	bge.n	8001b16 <__aeabi_dcmpge+0xe>
 8001b12:	2000      	movs	r0, #0
 8001b14:	bd10      	pop	{r4, pc}
 8001b16:	2001      	movs	r0, #1
 8001b18:	bd10      	pop	{r4, pc}
 8001b1a:	46c0      	nop			; (mov r8, r8)

08001b1c <__clzsi2>:
 8001b1c:	211c      	movs	r1, #28
 8001b1e:	2301      	movs	r3, #1
 8001b20:	041b      	lsls	r3, r3, #16
 8001b22:	4298      	cmp	r0, r3
 8001b24:	d301      	bcc.n	8001b2a <__clzsi2+0xe>
 8001b26:	0c00      	lsrs	r0, r0, #16
 8001b28:	3910      	subs	r1, #16
 8001b2a:	0a1b      	lsrs	r3, r3, #8
 8001b2c:	4298      	cmp	r0, r3
 8001b2e:	d301      	bcc.n	8001b34 <__clzsi2+0x18>
 8001b30:	0a00      	lsrs	r0, r0, #8
 8001b32:	3908      	subs	r1, #8
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	4298      	cmp	r0, r3
 8001b38:	d301      	bcc.n	8001b3e <__clzsi2+0x22>
 8001b3a:	0900      	lsrs	r0, r0, #4
 8001b3c:	3904      	subs	r1, #4
 8001b3e:	a202      	add	r2, pc, #8	; (adr r2, 8001b48 <__clzsi2+0x2c>)
 8001b40:	5c10      	ldrb	r0, [r2, r0]
 8001b42:	1840      	adds	r0, r0, r1
 8001b44:	4770      	bx	lr
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	02020304 	.word	0x02020304
 8001b4c:	01010101 	.word	0x01010101
	...

08001b58 <__eqdf2>:
 8001b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b5a:	464f      	mov	r7, r9
 8001b5c:	4646      	mov	r6, r8
 8001b5e:	46d6      	mov	lr, sl
 8001b60:	4694      	mov	ip, r2
 8001b62:	4691      	mov	r9, r2
 8001b64:	031a      	lsls	r2, r3, #12
 8001b66:	0b12      	lsrs	r2, r2, #12
 8001b68:	4d18      	ldr	r5, [pc, #96]	; (8001bcc <__eqdf2+0x74>)
 8001b6a:	b5c0      	push	{r6, r7, lr}
 8001b6c:	004c      	lsls	r4, r1, #1
 8001b6e:	030f      	lsls	r7, r1, #12
 8001b70:	4692      	mov	sl, r2
 8001b72:	005a      	lsls	r2, r3, #1
 8001b74:	0006      	movs	r6, r0
 8001b76:	4680      	mov	r8, r0
 8001b78:	0b3f      	lsrs	r7, r7, #12
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	0d64      	lsrs	r4, r4, #21
 8001b7e:	0fc9      	lsrs	r1, r1, #31
 8001b80:	0d52      	lsrs	r2, r2, #21
 8001b82:	0fdb      	lsrs	r3, r3, #31
 8001b84:	42ac      	cmp	r4, r5
 8001b86:	d00a      	beq.n	8001b9e <__eqdf2+0x46>
 8001b88:	42aa      	cmp	r2, r5
 8001b8a:	d003      	beq.n	8001b94 <__eqdf2+0x3c>
 8001b8c:	4294      	cmp	r4, r2
 8001b8e:	d101      	bne.n	8001b94 <__eqdf2+0x3c>
 8001b90:	4557      	cmp	r7, sl
 8001b92:	d00d      	beq.n	8001bb0 <__eqdf2+0x58>
 8001b94:	bce0      	pop	{r5, r6, r7}
 8001b96:	46ba      	mov	sl, r7
 8001b98:	46b1      	mov	r9, r6
 8001b9a:	46a8      	mov	r8, r5
 8001b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b9e:	003d      	movs	r5, r7
 8001ba0:	4335      	orrs	r5, r6
 8001ba2:	d1f7      	bne.n	8001b94 <__eqdf2+0x3c>
 8001ba4:	42a2      	cmp	r2, r4
 8001ba6:	d1f5      	bne.n	8001b94 <__eqdf2+0x3c>
 8001ba8:	4652      	mov	r2, sl
 8001baa:	4665      	mov	r5, ip
 8001bac:	432a      	orrs	r2, r5
 8001bae:	d1f1      	bne.n	8001b94 <__eqdf2+0x3c>
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	45c8      	cmp	r8, r9
 8001bb4:	d1ee      	bne.n	8001b94 <__eqdf2+0x3c>
 8001bb6:	4299      	cmp	r1, r3
 8001bb8:	d006      	beq.n	8001bc8 <__eqdf2+0x70>
 8001bba:	2c00      	cmp	r4, #0
 8001bbc:	d1ea      	bne.n	8001b94 <__eqdf2+0x3c>
 8001bbe:	433e      	orrs	r6, r7
 8001bc0:	0030      	movs	r0, r6
 8001bc2:	1e46      	subs	r6, r0, #1
 8001bc4:	41b0      	sbcs	r0, r6
 8001bc6:	e7e5      	b.n	8001b94 <__eqdf2+0x3c>
 8001bc8:	2000      	movs	r0, #0
 8001bca:	e7e3      	b.n	8001b94 <__eqdf2+0x3c>
 8001bcc:	000007ff 	.word	0x000007ff

08001bd0 <__gedf2>:
 8001bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bd2:	464e      	mov	r6, r9
 8001bd4:	4645      	mov	r5, r8
 8001bd6:	4657      	mov	r7, sl
 8001bd8:	46de      	mov	lr, fp
 8001bda:	0004      	movs	r4, r0
 8001bdc:	0018      	movs	r0, r3
 8001bde:	b5e0      	push	{r5, r6, r7, lr}
 8001be0:	0016      	movs	r6, r2
 8001be2:	031b      	lsls	r3, r3, #12
 8001be4:	0b1b      	lsrs	r3, r3, #12
 8001be6:	4d32      	ldr	r5, [pc, #200]	; (8001cb0 <__gedf2+0xe0>)
 8001be8:	030f      	lsls	r7, r1, #12
 8001bea:	004a      	lsls	r2, r1, #1
 8001bec:	4699      	mov	r9, r3
 8001bee:	0043      	lsls	r3, r0, #1
 8001bf0:	46a4      	mov	ip, r4
 8001bf2:	46b0      	mov	r8, r6
 8001bf4:	0b3f      	lsrs	r7, r7, #12
 8001bf6:	0d52      	lsrs	r2, r2, #21
 8001bf8:	0fc9      	lsrs	r1, r1, #31
 8001bfa:	0d5b      	lsrs	r3, r3, #21
 8001bfc:	0fc0      	lsrs	r0, r0, #31
 8001bfe:	42aa      	cmp	r2, r5
 8001c00:	d029      	beq.n	8001c56 <__gedf2+0x86>
 8001c02:	42ab      	cmp	r3, r5
 8001c04:	d018      	beq.n	8001c38 <__gedf2+0x68>
 8001c06:	2a00      	cmp	r2, #0
 8001c08:	d12a      	bne.n	8001c60 <__gedf2+0x90>
 8001c0a:	433c      	orrs	r4, r7
 8001c0c:	46a3      	mov	fp, r4
 8001c0e:	4265      	negs	r5, r4
 8001c10:	4165      	adcs	r5, r4
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d102      	bne.n	8001c1c <__gedf2+0x4c>
 8001c16:	464c      	mov	r4, r9
 8001c18:	4326      	orrs	r6, r4
 8001c1a:	d027      	beq.n	8001c6c <__gedf2+0x9c>
 8001c1c:	2d00      	cmp	r5, #0
 8001c1e:	d115      	bne.n	8001c4c <__gedf2+0x7c>
 8001c20:	4281      	cmp	r1, r0
 8001c22:	d028      	beq.n	8001c76 <__gedf2+0xa6>
 8001c24:	2002      	movs	r0, #2
 8001c26:	3901      	subs	r1, #1
 8001c28:	4008      	ands	r0, r1
 8001c2a:	3801      	subs	r0, #1
 8001c2c:	bcf0      	pop	{r4, r5, r6, r7}
 8001c2e:	46bb      	mov	fp, r7
 8001c30:	46b2      	mov	sl, r6
 8001c32:	46a9      	mov	r9, r5
 8001c34:	46a0      	mov	r8, r4
 8001c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c38:	464d      	mov	r5, r9
 8001c3a:	432e      	orrs	r6, r5
 8001c3c:	d12f      	bne.n	8001c9e <__gedf2+0xce>
 8001c3e:	2a00      	cmp	r2, #0
 8001c40:	d1ee      	bne.n	8001c20 <__gedf2+0x50>
 8001c42:	433c      	orrs	r4, r7
 8001c44:	4265      	negs	r5, r4
 8001c46:	4165      	adcs	r5, r4
 8001c48:	2d00      	cmp	r5, #0
 8001c4a:	d0e9      	beq.n	8001c20 <__gedf2+0x50>
 8001c4c:	2800      	cmp	r0, #0
 8001c4e:	d1ed      	bne.n	8001c2c <__gedf2+0x5c>
 8001c50:	2001      	movs	r0, #1
 8001c52:	4240      	negs	r0, r0
 8001c54:	e7ea      	b.n	8001c2c <__gedf2+0x5c>
 8001c56:	003d      	movs	r5, r7
 8001c58:	4325      	orrs	r5, r4
 8001c5a:	d120      	bne.n	8001c9e <__gedf2+0xce>
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d0eb      	beq.n	8001c38 <__gedf2+0x68>
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1dd      	bne.n	8001c20 <__gedf2+0x50>
 8001c64:	464c      	mov	r4, r9
 8001c66:	4326      	orrs	r6, r4
 8001c68:	d1da      	bne.n	8001c20 <__gedf2+0x50>
 8001c6a:	e7db      	b.n	8001c24 <__gedf2+0x54>
 8001c6c:	465b      	mov	r3, fp
 8001c6e:	2000      	movs	r0, #0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0db      	beq.n	8001c2c <__gedf2+0x5c>
 8001c74:	e7d6      	b.n	8001c24 <__gedf2+0x54>
 8001c76:	429a      	cmp	r2, r3
 8001c78:	dc0a      	bgt.n	8001c90 <__gedf2+0xc0>
 8001c7a:	dbe7      	blt.n	8001c4c <__gedf2+0x7c>
 8001c7c:	454f      	cmp	r7, r9
 8001c7e:	d8d1      	bhi.n	8001c24 <__gedf2+0x54>
 8001c80:	d010      	beq.n	8001ca4 <__gedf2+0xd4>
 8001c82:	2000      	movs	r0, #0
 8001c84:	454f      	cmp	r7, r9
 8001c86:	d2d1      	bcs.n	8001c2c <__gedf2+0x5c>
 8001c88:	2900      	cmp	r1, #0
 8001c8a:	d0e1      	beq.n	8001c50 <__gedf2+0x80>
 8001c8c:	0008      	movs	r0, r1
 8001c8e:	e7cd      	b.n	8001c2c <__gedf2+0x5c>
 8001c90:	4243      	negs	r3, r0
 8001c92:	4158      	adcs	r0, r3
 8001c94:	2302      	movs	r3, #2
 8001c96:	4240      	negs	r0, r0
 8001c98:	4018      	ands	r0, r3
 8001c9a:	3801      	subs	r0, #1
 8001c9c:	e7c6      	b.n	8001c2c <__gedf2+0x5c>
 8001c9e:	2002      	movs	r0, #2
 8001ca0:	4240      	negs	r0, r0
 8001ca2:	e7c3      	b.n	8001c2c <__gedf2+0x5c>
 8001ca4:	45c4      	cmp	ip, r8
 8001ca6:	d8bd      	bhi.n	8001c24 <__gedf2+0x54>
 8001ca8:	2000      	movs	r0, #0
 8001caa:	45c4      	cmp	ip, r8
 8001cac:	d2be      	bcs.n	8001c2c <__gedf2+0x5c>
 8001cae:	e7eb      	b.n	8001c88 <__gedf2+0xb8>
 8001cb0:	000007ff 	.word	0x000007ff

08001cb4 <__ledf2>:
 8001cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb6:	464e      	mov	r6, r9
 8001cb8:	4645      	mov	r5, r8
 8001cba:	4657      	mov	r7, sl
 8001cbc:	46de      	mov	lr, fp
 8001cbe:	0004      	movs	r4, r0
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	b5e0      	push	{r5, r6, r7, lr}
 8001cc4:	0016      	movs	r6, r2
 8001cc6:	031b      	lsls	r3, r3, #12
 8001cc8:	0b1b      	lsrs	r3, r3, #12
 8001cca:	4d31      	ldr	r5, [pc, #196]	; (8001d90 <__ledf2+0xdc>)
 8001ccc:	030f      	lsls	r7, r1, #12
 8001cce:	004a      	lsls	r2, r1, #1
 8001cd0:	4699      	mov	r9, r3
 8001cd2:	0043      	lsls	r3, r0, #1
 8001cd4:	46a4      	mov	ip, r4
 8001cd6:	46b0      	mov	r8, r6
 8001cd8:	0b3f      	lsrs	r7, r7, #12
 8001cda:	0d52      	lsrs	r2, r2, #21
 8001cdc:	0fc9      	lsrs	r1, r1, #31
 8001cde:	0d5b      	lsrs	r3, r3, #21
 8001ce0:	0fc0      	lsrs	r0, r0, #31
 8001ce2:	42aa      	cmp	r2, r5
 8001ce4:	d011      	beq.n	8001d0a <__ledf2+0x56>
 8001ce6:	42ab      	cmp	r3, r5
 8001ce8:	d014      	beq.n	8001d14 <__ledf2+0x60>
 8001cea:	2a00      	cmp	r2, #0
 8001cec:	d12f      	bne.n	8001d4e <__ledf2+0x9a>
 8001cee:	433c      	orrs	r4, r7
 8001cf0:	46a3      	mov	fp, r4
 8001cf2:	4265      	negs	r5, r4
 8001cf4:	4165      	adcs	r5, r4
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d114      	bne.n	8001d24 <__ledf2+0x70>
 8001cfa:	464c      	mov	r4, r9
 8001cfc:	4326      	orrs	r6, r4
 8001cfe:	d111      	bne.n	8001d24 <__ledf2+0x70>
 8001d00:	465b      	mov	r3, fp
 8001d02:	2000      	movs	r0, #0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d017      	beq.n	8001d38 <__ledf2+0x84>
 8001d08:	e010      	b.n	8001d2c <__ledf2+0x78>
 8001d0a:	003d      	movs	r5, r7
 8001d0c:	4325      	orrs	r5, r4
 8001d0e:	d112      	bne.n	8001d36 <__ledf2+0x82>
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d11c      	bne.n	8001d4e <__ledf2+0x9a>
 8001d14:	464d      	mov	r5, r9
 8001d16:	432e      	orrs	r6, r5
 8001d18:	d10d      	bne.n	8001d36 <__ledf2+0x82>
 8001d1a:	2a00      	cmp	r2, #0
 8001d1c:	d104      	bne.n	8001d28 <__ledf2+0x74>
 8001d1e:	433c      	orrs	r4, r7
 8001d20:	4265      	negs	r5, r4
 8001d22:	4165      	adcs	r5, r4
 8001d24:	2d00      	cmp	r5, #0
 8001d26:	d10d      	bne.n	8001d44 <__ledf2+0x90>
 8001d28:	4281      	cmp	r1, r0
 8001d2a:	d016      	beq.n	8001d5a <__ledf2+0xa6>
 8001d2c:	2002      	movs	r0, #2
 8001d2e:	3901      	subs	r1, #1
 8001d30:	4008      	ands	r0, r1
 8001d32:	3801      	subs	r0, #1
 8001d34:	e000      	b.n	8001d38 <__ledf2+0x84>
 8001d36:	2002      	movs	r0, #2
 8001d38:	bcf0      	pop	{r4, r5, r6, r7}
 8001d3a:	46bb      	mov	fp, r7
 8001d3c:	46b2      	mov	sl, r6
 8001d3e:	46a9      	mov	r9, r5
 8001d40:	46a0      	mov	r8, r4
 8001d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d44:	2800      	cmp	r0, #0
 8001d46:	d1f7      	bne.n	8001d38 <__ledf2+0x84>
 8001d48:	2001      	movs	r0, #1
 8001d4a:	4240      	negs	r0, r0
 8001d4c:	e7f4      	b.n	8001d38 <__ledf2+0x84>
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1ea      	bne.n	8001d28 <__ledf2+0x74>
 8001d52:	464c      	mov	r4, r9
 8001d54:	4326      	orrs	r6, r4
 8001d56:	d1e7      	bne.n	8001d28 <__ledf2+0x74>
 8001d58:	e7e8      	b.n	8001d2c <__ledf2+0x78>
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	dd06      	ble.n	8001d6c <__ledf2+0xb8>
 8001d5e:	4243      	negs	r3, r0
 8001d60:	4158      	adcs	r0, r3
 8001d62:	2302      	movs	r3, #2
 8001d64:	4240      	negs	r0, r0
 8001d66:	4018      	ands	r0, r3
 8001d68:	3801      	subs	r0, #1
 8001d6a:	e7e5      	b.n	8001d38 <__ledf2+0x84>
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	dbe9      	blt.n	8001d44 <__ledf2+0x90>
 8001d70:	454f      	cmp	r7, r9
 8001d72:	d8db      	bhi.n	8001d2c <__ledf2+0x78>
 8001d74:	d006      	beq.n	8001d84 <__ledf2+0xd0>
 8001d76:	2000      	movs	r0, #0
 8001d78:	454f      	cmp	r7, r9
 8001d7a:	d2dd      	bcs.n	8001d38 <__ledf2+0x84>
 8001d7c:	2900      	cmp	r1, #0
 8001d7e:	d0e3      	beq.n	8001d48 <__ledf2+0x94>
 8001d80:	0008      	movs	r0, r1
 8001d82:	e7d9      	b.n	8001d38 <__ledf2+0x84>
 8001d84:	45c4      	cmp	ip, r8
 8001d86:	d8d1      	bhi.n	8001d2c <__ledf2+0x78>
 8001d88:	2000      	movs	r0, #0
 8001d8a:	45c4      	cmp	ip, r8
 8001d8c:	d2d4      	bcs.n	8001d38 <__ledf2+0x84>
 8001d8e:	e7f5      	b.n	8001d7c <__ledf2+0xc8>
 8001d90:	000007ff 	.word	0x000007ff

08001d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d94:	b5b0      	push	{r4, r5, r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d98:	f000 faa8 	bl	80022ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d9c:	f000 f8b4 	bl	8001f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001da0:	f000 f982 	bl	80020a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001da4:	f000 f962 	bl	800206c <MX_DMA_Init>
  MX_ADC1_Init();
 8001da8:	f000 f8f6 	bl	8001f98 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001dac:	4b45      	ldr	r3, [pc, #276]	; (8001ec4 <main+0x130>)
 8001dae:	0018      	movs	r0, r3
 8001db0:	f001 fa6a 	bl	8003288 <HAL_ADCEx_Calibration_Start>
   HAL_ADC_Start_DMA(&hadc1, &valorEntrada, 1);
 8001db4:	4944      	ldr	r1, [pc, #272]	; (8001ec8 <main+0x134>)
 8001db6:	4b43      	ldr	r3, [pc, #268]	; (8001ec4 <main+0x130>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f000 fe50 	bl	8002a60 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  tensao = 3.3/4095.0* valorEntrada;
 8001dc0:	4b41      	ldr	r3, [pc, #260]	; (8001ec8 <main+0x134>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f7ff fd75 	bl	80018b4 <__aeabi_ui2d>
 8001dca:	4a40      	ldr	r2, [pc, #256]	; (8001ecc <main+0x138>)
 8001dcc:	4b40      	ldr	r3, [pc, #256]	; (8001ed0 <main+0x13c>)
 8001dce:	f7fe ff3d 	bl	8000c4c <__aeabi_dmul>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	000b      	movs	r3, r1
 8001dd6:	0010      	movs	r0, r2
 8001dd8:	0019      	movs	r1, r3
 8001dda:	f7ff fdd9 	bl	8001990 <__aeabi_d2f>
 8001dde:	1c02      	adds	r2, r0, #0
 8001de0:	4b3c      	ldr	r3, [pc, #240]	; (8001ed4 <main+0x140>)
 8001de2:	601a      	str	r2, [r3, #0]

	  r2 =(tensao * 680)/(3.3 - tensao);
 8001de4:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <main+0x140>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	493b      	ldr	r1, [pc, #236]	; (8001ed8 <main+0x144>)
 8001dea:	1c18      	adds	r0, r3, #0
 8001dec:	f7fe fb2c 	bl	8000448 <__aeabi_fmul>
 8001df0:	1c03      	adds	r3, r0, #0
 8001df2:	1c18      	adds	r0, r3, #0
 8001df4:	f7ff fd84 	bl	8001900 <__aeabi_f2d>
 8001df8:	0004      	movs	r4, r0
 8001dfa:	000d      	movs	r5, r1
 8001dfc:	4b35      	ldr	r3, [pc, #212]	; (8001ed4 <main+0x140>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	1c18      	adds	r0, r3, #0
 8001e02:	f7ff fd7d 	bl	8001900 <__aeabi_f2d>
 8001e06:	0002      	movs	r2, r0
 8001e08:	000b      	movs	r3, r1
 8001e0a:	4834      	ldr	r0, [pc, #208]	; (8001edc <main+0x148>)
 8001e0c:	4934      	ldr	r1, [pc, #208]	; (8001ee0 <main+0x14c>)
 8001e0e:	f7ff f989 	bl	8001124 <__aeabi_dsub>
 8001e12:	0002      	movs	r2, r0
 8001e14:	000b      	movs	r3, r1
 8001e16:	0020      	movs	r0, r4
 8001e18:	0029      	movs	r1, r5
 8001e1a:	f7fe fc2f 	bl	800067c <__aeabi_ddiv>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	000b      	movs	r3, r1
 8001e22:	0010      	movs	r0, r2
 8001e24:	0019      	movs	r1, r3
 8001e26:	f7fe fa33 	bl	8000290 <__aeabi_d2uiz>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ee4 <main+0x150>)
 8001e2e:	601a      	str	r2, [r3, #0]

	  if(tensao == 1 && tensao < 12){
 8001e30:	4b28      	ldr	r3, [pc, #160]	; (8001ed4 <main+0x140>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	21fe      	movs	r1, #254	; 0xfe
 8001e36:	0589      	lsls	r1, r1, #22
 8001e38:	1c18      	adds	r0, r3, #0
 8001e3a:	f7fe f9fb 	bl	8000234 <__aeabi_fcmpeq>
 8001e3e:	1e03      	subs	r3, r0, #0
 8001e40:	d03e      	beq.n	8001ec0 <main+0x12c>
 8001e42:	4b24      	ldr	r3, [pc, #144]	; (8001ed4 <main+0x140>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4928      	ldr	r1, [pc, #160]	; (8001ee8 <main+0x154>)
 8001e48:	1c18      	adds	r0, r3, #0
 8001e4a:	f7fe f9f9 	bl	8000240 <__aeabi_fcmplt>
 8001e4e:	1e03      	subs	r3, r0, #0
 8001e50:	d1b6      	bne.n	8001dc0 <main+0x2c>

	  }else if(tensao == 1800 && tensao <= 1900){
 8001e52:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <main+0x140>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4925      	ldr	r1, [pc, #148]	; (8001eec <main+0x158>)
 8001e58:	1c18      	adds	r0, r3, #0
 8001e5a:	f7fe f9eb 	bl	8000234 <__aeabi_fcmpeq>
 8001e5e:	1e03      	subs	r3, r0, #0
 8001e60:	d02e      	beq.n	8001ec0 <main+0x12c>
 8001e62:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <main+0x140>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4922      	ldr	r1, [pc, #136]	; (8001ef0 <main+0x15c>)
 8001e68:	1c18      	adds	r0, r3, #0
 8001e6a:	f7fe f9f3 	bl	8000254 <__aeabi_fcmple>
 8001e6e:	1e03      	subs	r3, r0, #0
 8001e70:	d1a6      	bne.n	8001dc0 <main+0x2c>
	  }else if(tensao == 2500 && tensao <= 2600){
 8001e72:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <main+0x140>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	491f      	ldr	r1, [pc, #124]	; (8001ef4 <main+0x160>)
 8001e78:	1c18      	adds	r0, r3, #0
 8001e7a:	f7fe f9db 	bl	8000234 <__aeabi_fcmpeq>
 8001e7e:	1e03      	subs	r3, r0, #0
 8001e80:	d01e      	beq.n	8001ec0 <main+0x12c>
 8001e82:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <main+0x140>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	491c      	ldr	r1, [pc, #112]	; (8001ef8 <main+0x164>)
 8001e88:	1c18      	adds	r0, r3, #0
 8001e8a:	f7fe f9e3 	bl	8000254 <__aeabi_fcmple>
 8001e8e:	1e03      	subs	r3, r0, #0
 8001e90:	d196      	bne.n	8001dc0 <main+0x2c>

	  }else if(tensao == 2800 && tensao <= 2900){
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <main+0x140>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4919      	ldr	r1, [pc, #100]	; (8001efc <main+0x168>)
 8001e98:	1c18      	adds	r0, r3, #0
 8001e9a:	f7fe f9cb 	bl	8000234 <__aeabi_fcmpeq>
 8001e9e:	1e03      	subs	r3, r0, #0
 8001ea0:	d00e      	beq.n	8001ec0 <main+0x12c>
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <main+0x140>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4916      	ldr	r1, [pc, #88]	; (8001f00 <main+0x16c>)
 8001ea8:	1c18      	adds	r0, r3, #0
 8001eaa:	f7fe f9d3 	bl	8000254 <__aeabi_fcmple>
 8001eae:	1e03      	subs	r3, r0, #0
 8001eb0:	d000      	beq.n	8001eb4 <main+0x120>
 8001eb2:	e785      	b.n	8001dc0 <main+0x2c>

	  }else if(tensao == 3090 && tensao <= 3100){
 8001eb4:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <main+0x140>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4912      	ldr	r1, [pc, #72]	; (8001f04 <main+0x170>)
 8001eba:	1c18      	adds	r0, r3, #0
 8001ebc:	f7fe f9ba 	bl	8000234 <__aeabi_fcmpeq>
	  tensao = 3.3/4095.0* valorEntrada;
 8001ec0:	e77e      	b.n	8001dc0 <main+0x2c>
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	20000034 	.word	0x20000034
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	e734d9b4 	.word	0xe734d9b4
 8001ed0:	3f4a680c 	.word	0x3f4a680c
 8001ed4:	20000004 	.word	0x20000004
 8001ed8:	442a0000 	.word	0x442a0000
 8001edc:	66666666 	.word	0x66666666
 8001ee0:	400a6666 	.word	0x400a6666
 8001ee4:	20000008 	.word	0x20000008
 8001ee8:	41400000 	.word	0x41400000
 8001eec:	44e10000 	.word	0x44e10000
 8001ef0:	44ed8000 	.word	0x44ed8000
 8001ef4:	451c4000 	.word	0x451c4000
 8001ef8:	45228000 	.word	0x45228000
 8001efc:	452f0000 	.word	0x452f0000
 8001f00:	45354000 	.word	0x45354000
 8001f04:	45412000 	.word	0x45412000

08001f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f08:	b590      	push	{r4, r7, lr}
 8001f0a:	b095      	sub	sp, #84	; 0x54
 8001f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f0e:	2414      	movs	r4, #20
 8001f10:	193b      	adds	r3, r7, r4
 8001f12:	0018      	movs	r0, r3
 8001f14:	233c      	movs	r3, #60	; 0x3c
 8001f16:	001a      	movs	r2, r3
 8001f18:	2100      	movs	r1, #0
 8001f1a:	f002 feb1 	bl	8004c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	0018      	movs	r0, r3
 8001f22:	2310      	movs	r3, #16
 8001f24:	001a      	movs	r2, r3
 8001f26:	2100      	movs	r1, #0
 8001f28:	f002 feaa 	bl	8004c80 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	0018      	movs	r0, r3
 8001f32:	f001 ff15 	bl	8003d60 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f36:	193b      	adds	r3, r7, r4
 8001f38:	2202      	movs	r2, #2
 8001f3a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f3c:	193b      	adds	r3, r7, r4
 8001f3e:	2280      	movs	r2, #128	; 0x80
 8001f40:	0052      	lsls	r2, r2, #1
 8001f42:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001f44:	193b      	adds	r3, r7, r4
 8001f46:	2200      	movs	r2, #0
 8001f48:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f4a:	193b      	adds	r3, r7, r4
 8001f4c:	2240      	movs	r2, #64	; 0x40
 8001f4e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f50:	193b      	adds	r3, r7, r4
 8001f52:	2200      	movs	r2, #0
 8001f54:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f56:	193b      	adds	r3, r7, r4
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f001 ff41 	bl	8003de0 <HAL_RCC_OscConfig>
 8001f5e:	1e03      	subs	r3, r0, #0
 8001f60:	d001      	beq.n	8001f66 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001f62:	f000 f8b7 	bl	80020d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	2207      	movs	r2, #7
 8001f6a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	2200      	movs	r2, #0
 8001f70:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	2100      	movs	r1, #0
 8001f82:	0018      	movs	r0, r3
 8001f84:	f002 fa92 	bl	80044ac <HAL_RCC_ClockConfig>
 8001f88:	1e03      	subs	r3, r0, #0
 8001f8a:	d001      	beq.n	8001f90 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001f8c:	f000 f8a2 	bl	80020d4 <Error_Handler>
  }
}
 8001f90:	46c0      	nop			; (mov r8, r8)
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b015      	add	sp, #84	; 0x54
 8001f96:	bd90      	pop	{r4, r7, pc}

08001f98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	230c      	movs	r3, #12
 8001fa4:	001a      	movs	r2, r3
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	f002 fe6a 	bl	8004c80 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001fac:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <MX_ADC1_Init+0xcc>)
 8001fae:	4a2e      	ldr	r2, [pc, #184]	; (8002068 <MX_ADC1_Init+0xd0>)
 8001fb0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001fb2:	4b2c      	ldr	r3, [pc, #176]	; (8002064 <MX_ADC1_Init+0xcc>)
 8001fb4:	2280      	movs	r2, #128	; 0x80
 8001fb6:	05d2      	lsls	r2, r2, #23
 8001fb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fba:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <MX_ADC1_Init+0xcc>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fc0:	4b28      	ldr	r3, [pc, #160]	; (8002064 <MX_ADC1_Init+0xcc>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001fc6:	4b27      	ldr	r3, [pc, #156]	; (8002064 <MX_ADC1_Init+0xcc>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fcc:	4b25      	ldr	r3, [pc, #148]	; (8002064 <MX_ADC1_Init+0xcc>)
 8001fce:	2204      	movs	r2, #4
 8001fd0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001fd2:	4b24      	ldr	r3, [pc, #144]	; (8002064 <MX_ADC1_Init+0xcc>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001fd8:	4b22      	ldr	r3, [pc, #136]	; (8002064 <MX_ADC1_Init+0xcc>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fde:	4b21      	ldr	r3, [pc, #132]	; (8002064 <MX_ADC1_Init+0xcc>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <MX_ADC1_Init+0xcc>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fea:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <MX_ADC1_Init+0xcc>)
 8001fec:	2220      	movs	r2, #32
 8001fee:	2100      	movs	r1, #0
 8001ff0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ff2:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <MX_ADC1_Init+0xcc>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ff8:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <MX_ADC1_Init+0xcc>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ffe:	4b19      	ldr	r3, [pc, #100]	; (8002064 <MX_ADC1_Init+0xcc>)
 8002000:	222c      	movs	r2, #44	; 0x2c
 8002002:	2101      	movs	r1, #1
 8002004:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002006:	4b17      	ldr	r3, [pc, #92]	; (8002064 <MX_ADC1_Init+0xcc>)
 8002008:	2200      	movs	r2, #0
 800200a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800200c:	4b15      	ldr	r3, [pc, #84]	; (8002064 <MX_ADC1_Init+0xcc>)
 800200e:	2200      	movs	r2, #0
 8002010:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002012:	4b14      	ldr	r3, [pc, #80]	; (8002064 <MX_ADC1_Init+0xcc>)
 8002014:	2200      	movs	r2, #0
 8002016:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <MX_ADC1_Init+0xcc>)
 800201a:	223c      	movs	r2, #60	; 0x3c
 800201c:	2100      	movs	r1, #0
 800201e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002020:	4b10      	ldr	r3, [pc, #64]	; (8002064 <MX_ADC1_Init+0xcc>)
 8002022:	2200      	movs	r2, #0
 8002024:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002026:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <MX_ADC1_Init+0xcc>)
 8002028:	0018      	movs	r0, r3
 800202a:	f000 fb3b 	bl	80026a4 <HAL_ADC_Init>
 800202e:	1e03      	subs	r3, r0, #0
 8002030:	d001      	beq.n	8002036 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8002032:	f000 f84f 	bl	80020d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	2201      	movs	r2, #1
 800203a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	2200      	movs	r2, #0
 8002040:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002048:	1d3a      	adds	r2, r7, #4
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <MX_ADC1_Init+0xcc>)
 800204c:	0011      	movs	r1, r2
 800204e:	0018      	movs	r0, r3
 8002050:	f000 fdac 	bl	8002bac <HAL_ADC_ConfigChannel>
 8002054:	1e03      	subs	r3, r0, #0
 8002056:	d001      	beq.n	800205c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8002058:	f000 f83c 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800205c:	46c0      	nop			; (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	b004      	add	sp, #16
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000034 	.word	0x20000034
 8002068:	40012400 	.word	0x40012400

0800206c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <MX_DMA_Init+0x38>)
 8002074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <MX_DMA_Init+0x38>)
 8002078:	2101      	movs	r1, #1
 800207a:	430a      	orrs	r2, r1
 800207c:	639a      	str	r2, [r3, #56]	; 0x38
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <MX_DMA_Init+0x38>)
 8002080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002082:	2201      	movs	r2, #1
 8002084:	4013      	ands	r3, r2
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2100      	movs	r1, #0
 800208e:	2009      	movs	r0, #9
 8002090:	f001 fa28 	bl	80034e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002094:	2009      	movs	r0, #9
 8002096:	f001 fa3a 	bl	800350e <HAL_NVIC_EnableIRQ>

}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	46bd      	mov	sp, r7
 800209e:	b002      	add	sp, #8
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	40021000 	.word	0x40021000

080020a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <MX_GPIO_Init+0x28>)
 80020b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020b2:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <MX_GPIO_Init+0x28>)
 80020b4:	2101      	movs	r1, #1
 80020b6:	430a      	orrs	r2, r1
 80020b8:	635a      	str	r2, [r3, #52]	; 0x34
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <MX_GPIO_Init+0x28>)
 80020bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020be:	2201      	movs	r2, #1
 80020c0:	4013      	ands	r3, r2
 80020c2:	607b      	str	r3, [r7, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]

}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b002      	add	sp, #8
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	40021000 	.word	0x40021000

080020d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020d8:	b672      	cpsid	i
}
 80020da:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020dc:	e7fe      	b.n	80020dc <Error_Handler+0x8>
	...

080020e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e6:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_MspInit+0x4c>)
 80020e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <HAL_MspInit+0x4c>)
 80020ec:	2101      	movs	r1, #1
 80020ee:	430a      	orrs	r2, r1
 80020f0:	641a      	str	r2, [r3, #64]	; 0x40
 80020f2:	4b0e      	ldr	r3, [pc, #56]	; (800212c <HAL_MspInit+0x4c>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	2201      	movs	r2, #1
 80020f8:	4013      	ands	r3, r2
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_MspInit+0x4c>)
 8002100:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_MspInit+0x4c>)
 8002104:	2180      	movs	r1, #128	; 0x80
 8002106:	0549      	lsls	r1, r1, #21
 8002108:	430a      	orrs	r2, r1
 800210a:	63da      	str	r2, [r3, #60]	; 0x3c
 800210c:	4b07      	ldr	r3, [pc, #28]	; (800212c <HAL_MspInit+0x4c>)
 800210e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	055b      	lsls	r3, r3, #21
 8002114:	4013      	ands	r3, r2
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800211a:	23c0      	movs	r3, #192	; 0xc0
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	0018      	movs	r0, r3
 8002120:	f000 f96a 	bl	80023f8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002124:	46c0      	nop			; (mov r8, r8)
 8002126:	46bd      	mov	sp, r7
 8002128:	b002      	add	sp, #8
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40021000 	.word	0x40021000

08002130 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b09d      	sub	sp, #116	; 0x74
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	235c      	movs	r3, #92	; 0x5c
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	0018      	movs	r0, r3
 800213e:	2314      	movs	r3, #20
 8002140:	001a      	movs	r2, r3
 8002142:	2100      	movs	r1, #0
 8002144:	f002 fd9c 	bl	8004c80 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002148:	2410      	movs	r4, #16
 800214a:	193b      	adds	r3, r7, r4
 800214c:	0018      	movs	r0, r3
 800214e:	234c      	movs	r3, #76	; 0x4c
 8002150:	001a      	movs	r2, r3
 8002152:	2100      	movs	r1, #0
 8002154:	f002 fd94 	bl	8004c80 <memset>
  if(hadc->Instance==ADC1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a35      	ldr	r2, [pc, #212]	; (8002234 <HAL_ADC_MspInit+0x104>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d164      	bne.n	800222c <HAL_ADC_MspInit+0xfc>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002162:	193b      	adds	r3, r7, r4
 8002164:	2280      	movs	r2, #128	; 0x80
 8002166:	01d2      	lsls	r2, r2, #7
 8002168:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800216a:	193b      	adds	r3, r7, r4
 800216c:	2200      	movs	r2, #0
 800216e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002170:	193b      	adds	r3, r7, r4
 8002172:	0018      	movs	r0, r3
 8002174:	f002 fb24 	bl	80047c0 <HAL_RCCEx_PeriphCLKConfig>
 8002178:	1e03      	subs	r3, r0, #0
 800217a:	d001      	beq.n	8002180 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800217c:	f7ff ffaa 	bl	80020d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002180:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <HAL_ADC_MspInit+0x108>)
 8002182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002184:	4b2c      	ldr	r3, [pc, #176]	; (8002238 <HAL_ADC_MspInit+0x108>)
 8002186:	2180      	movs	r1, #128	; 0x80
 8002188:	0349      	lsls	r1, r1, #13
 800218a:	430a      	orrs	r2, r1
 800218c:	641a      	str	r2, [r3, #64]	; 0x40
 800218e:	4b2a      	ldr	r3, [pc, #168]	; (8002238 <HAL_ADC_MspInit+0x108>)
 8002190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	035b      	lsls	r3, r3, #13
 8002196:	4013      	ands	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219c:	4b26      	ldr	r3, [pc, #152]	; (8002238 <HAL_ADC_MspInit+0x108>)
 800219e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021a0:	4b25      	ldr	r3, [pc, #148]	; (8002238 <HAL_ADC_MspInit+0x108>)
 80021a2:	2101      	movs	r1, #1
 80021a4:	430a      	orrs	r2, r1
 80021a6:	635a      	str	r2, [r3, #52]	; 0x34
 80021a8:	4b23      	ldr	r3, [pc, #140]	; (8002238 <HAL_ADC_MspInit+0x108>)
 80021aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ac:	2201      	movs	r2, #1
 80021ae:	4013      	ands	r3, r2
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021b4:	215c      	movs	r1, #92	; 0x5c
 80021b6:	187b      	adds	r3, r7, r1
 80021b8:	2201      	movs	r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021bc:	187b      	adds	r3, r7, r1
 80021be:	2203      	movs	r2, #3
 80021c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	187b      	adds	r3, r7, r1
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c8:	187a      	adds	r2, r7, r1
 80021ca:	23a0      	movs	r3, #160	; 0xa0
 80021cc:	05db      	lsls	r3, r3, #23
 80021ce:	0011      	movs	r1, r2
 80021d0:	0018      	movs	r0, r3
 80021d2:	f001 fc59 	bl	8003a88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80021d6:	4b19      	ldr	r3, [pc, #100]	; (800223c <HAL_ADC_MspInit+0x10c>)
 80021d8:	4a19      	ldr	r2, [pc, #100]	; (8002240 <HAL_ADC_MspInit+0x110>)
 80021da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80021dc:	4b17      	ldr	r3, [pc, #92]	; (800223c <HAL_ADC_MspInit+0x10c>)
 80021de:	2205      	movs	r2, #5
 80021e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021e2:	4b16      	ldr	r3, [pc, #88]	; (800223c <HAL_ADC_MspInit+0x10c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e8:	4b14      	ldr	r3, [pc, #80]	; (800223c <HAL_ADC_MspInit+0x10c>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021ee:	4b13      	ldr	r3, [pc, #76]	; (800223c <HAL_ADC_MspInit+0x10c>)
 80021f0:	2280      	movs	r2, #128	; 0x80
 80021f2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <HAL_ADC_MspInit+0x10c>)
 80021f6:	2280      	movs	r2, #128	; 0x80
 80021f8:	0092      	lsls	r2, r2, #2
 80021fa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <HAL_ADC_MspInit+0x10c>)
 80021fe:	2280      	movs	r2, #128	; 0x80
 8002200:	0112      	lsls	r2, r2, #4
 8002202:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002204:	4b0d      	ldr	r3, [pc, #52]	; (800223c <HAL_ADC_MspInit+0x10c>)
 8002206:	2220      	movs	r2, #32
 8002208:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <HAL_ADC_MspInit+0x10c>)
 800220c:	2200      	movs	r2, #0
 800220e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002210:	4b0a      	ldr	r3, [pc, #40]	; (800223c <HAL_ADC_MspInit+0x10c>)
 8002212:	0018      	movs	r0, r3
 8002214:	f001 f998 	bl	8003548 <HAL_DMA_Init>
 8002218:	1e03      	subs	r3, r0, #0
 800221a:	d001      	beq.n	8002220 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 800221c:	f7ff ff5a 	bl	80020d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a06      	ldr	r2, [pc, #24]	; (800223c <HAL_ADC_MspInit+0x10c>)
 8002224:	651a      	str	r2, [r3, #80]	; 0x50
 8002226:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_ADC_MspInit+0x10c>)
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	b01d      	add	sp, #116	; 0x74
 8002232:	bd90      	pop	{r4, r7, pc}
 8002234:	40012400 	.word	0x40012400
 8002238:	40021000 	.word	0x40021000
 800223c:	20000098 	.word	0x20000098
 8002240:	40020008 	.word	0x40020008

08002244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002248:	e7fe      	b.n	8002248 <NMI_Handler+0x4>

0800224a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800224e:	e7fe      	b.n	800224e <HardFault_Handler+0x4>

08002250 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002254:	46c0      	nop			; (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002268:	f000 f8aa 	bl	80023c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800226c:	46c0      	nop			; (mov r8, r8)
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <DMA1_Channel1_IRQHandler+0x14>)
 800227a:	0018      	movs	r0, r3
 800227c:	f001 fa96 	bl	80037ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002280:	46c0      	nop			; (mov r8, r8)
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	20000098 	.word	0x20000098

0800228c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002290:	46c0      	nop			; (mov r8, r8)
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002298:	480d      	ldr	r0, [pc, #52]	; (80022d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800229a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800229c:	f7ff fff6 	bl	800228c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022a0:	480c      	ldr	r0, [pc, #48]	; (80022d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80022a2:	490d      	ldr	r1, [pc, #52]	; (80022d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022a4:	4a0d      	ldr	r2, [pc, #52]	; (80022dc <LoopForever+0xe>)
  movs r3, #0
 80022a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a8:	e002      	b.n	80022b0 <LoopCopyDataInit>

080022aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ae:	3304      	adds	r3, #4

080022b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b4:	d3f9      	bcc.n	80022aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022b6:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022b8:	4c0a      	ldr	r4, [pc, #40]	; (80022e4 <LoopForever+0x16>)
  movs r3, #0
 80022ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022bc:	e001      	b.n	80022c2 <LoopFillZerobss>

080022be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c0:	3204      	adds	r2, #4

080022c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c4:	d3fb      	bcc.n	80022be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80022c6:	f002 fcb7 	bl	8004c38 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80022ca:	f7ff fd63 	bl	8001d94 <main>

080022ce <LoopForever>:

LoopForever:
  b LoopForever
 80022ce:	e7fe      	b.n	80022ce <LoopForever>
  ldr   r0, =_estack
 80022d0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80022d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80022dc:	08004db0 	.word	0x08004db0
  ldr r2, =_sbss
 80022e0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80022e4:	200000fc 	.word	0x200000fc

080022e8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022e8:	e7fe      	b.n	80022e8 <ADC1_COMP_IRQHandler>
	...

080022ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022f2:	1dfb      	adds	r3, r7, #7
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_Init+0x3c>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <HAL_Init+0x3c>)
 80022fe:	2180      	movs	r1, #128	; 0x80
 8002300:	0049      	lsls	r1, r1, #1
 8002302:	430a      	orrs	r2, r1
 8002304:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002306:	2003      	movs	r0, #3
 8002308:	f000 f810 	bl	800232c <HAL_InitTick>
 800230c:	1e03      	subs	r3, r0, #0
 800230e:	d003      	beq.n	8002318 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002310:	1dfb      	adds	r3, r7, #7
 8002312:	2201      	movs	r2, #1
 8002314:	701a      	strb	r2, [r3, #0]
 8002316:	e001      	b.n	800231c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002318:	f7ff fee2 	bl	80020e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800231c:	1dfb      	adds	r3, r7, #7
 800231e:	781b      	ldrb	r3, [r3, #0]
}
 8002320:	0018      	movs	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	b002      	add	sp, #8
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40022000 	.word	0x40022000

0800232c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800232c:	b590      	push	{r4, r7, lr}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002334:	230f      	movs	r3, #15
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800233c:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <HAL_InitTick+0x88>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d02b      	beq.n	800239c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002344:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <HAL_InitTick+0x8c>)
 8002346:	681c      	ldr	r4, [r3, #0]
 8002348:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <HAL_InitTick+0x88>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	0019      	movs	r1, r3
 800234e:	23fa      	movs	r3, #250	; 0xfa
 8002350:	0098      	lsls	r0, r3, #2
 8002352:	f7fd fed7 	bl	8000104 <__udivsi3>
 8002356:	0003      	movs	r3, r0
 8002358:	0019      	movs	r1, r3
 800235a:	0020      	movs	r0, r4
 800235c:	f7fd fed2 	bl	8000104 <__udivsi3>
 8002360:	0003      	movs	r3, r0
 8002362:	0018      	movs	r0, r3
 8002364:	f001 f8e3 	bl	800352e <HAL_SYSTICK_Config>
 8002368:	1e03      	subs	r3, r0, #0
 800236a:	d112      	bne.n	8002392 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d80a      	bhi.n	8002388 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	2301      	movs	r3, #1
 8002376:	425b      	negs	r3, r3
 8002378:	2200      	movs	r2, #0
 800237a:	0018      	movs	r0, r3
 800237c:	f001 f8b2 	bl	80034e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002380:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <HAL_InitTick+0x90>)
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	e00d      	b.n	80023a4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002388:	230f      	movs	r3, #15
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	2201      	movs	r2, #1
 800238e:	701a      	strb	r2, [r3, #0]
 8002390:	e008      	b.n	80023a4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002392:	230f      	movs	r3, #15
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
 800239a:	e003      	b.n	80023a4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800239c:	230f      	movs	r3, #15
 800239e:	18fb      	adds	r3, r7, r3
 80023a0:	2201      	movs	r2, #1
 80023a2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80023a4:	230f      	movs	r3, #15
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	781b      	ldrb	r3, [r3, #0]
}
 80023aa:	0018      	movs	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b005      	add	sp, #20
 80023b0:	bd90      	pop	{r4, r7, pc}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	20000014 	.word	0x20000014
 80023b8:	2000000c 	.word	0x2000000c
 80023bc:	20000010 	.word	0x20000010

080023c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_IncTick+0x1c>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	001a      	movs	r2, r3
 80023ca:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <HAL_IncTick+0x20>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	18d2      	adds	r2, r2, r3
 80023d0:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <HAL_IncTick+0x20>)
 80023d2:	601a      	str	r2, [r3, #0]
}
 80023d4:	46c0      	nop			; (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	20000014 	.word	0x20000014
 80023e0:	200000f8 	.word	0x200000f8

080023e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  return uwTick;
 80023e8:	4b02      	ldr	r3, [pc, #8]	; (80023f4 <HAL_GetTick+0x10>)
 80023ea:	681b      	ldr	r3, [r3, #0]
}
 80023ec:	0018      	movs	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	200000f8 	.word	0x200000f8

080023f8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a06      	ldr	r2, [pc, #24]	; (8002420 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002406:	4013      	ands	r3, r2
 8002408:	0019      	movs	r1, r3
 800240a:	4b04      	ldr	r3, [pc, #16]	; (800241c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	430a      	orrs	r2, r1
 8002410:	601a      	str	r2, [r3, #0]
}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	46bd      	mov	sp, r7
 8002416:	b002      	add	sp, #8
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	40010000 	.word	0x40010000
 8002420:	fffff9ff 	.word	0xfffff9ff

08002424 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a05      	ldr	r2, [pc, #20]	; (8002448 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002434:	401a      	ands	r2, r3
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	601a      	str	r2, [r3, #0]
}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	46bd      	mov	sp, r7
 8002442:	b002      	add	sp, #8
 8002444:	bd80      	pop	{r7, pc}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	fe3fffff 	.word	0xfe3fffff

0800244c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	23e0      	movs	r3, #224	; 0xe0
 800245a:	045b      	lsls	r3, r3, #17
 800245c:	4013      	ands	r3, r2
}
 800245e:	0018      	movs	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	b002      	add	sp, #8
 8002464:	bd80      	pop	{r7, pc}

08002466 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	2104      	movs	r1, #4
 800247a:	400a      	ands	r2, r1
 800247c:	2107      	movs	r1, #7
 800247e:	4091      	lsls	r1, r2
 8002480:	000a      	movs	r2, r1
 8002482:	43d2      	mvns	r2, r2
 8002484:	401a      	ands	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2104      	movs	r1, #4
 800248a:	400b      	ands	r3, r1
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4099      	lsls	r1, r3
 8002490:	000b      	movs	r3, r1
 8002492:	431a      	orrs	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002498:	46c0      	nop			; (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b004      	add	sp, #16
 800249e:	bd80      	pop	{r7, pc}

080024a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	23c0      	movs	r3, #192	; 0xc0
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	4013      	ands	r3, r2
 80024b2:	d101      	bne.n	80024b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	0018      	movs	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	b002      	add	sp, #8
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b084      	sub	sp, #16
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	211f      	movs	r1, #31
 80024d6:	400a      	ands	r2, r1
 80024d8:	210f      	movs	r1, #15
 80024da:	4091      	lsls	r1, r2
 80024dc:	000a      	movs	r2, r1
 80024de:	43d2      	mvns	r2, r2
 80024e0:	401a      	ands	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	0e9b      	lsrs	r3, r3, #26
 80024e6:	210f      	movs	r1, #15
 80024e8:	4019      	ands	r1, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	201f      	movs	r0, #31
 80024ee:	4003      	ands	r3, r0
 80024f0:	4099      	lsls	r1, r3
 80024f2:	000b      	movs	r3, r1
 80024f4:	431a      	orrs	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b004      	add	sp, #16
 8002500:	bd80      	pop	{r7, pc}

08002502 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	035b      	lsls	r3, r3, #13
 8002514:	0b5b      	lsrs	r3, r3, #13
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800251c:	46c0      	nop			; (mov r8, r8)
 800251e:	46bd      	mov	sp, r7
 8002520:	b002      	add	sp, #8
 8002522:	bd80      	pop	{r7, pc}

08002524 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	0352      	lsls	r2, r2, #13
 8002536:	0b52      	lsrs	r2, r2, #13
 8002538:	43d2      	mvns	r2, r2
 800253a:	401a      	ands	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002540:	46c0      	nop			; (mov r8, r8)
 8002542:	46bd      	mov	sp, r7
 8002544:	b002      	add	sp, #8
 8002546:	bd80      	pop	{r7, pc}

08002548 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	0212      	lsls	r2, r2, #8
 800255c:	43d2      	mvns	r2, r2
 800255e:	401a      	ands	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	400b      	ands	r3, r1
 8002568:	4904      	ldr	r1, [pc, #16]	; (800257c <LL_ADC_SetChannelSamplingTime+0x34>)
 800256a:	400b      	ands	r3, r1
 800256c:	431a      	orrs	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	46bd      	mov	sp, r7
 8002576:	b004      	add	sp, #16
 8002578:	bd80      	pop	{r7, pc}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	07ffff00 	.word	0x07ffff00

08002580 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <LL_ADC_EnableInternalRegulator+0x24>)
 800258e:	4013      	ands	r3, r2
 8002590:	2280      	movs	r2, #128	; 0x80
 8002592:	0552      	lsls	r2, r2, #21
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	46bd      	mov	sp, r7
 800259e:	b002      	add	sp, #8
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	6fffffe8 	.word	0x6fffffe8

080025a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	055b      	lsls	r3, r3, #21
 80025b8:	401a      	ands	r2, r3
 80025ba:	2380      	movs	r3, #128	; 0x80
 80025bc:	055b      	lsls	r3, r3, #21
 80025be:	429a      	cmp	r2, r3
 80025c0:	d101      	bne.n	80025c6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	0018      	movs	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b002      	add	sp, #8
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <LL_ADC_Enable+0x20>)
 80025de:	4013      	ands	r3, r2
 80025e0:	2201      	movs	r2, #1
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80025e8:	46c0      	nop			; (mov r8, r8)
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b002      	add	sp, #8
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	7fffffe8 	.word	0x7fffffe8

080025f4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4a04      	ldr	r2, [pc, #16]	; (8002614 <LL_ADC_Disable+0x20>)
 8002602:	4013      	ands	r3, r2
 8002604:	2202      	movs	r2, #2
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800260c:	46c0      	nop			; (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b002      	add	sp, #8
 8002612:	bd80      	pop	{r7, pc}
 8002614:	7fffffe8 	.word	0x7fffffe8

08002618 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2201      	movs	r2, #1
 8002626:	4013      	ands	r3, r2
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <LL_ADC_IsEnabled+0x18>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <LL_ADC_IsEnabled+0x1a>
 8002630:	2300      	movs	r3, #0
}
 8002632:	0018      	movs	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	b002      	add	sp, #8
 8002638:	bd80      	pop	{r7, pc}

0800263a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2202      	movs	r2, #2
 8002648:	4013      	ands	r3, r2
 800264a:	2b02      	cmp	r3, #2
 800264c:	d101      	bne.n	8002652 <LL_ADC_IsDisableOngoing+0x18>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <LL_ADC_IsDisableOngoing+0x1a>
 8002652:	2300      	movs	r3, #0
}
 8002654:	0018      	movs	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	b002      	add	sp, #8
 800265a:	bd80      	pop	{r7, pc}

0800265c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4a04      	ldr	r2, [pc, #16]	; (800267c <LL_ADC_REG_StartConversion+0x20>)
 800266a:	4013      	ands	r3, r2
 800266c:	2204      	movs	r2, #4
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002674:	46c0      	nop			; (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	b002      	add	sp, #8
 800267a:	bd80      	pop	{r7, pc}
 800267c:	7fffffe8 	.word	0x7fffffe8

08002680 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2204      	movs	r2, #4
 800268e:	4013      	ands	r3, r2
 8002690:	2b04      	cmp	r3, #4
 8002692:	d101      	bne.n	8002698 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002698:	2300      	movs	r3, #0
}
 800269a:	0018      	movs	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	b002      	add	sp, #8
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ac:	231f      	movs	r3, #31
 80026ae:	18fb      	adds	r3, r7, r3
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e1b1      	b.n	8002a2e <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10a      	bne.n	80026e8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	0018      	movs	r0, r3
 80026d6:	f7ff fd2b 	bl	8002130 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2254      	movs	r2, #84	; 0x54
 80026e4:	2100      	movs	r1, #0
 80026e6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	0018      	movs	r0, r3
 80026ee:	f7ff ff5b 	bl	80025a8 <LL_ADC_IsInternalRegulatorEnabled>
 80026f2:	1e03      	subs	r3, r0, #0
 80026f4:	d115      	bne.n	8002722 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	0018      	movs	r0, r3
 80026fc:	f7ff ff40 	bl	8002580 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002700:	4bcd      	ldr	r3, [pc, #820]	; (8002a38 <HAL_ADC_Init+0x394>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	49cd      	ldr	r1, [pc, #820]	; (8002a3c <HAL_ADC_Init+0x398>)
 8002706:	0018      	movs	r0, r3
 8002708:	f7fd fcfc 	bl	8000104 <__udivsi3>
 800270c:	0003      	movs	r3, r0
 800270e:	3301      	adds	r3, #1
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002714:	e002      	b.n	800271c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	3b01      	subs	r3, #1
 800271a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f9      	bne.n	8002716 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	0018      	movs	r0, r3
 8002728:	f7ff ff3e 	bl	80025a8 <LL_ADC_IsInternalRegulatorEnabled>
 800272c:	1e03      	subs	r3, r0, #0
 800272e:	d10f      	bne.n	8002750 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002734:	2210      	movs	r2, #16
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002740:	2201      	movs	r2, #1
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002748:	231f      	movs	r3, #31
 800274a:	18fb      	adds	r3, r7, r3
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	0018      	movs	r0, r3
 8002756:	f7ff ff93 	bl	8002680 <LL_ADC_REG_IsConversionOngoing>
 800275a:	0003      	movs	r3, r0
 800275c:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002762:	2210      	movs	r2, #16
 8002764:	4013      	ands	r3, r2
 8002766:	d000      	beq.n	800276a <HAL_ADC_Init+0xc6>
 8002768:	e154      	b.n	8002a14 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d000      	beq.n	8002772 <HAL_ADC_Init+0xce>
 8002770:	e150      	b.n	8002a14 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002776:	4ab2      	ldr	r2, [pc, #712]	; (8002a40 <HAL_ADC_Init+0x39c>)
 8002778:	4013      	ands	r3, r2
 800277a:	2202      	movs	r2, #2
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	0018      	movs	r0, r3
 8002788:	f7ff ff46 	bl	8002618 <LL_ADC_IsEnabled>
 800278c:	1e03      	subs	r3, r0, #0
 800278e:	d156      	bne.n	800283e <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	2218      	movs	r2, #24
 8002798:	4393      	bics	r3, r2
 800279a:	0019      	movs	r1, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	0f9b      	lsrs	r3, r3, #30
 80027ae:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80027b4:	4313      	orrs	r3, r2
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	223c      	movs	r2, #60	; 0x3c
 80027c0:	5c9b      	ldrb	r3, [r3, r2]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d111      	bne.n	80027ea <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	0f9b      	lsrs	r3, r3, #30
 80027cc:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80027d2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80027d8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80027de:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	2201      	movs	r2, #1
 80027e6:	4313      	orrs	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	4a94      	ldr	r2, [pc, #592]	; (8002a44 <HAL_ADC_Init+0x3a0>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	0019      	movs	r1, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	23c0      	movs	r3, #192	; 0xc0
 8002806:	061b      	lsls	r3, r3, #24
 8002808:	429a      	cmp	r2, r3
 800280a:	d018      	beq.n	800283e <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	05db      	lsls	r3, r3, #23
 8002814:	429a      	cmp	r2, r3
 8002816:	d012      	beq.n	800283e <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800281c:	2380      	movs	r3, #128	; 0x80
 800281e:	061b      	lsls	r3, r3, #24
 8002820:	429a      	cmp	r2, r3
 8002822:	d00c      	beq.n	800283e <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002824:	4b88      	ldr	r3, [pc, #544]	; (8002a48 <HAL_ADC_Init+0x3a4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a88      	ldr	r2, [pc, #544]	; (8002a4c <HAL_ADC_Init+0x3a8>)
 800282a:	4013      	ands	r3, r2
 800282c:	0019      	movs	r1, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	23f0      	movs	r3, #240	; 0xf0
 8002834:	039b      	lsls	r3, r3, #14
 8002836:	401a      	ands	r2, r3
 8002838:	4b83      	ldr	r3, [pc, #524]	; (8002a48 <HAL_ADC_Init+0x3a4>)
 800283a:	430a      	orrs	r2, r1
 800283c:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	7e1b      	ldrb	r3, [r3, #24]
 8002842:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7e5b      	ldrb	r3, [r3, #25]
 8002848:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800284a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	7e9b      	ldrb	r3, [r3, #26]
 8002850:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002852:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <HAL_ADC_Init+0x1be>
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	015b      	lsls	r3, r3, #5
 8002860:	e000      	b.n	8002864 <HAL_ADC_Init+0x1c0>
 8002862:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002864:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800286a:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	2b00      	cmp	r3, #0
 8002872:	da04      	bge.n	800287e <HAL_ADC_Init+0x1da>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	085b      	lsrs	r3, r3, #1
 800287c:	e001      	b.n	8002882 <HAL_ADC_Init+0x1de>
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8002882:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	212c      	movs	r1, #44	; 0x2c
 8002888:	5c5b      	ldrb	r3, [r3, r1]
 800288a:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800288c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2220      	movs	r2, #32
 8002898:	5c9b      	ldrb	r3, [r3, r2]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d115      	bne.n	80028ca <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	7e9b      	ldrb	r3, [r3, #26]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d105      	bne.n	80028b2 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	2280      	movs	r2, #128	; 0x80
 80028aa:	0252      	lsls	r2, r2, #9
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
 80028b0:	e00b      	b.n	80028ca <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	2220      	movs	r2, #32
 80028b8:	431a      	orrs	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c2:	2201      	movs	r2, #1
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028d6:	23e0      	movs	r3, #224	; 0xe0
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80028e0:	4313      	orrs	r3, r2
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	4a58      	ldr	r2, [pc, #352]	; (8002a50 <HAL_ADC_Init+0x3ac>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	0019      	movs	r1, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	4a53      	ldr	r2, [pc, #332]	; (8002a54 <HAL_ADC_Init+0x3b0>)
 8002906:	4013      	ands	r3, r2
 8002908:	0019      	movs	r1, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	430a      	orrs	r2, r1
 8002912:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291c:	001a      	movs	r2, r3
 800291e:	2100      	movs	r1, #0
 8002920:	f7ff fda1 	bl	8002466 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292c:	494a      	ldr	r1, [pc, #296]	; (8002a58 <HAL_ADC_Init+0x3b4>)
 800292e:	001a      	movs	r2, r3
 8002930:	f7ff fd99 	bl	8002466 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d109      	bne.n	8002950 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2110      	movs	r1, #16
 8002948:	4249      	negs	r1, r1
 800294a:	430a      	orrs	r2, r1
 800294c:	629a      	str	r2, [r3, #40]	; 0x28
 800294e:	e03a      	b.n	80029c6 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	2380      	movs	r3, #128	; 0x80
 8002956:	039b      	lsls	r3, r3, #14
 8002958:	429a      	cmp	r2, r3
 800295a:	d134      	bne.n	80029c6 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800295c:	2300      	movs	r3, #0
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	e00c      	b.n	800297c <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	40da      	lsrs	r2, r3
 800296c:	0013      	movs	r3, r2
 800296e:	220f      	movs	r2, #15
 8002970:	4013      	ands	r3, r2
 8002972:	2b0f      	cmp	r3, #15
 8002974:	d006      	beq.n	8002984 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	3301      	adds	r3, #1
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	2b07      	cmp	r3, #7
 8002980:	d9ef      	bls.n	8002962 <HAL_ADC_Init+0x2be>
 8002982:	e000      	b.n	8002986 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8002984:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d109      	bne.n	80029a0 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2110      	movs	r1, #16
 8002998:	4249      	negs	r1, r1
 800299a:	430a      	orrs	r2, r1
 800299c:	629a      	str	r2, [r3, #40]	; 0x28
 800299e:	e012      	b.n	80029c6 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	221c      	movs	r2, #28
 80029b0:	4013      	ands	r3, r2
 80029b2:	2210      	movs	r2, #16
 80029b4:	4252      	negs	r2, r2
 80029b6:	409a      	lsls	r2, r3
 80029b8:	0011      	movs	r1, r2
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4a23      	ldr	r2, [pc, #140]	; (8002a5c <HAL_ADC_Init+0x3b8>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d10b      	bne.n	80029ee <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e0:	2203      	movs	r2, #3
 80029e2:	4393      	bics	r3, r2
 80029e4:	2201      	movs	r2, #1
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80029ec:	e01c      	b.n	8002a28 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f2:	2212      	movs	r2, #18
 80029f4:	4393      	bics	r3, r2
 80029f6:	2210      	movs	r2, #16
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a02:	2201      	movs	r2, #1
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002a0a:	231f      	movs	r3, #31
 8002a0c:	18fb      	adds	r3, r7, r3
 8002a0e:	2201      	movs	r2, #1
 8002a10:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002a12:	e009      	b.n	8002a28 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a18:	2210      	movs	r2, #16
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a20:	231f      	movs	r3, #31
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002a28:	231f      	movs	r3, #31
 8002a2a:	18fb      	adds	r3, r7, r3
 8002a2c:	781b      	ldrb	r3, [r3, #0]
}
 8002a2e:	0018      	movs	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	b008      	add	sp, #32
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	2000000c 	.word	0x2000000c
 8002a3c:	00030d40 	.word	0x00030d40
 8002a40:	fffffefd 	.word	0xfffffefd
 8002a44:	1ffffc02 	.word	0x1ffffc02
 8002a48:	40012708 	.word	0x40012708
 8002a4c:	ffc3ffff 	.word	0xffc3ffff
 8002a50:	fffe0219 	.word	0xfffe0219
 8002a54:	dffffc02 	.word	0xdffffc02
 8002a58:	07ffff04 	.word	0x07ffff04
 8002a5c:	833fffe7 	.word	0x833fffe7

08002a60 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a60:	b5b0      	push	{r4, r5, r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	0018      	movs	r0, r3
 8002a72:	f7ff fe05 	bl	8002680 <LL_ADC_REG_IsConversionOngoing>
 8002a76:	1e03      	subs	r3, r0, #0
 8002a78:	d16c      	bne.n	8002b54 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2254      	movs	r2, #84	; 0x54
 8002a7e:	5c9b      	ldrb	r3, [r3, r2]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_ADC_Start_DMA+0x28>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e06c      	b.n	8002b62 <HAL_ADC_Start_DMA+0x102>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2254      	movs	r2, #84	; 0x54
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	2201      	movs	r2, #1
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d113      	bne.n	8002ac4 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f7ff fdb9 	bl	8002618 <LL_ADC_IsEnabled>
 8002aa6:	1e03      	subs	r3, r0, #0
 8002aa8:	d004      	beq.n	8002ab4 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f7ff fda0 	bl	80025f4 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2101      	movs	r1, #1
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ac4:	2517      	movs	r5, #23
 8002ac6:	197c      	adds	r4, r7, r5
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	0018      	movs	r0, r3
 8002acc:	f000 fa46 	bl	8002f5c <ADC_Enable>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ad4:	002c      	movs	r4, r5
 8002ad6:	193b      	adds	r3, r7, r4
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d13e      	bne.n	8002b5c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae2:	4a22      	ldr	r2, [pc, #136]	; (8002b6c <HAL_ADC_Start_DMA+0x10c>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2280      	movs	r2, #128	; 0x80
 8002ae8:	0052      	lsls	r2, r2, #1
 8002aea:	431a      	orrs	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afa:	4a1d      	ldr	r2, [pc, #116]	; (8002b70 <HAL_ADC_Start_DMA+0x110>)
 8002afc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b02:	4a1c      	ldr	r2, [pc, #112]	; (8002b74 <HAL_ADC_Start_DMA+0x114>)
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b0a:	4a1b      	ldr	r2, [pc, #108]	; (8002b78 <HAL_ADC_Start_DMA+0x118>)
 8002b0c:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	221c      	movs	r2, #28
 8002b14:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2254      	movs	r2, #84	; 0x54
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2110      	movs	r1, #16
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	3340      	adds	r3, #64	; 0x40
 8002b38:	0019      	movs	r1, r3
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	193c      	adds	r4, r7, r4
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f000 fdae 	bl	80036a0 <HAL_DMA_Start_IT>
 8002b44:	0003      	movs	r3, r0
 8002b46:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f7ff fd85 	bl	800265c <LL_ADC_REG_StartConversion>
 8002b52:	e003      	b.n	8002b5c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b54:	2317      	movs	r3, #23
 8002b56:	18fb      	adds	r3, r7, r3
 8002b58:	2202      	movs	r2, #2
 8002b5a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002b5c:	2317      	movs	r3, #23
 8002b5e:	18fb      	adds	r3, r7, r3
 8002b60:	781b      	ldrb	r3, [r3, #0]
}
 8002b62:	0018      	movs	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	b006      	add	sp, #24
 8002b68:	bdb0      	pop	{r4, r5, r7, pc}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	fffff0fe 	.word	0xfffff0fe
 8002b70:	08003125 	.word	0x08003125
 8002b74:	080031ed 	.word	0x080031ed
 8002b78:	0800320b 	.word	0x0800320b

08002b7c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002b94:	46c0      	nop			; (mov r8, r8)
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b002      	add	sp, #8
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ba4:	46c0      	nop			; (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b002      	add	sp, #8
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb6:	2317      	movs	r3, #23
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2254      	movs	r2, #84	; 0x54
 8002bc6:	5c9b      	ldrb	r3, [r3, r2]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x24>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e1c0      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x3a6>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2254      	movs	r2, #84	; 0x54
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7ff fd4f 	bl	8002680 <LL_ADC_REG_IsConversionOngoing>
 8002be2:	1e03      	subs	r3, r0, #0
 8002be4:	d000      	beq.n	8002be8 <HAL_ADC_ConfigChannel+0x3c>
 8002be6:	e1a3      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d100      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x46>
 8002bf0:	e143      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	2380      	movs	r3, #128	; 0x80
 8002bf8:	061b      	lsls	r3, r3, #24
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d004      	beq.n	8002c08 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c02:	4ac1      	ldr	r2, [pc, #772]	; (8002f08 <HAL_ADC_ConfigChannel+0x35c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d108      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	0019      	movs	r1, r3
 8002c12:	0010      	movs	r0, r2
 8002c14:	f7ff fc75 	bl	8002502 <LL_ADC_REG_SetSequencerChAdd>
 8002c18:	e0c9      	b.n	8002dae <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	211f      	movs	r1, #31
 8002c24:	400b      	ands	r3, r1
 8002c26:	210f      	movs	r1, #15
 8002c28:	4099      	lsls	r1, r3
 8002c2a:	000b      	movs	r3, r1
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	4013      	ands	r3, r2
 8002c30:	0019      	movs	r1, r3
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	035b      	lsls	r3, r3, #13
 8002c38:	0b5b      	lsrs	r3, r3, #13
 8002c3a:	d105      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x9c>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	0e9b      	lsrs	r3, r3, #26
 8002c42:	221f      	movs	r2, #31
 8002c44:	4013      	ands	r3, r2
 8002c46:	e098      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1ce>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d000      	beq.n	8002c54 <HAL_ADC_ConfigChannel+0xa8>
 8002c52:	e091      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x1cc>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d000      	beq.n	8002c60 <HAL_ADC_ConfigChannel+0xb4>
 8002c5e:	e089      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x1c8>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2204      	movs	r2, #4
 8002c66:	4013      	ands	r3, r2
 8002c68:	d000      	beq.n	8002c6c <HAL_ADC_ConfigChannel+0xc0>
 8002c6a:	e081      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x1c4>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2208      	movs	r2, #8
 8002c72:	4013      	ands	r3, r2
 8002c74:	d000      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0xcc>
 8002c76:	e079      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x1c0>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2210      	movs	r2, #16
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d000      	beq.n	8002c84 <HAL_ADC_ConfigChannel+0xd8>
 8002c82:	e071      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x1bc>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d000      	beq.n	8002c90 <HAL_ADC_ConfigChannel+0xe4>
 8002c8e:	e069      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x1b8>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2240      	movs	r2, #64	; 0x40
 8002c96:	4013      	ands	r3, r2
 8002c98:	d000      	beq.n	8002c9c <HAL_ADC_ConfigChannel+0xf0>
 8002c9a:	e061      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x1b4>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2280      	movs	r2, #128	; 0x80
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d000      	beq.n	8002ca8 <HAL_ADC_ConfigChannel+0xfc>
 8002ca6:	e059      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x1b0>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d151      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x1ac>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	2380      	movs	r3, #128	; 0x80
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d149      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x1a8>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d141      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x1a4>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	2380      	movs	r3, #128	; 0x80
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d139      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x1a0>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	2380      	movs	r3, #128	; 0x80
 8002cde:	015b      	lsls	r3, r3, #5
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d131      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x19c>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	2380      	movs	r3, #128	; 0x80
 8002cea:	019b      	lsls	r3, r3, #6
 8002cec:	4013      	ands	r3, r2
 8002cee:	d129      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x198>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	01db      	lsls	r3, r3, #7
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d121      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x194>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	2380      	movs	r3, #128	; 0x80
 8002d02:	021b      	lsls	r3, r3, #8
 8002d04:	4013      	ands	r3, r2
 8002d06:	d119      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x190>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	025b      	lsls	r3, r3, #9
 8002d10:	4013      	ands	r3, r2
 8002d12:	d111      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x18c>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	029b      	lsls	r3, r3, #10
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d109      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x188>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	02db      	lsls	r3, r3, #11
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d001      	beq.n	8002d30 <HAL_ADC_ConfigChannel+0x184>
 8002d2c:	2312      	movs	r3, #18
 8002d2e:	e024      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1ce>
 8002d30:	2300      	movs	r3, #0
 8002d32:	e022      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1ce>
 8002d34:	2311      	movs	r3, #17
 8002d36:	e020      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1ce>
 8002d38:	2310      	movs	r3, #16
 8002d3a:	e01e      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1ce>
 8002d3c:	230f      	movs	r3, #15
 8002d3e:	e01c      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1ce>
 8002d40:	230e      	movs	r3, #14
 8002d42:	e01a      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1ce>
 8002d44:	230d      	movs	r3, #13
 8002d46:	e018      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1ce>
 8002d48:	230c      	movs	r3, #12
 8002d4a:	e016      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1ce>
 8002d4c:	230b      	movs	r3, #11
 8002d4e:	e014      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1ce>
 8002d50:	230a      	movs	r3, #10
 8002d52:	e012      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1ce>
 8002d54:	2309      	movs	r3, #9
 8002d56:	e010      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1ce>
 8002d58:	2308      	movs	r3, #8
 8002d5a:	e00e      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1ce>
 8002d5c:	2307      	movs	r3, #7
 8002d5e:	e00c      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1ce>
 8002d60:	2306      	movs	r3, #6
 8002d62:	e00a      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1ce>
 8002d64:	2305      	movs	r3, #5
 8002d66:	e008      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1ce>
 8002d68:	2304      	movs	r3, #4
 8002d6a:	e006      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1ce>
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e004      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1ce>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e002      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1ce>
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1ce>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	6852      	ldr	r2, [r2, #4]
 8002d7e:	201f      	movs	r0, #31
 8002d80:	4002      	ands	r2, r0
 8002d82:	4093      	lsls	r3, r2
 8002d84:	000a      	movs	r2, r1
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	089b      	lsrs	r3, r3, #2
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d808      	bhi.n	8002dae <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	6859      	ldr	r1, [r3, #4]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	001a      	movs	r2, r3
 8002daa:	f7ff fb8a 	bl	80024c2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	6819      	ldr	r1, [r3, #0]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	001a      	movs	r2, r3
 8002dbc:	f7ff fbc4 	bl	8002548 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	db00      	blt.n	8002dca <HAL_ADC_ConfigChannel+0x21e>
 8002dc8:	e0bc      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dca:	4b50      	ldr	r3, [pc, #320]	; (8002f0c <HAL_ADC_ConfigChannel+0x360>)
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f7ff fb3d 	bl	800244c <LL_ADC_GetCommonPathInternalCh>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a4d      	ldr	r2, [pc, #308]	; (8002f10 <HAL_ADC_ConfigChannel+0x364>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d122      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	041b      	lsls	r3, r3, #16
 8002de6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002de8:	d11d      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	2280      	movs	r2, #128	; 0x80
 8002dee:	0412      	lsls	r2, r2, #16
 8002df0:	4313      	orrs	r3, r2
 8002df2:	4a46      	ldr	r2, [pc, #280]	; (8002f0c <HAL_ADC_ConfigChannel+0x360>)
 8002df4:	0019      	movs	r1, r3
 8002df6:	0010      	movs	r0, r2
 8002df8:	f7ff fb14 	bl	8002424 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dfc:	4b45      	ldr	r3, [pc, #276]	; (8002f14 <HAL_ADC_ConfigChannel+0x368>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4945      	ldr	r1, [pc, #276]	; (8002f18 <HAL_ADC_ConfigChannel+0x36c>)
 8002e02:	0018      	movs	r0, r3
 8002e04:	f7fd f97e 	bl	8000104 <__udivsi3>
 8002e08:	0003      	movs	r3, r0
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	0013      	movs	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	189b      	adds	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e16:	e002      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1f9      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e24:	e08e      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a3c      	ldr	r2, [pc, #240]	; (8002f1c <HAL_ADC_ConfigChannel+0x370>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d10e      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x2a2>
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	2380      	movs	r3, #128	; 0x80
 8002e34:	045b      	lsls	r3, r3, #17
 8002e36:	4013      	ands	r3, r2
 8002e38:	d109      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	2280      	movs	r2, #128	; 0x80
 8002e3e:	0452      	lsls	r2, r2, #17
 8002e40:	4313      	orrs	r3, r2
 8002e42:	4a32      	ldr	r2, [pc, #200]	; (8002f0c <HAL_ADC_ConfigChannel+0x360>)
 8002e44:	0019      	movs	r1, r3
 8002e46:	0010      	movs	r0, r2
 8002e48:	f7ff faec 	bl	8002424 <LL_ADC_SetCommonPathInternalCh>
 8002e4c:	e07a      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a33      	ldr	r2, [pc, #204]	; (8002f20 <HAL_ADC_ConfigChannel+0x374>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d000      	beq.n	8002e5a <HAL_ADC_ConfigChannel+0x2ae>
 8002e58:	e074      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	03db      	lsls	r3, r3, #15
 8002e60:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002e62:	d000      	beq.n	8002e66 <HAL_ADC_ConfigChannel+0x2ba>
 8002e64:	e06e      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	2280      	movs	r2, #128	; 0x80
 8002e6a:	03d2      	lsls	r2, r2, #15
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	4a27      	ldr	r2, [pc, #156]	; (8002f0c <HAL_ADC_ConfigChannel+0x360>)
 8002e70:	0019      	movs	r1, r3
 8002e72:	0010      	movs	r0, r2
 8002e74:	f7ff fad6 	bl	8002424 <LL_ADC_SetCommonPathInternalCh>
 8002e78:	e064      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691a      	ldr	r2, [r3, #16]
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	061b      	lsls	r3, r3, #24
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d004      	beq.n	8002e90 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e8a:	4a1f      	ldr	r2, [pc, #124]	; (8002f08 <HAL_ADC_ConfigChannel+0x35c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d107      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	0019      	movs	r1, r3
 8002e9a:	0010      	movs	r0, r2
 8002e9c:	f7ff fb42 	bl	8002524 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	da4d      	bge.n	8002f44 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ea8:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <HAL_ADC_ConfigChannel+0x360>)
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f7ff face 	bl	800244c <LL_ADC_GetCommonPathInternalCh>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a15      	ldr	r2, [pc, #84]	; (8002f10 <HAL_ADC_ConfigChannel+0x364>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d108      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4a18      	ldr	r2, [pc, #96]	; (8002f24 <HAL_ADC_ConfigChannel+0x378>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	4a11      	ldr	r2, [pc, #68]	; (8002f0c <HAL_ADC_ConfigChannel+0x360>)
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	0010      	movs	r0, r2
 8002eca:	f7ff faab 	bl	8002424 <LL_ADC_SetCommonPathInternalCh>
 8002ece:	e039      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a11      	ldr	r2, [pc, #68]	; (8002f1c <HAL_ADC_ConfigChannel+0x370>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d108      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4a12      	ldr	r2, [pc, #72]	; (8002f28 <HAL_ADC_ConfigChannel+0x37c>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <HAL_ADC_ConfigChannel+0x360>)
 8002ee2:	0019      	movs	r1, r3
 8002ee4:	0010      	movs	r0, r2
 8002ee6:	f7ff fa9d 	bl	8002424 <LL_ADC_SetCommonPathInternalCh>
 8002eea:	e02b      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a0b      	ldr	r2, [pc, #44]	; (8002f20 <HAL_ADC_ConfigChannel+0x374>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d126      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4a0c      	ldr	r2, [pc, #48]	; (8002f2c <HAL_ADC_ConfigChannel+0x380>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	4a03      	ldr	r2, [pc, #12]	; (8002f0c <HAL_ADC_ConfigChannel+0x360>)
 8002efe:	0019      	movs	r1, r3
 8002f00:	0010      	movs	r0, r2
 8002f02:	f7ff fa8f 	bl	8002424 <LL_ADC_SetCommonPathInternalCh>
 8002f06:	e01d      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x398>
 8002f08:	80000004 	.word	0x80000004
 8002f0c:	40012708 	.word	0x40012708
 8002f10:	b0001000 	.word	0xb0001000
 8002f14:	2000000c 	.word	0x2000000c
 8002f18:	00030d40 	.word	0x00030d40
 8002f1c:	b8004000 	.word	0xb8004000
 8002f20:	b4002000 	.word	0xb4002000
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	feffffff 	.word	0xfeffffff
 8002f2c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f34:	2220      	movs	r2, #32
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f3c:	2317      	movs	r3, #23
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	2201      	movs	r2, #1
 8002f42:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2254      	movs	r2, #84	; 0x54
 8002f48:	2100      	movs	r1, #0
 8002f4a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002f4c:	2317      	movs	r3, #23
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	781b      	ldrb	r3, [r3, #0]
}
 8002f52:	0018      	movs	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b006      	add	sp, #24
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	46c0      	nop			; (mov r8, r8)

08002f5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f7ff fb53 	bl	8002618 <LL_ADC_IsEnabled>
 8002f72:	1e03      	subs	r3, r0, #0
 8002f74:	d000      	beq.n	8002f78 <ADC_Enable+0x1c>
 8002f76:	e069      	b.n	800304c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	4a36      	ldr	r2, [pc, #216]	; (8003058 <ADC_Enable+0xfc>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	d00d      	beq.n	8002fa0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f88:	2210      	movs	r2, #16
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f94:	2201      	movs	r2, #1
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e056      	b.n	800304e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7ff fb13 	bl	80025d0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002faa:	4b2c      	ldr	r3, [pc, #176]	; (800305c <ADC_Enable+0x100>)
 8002fac:	0018      	movs	r0, r3
 8002fae:	f7ff fa4d 	bl	800244c <LL_ADC_GetCommonPathInternalCh>
 8002fb2:	0002      	movs	r2, r0
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	041b      	lsls	r3, r3, #16
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d00f      	beq.n	8002fdc <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fbc:	4b28      	ldr	r3, [pc, #160]	; (8003060 <ADC_Enable+0x104>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4928      	ldr	r1, [pc, #160]	; (8003064 <ADC_Enable+0x108>)
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f7fd f89e 	bl	8000104 <__udivsi3>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	3301      	adds	r3, #1
 8002fcc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fce:	e002      	b.n	8002fd6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f9      	bne.n	8002fd0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	7e5b      	ldrb	r3, [r3, #25]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d033      	beq.n	800304c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002fe4:	f7ff f9fe 	bl	80023e4 <HAL_GetTick>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fec:	e027      	b.n	800303e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f7ff fb10 	bl	8002618 <LL_ADC_IsEnabled>
 8002ff8:	1e03      	subs	r3, r0, #0
 8002ffa:	d104      	bne.n	8003006 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	0018      	movs	r0, r3
 8003002:	f7ff fae5 	bl	80025d0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003006:	f7ff f9ed 	bl	80023e4 <HAL_GetTick>
 800300a:	0002      	movs	r2, r0
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d914      	bls.n	800303e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2201      	movs	r2, #1
 800301c:	4013      	ands	r3, r2
 800301e:	2b01      	cmp	r3, #1
 8003020:	d00d      	beq.n	800303e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003026:	2210      	movs	r2, #16
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003032:	2201      	movs	r2, #1
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e007      	b.n	800304e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2201      	movs	r2, #1
 8003046:	4013      	ands	r3, r2
 8003048:	2b01      	cmp	r3, #1
 800304a:	d1d0      	bne.n	8002fee <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	0018      	movs	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	b004      	add	sp, #16
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	80000017 	.word	0x80000017
 800305c:	40012708 	.word	0x40012708
 8003060:	2000000c 	.word	0x2000000c
 8003064:	00030d40 	.word	0x00030d40

08003068 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	0018      	movs	r0, r3
 8003076:	f7ff fae0 	bl	800263a <LL_ADC_IsDisableOngoing>
 800307a:	0003      	movs	r3, r0
 800307c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	0018      	movs	r0, r3
 8003084:	f7ff fac8 	bl	8002618 <LL_ADC_IsEnabled>
 8003088:	1e03      	subs	r3, r0, #0
 800308a:	d046      	beq.n	800311a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d143      	bne.n	800311a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2205      	movs	r2, #5
 800309a:	4013      	ands	r3, r2
 800309c:	2b01      	cmp	r3, #1
 800309e:	d10d      	bne.n	80030bc <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	0018      	movs	r0, r3
 80030a6:	f7ff faa5 	bl	80025f4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2203      	movs	r2, #3
 80030b0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030b2:	f7ff f997 	bl	80023e4 <HAL_GetTick>
 80030b6:	0003      	movs	r3, r0
 80030b8:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030ba:	e028      	b.n	800310e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c0:	2210      	movs	r2, #16
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030cc:	2201      	movs	r2, #1
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e021      	b.n	800311c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030d8:	f7ff f984 	bl	80023e4 <HAL_GetTick>
 80030dc:	0002      	movs	r2, r0
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d913      	bls.n	800310e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2201      	movs	r2, #1
 80030ee:	4013      	ands	r3, r2
 80030f0:	d00d      	beq.n	800310e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f6:	2210      	movs	r2, #16
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003102:	2201      	movs	r2, #1
 8003104:	431a      	orrs	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e006      	b.n	800311c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2201      	movs	r2, #1
 8003116:	4013      	ands	r3, r2
 8003118:	d1de      	bne.n	80030d8 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	0018      	movs	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	b004      	add	sp, #16
 8003122:	bd80      	pop	{r7, pc}

08003124 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003136:	2250      	movs	r2, #80	; 0x50
 8003138:	4013      	ands	r3, r2
 800313a:	d141      	bne.n	80031c0 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	2280      	movs	r2, #128	; 0x80
 8003142:	0092      	lsls	r2, r2, #2
 8003144:	431a      	orrs	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	0018      	movs	r0, r3
 8003150:	f7ff f9a6 	bl	80024a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003154:	1e03      	subs	r3, r0, #0
 8003156:	d02e      	beq.n	80031b6 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	7e9b      	ldrb	r3, [r3, #26]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d12a      	bne.n	80031b6 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2208      	movs	r2, #8
 8003168:	4013      	ands	r3, r2
 800316a:	2b08      	cmp	r3, #8
 800316c:	d123      	bne.n	80031b6 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	0018      	movs	r0, r3
 8003174:	f7ff fa84 	bl	8002680 <LL_ADC_REG_IsConversionOngoing>
 8003178:	1e03      	subs	r3, r0, #0
 800317a:	d110      	bne.n	800319e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	210c      	movs	r1, #12
 8003188:	438a      	bics	r2, r1
 800318a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003190:	4a15      	ldr	r2, [pc, #84]	; (80031e8 <ADC_DMAConvCplt+0xc4>)
 8003192:	4013      	ands	r3, r2
 8003194:	2201      	movs	r2, #1
 8003196:	431a      	orrs	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	659a      	str	r2, [r3, #88]	; 0x58
 800319c:	e00b      	b.n	80031b6 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a2:	2220      	movs	r2, #32
 80031a4:	431a      	orrs	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ae:	2201      	movs	r2, #1
 80031b0:	431a      	orrs	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	0018      	movs	r0, r3
 80031ba:	f7ff fcdf 	bl	8002b7c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031be:	e00f      	b.n	80031e0 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c4:	2210      	movs	r2, #16
 80031c6:	4013      	ands	r3, r2
 80031c8:	d004      	beq.n	80031d4 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	0018      	movs	r0, r3
 80031ce:	f7ff fce5 	bl	8002b9c <HAL_ADC_ErrorCallback>
}
 80031d2:	e005      	b.n	80031e0 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	0010      	movs	r0, r2
 80031de:	4798      	blx	r3
}
 80031e0:	46c0      	nop			; (mov r8, r8)
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b004      	add	sp, #16
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	fffffefe 	.word	0xfffffefe

080031ec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	0018      	movs	r0, r3
 80031fe:	f7ff fcc5 	bl	8002b8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	46bd      	mov	sp, r7
 8003206:	b004      	add	sp, #16
 8003208:	bd80      	pop	{r7, pc}

0800320a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321c:	2240      	movs	r2, #64	; 0x40
 800321e:	431a      	orrs	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003228:	2204      	movs	r2, #4
 800322a:	431a      	orrs	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	0018      	movs	r0, r3
 8003234:	f7ff fcb2 	bl	8002b9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	b004      	add	sp, #16
 800323e:	bd80      	pop	{r7, pc}

08003240 <LL_ADC_IsEnabled>:
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2201      	movs	r2, #1
 800324e:	4013      	ands	r3, r2
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <LL_ADC_IsEnabled+0x18>
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <LL_ADC_IsEnabled+0x1a>
 8003258:	2300      	movs	r3, #0
}
 800325a:	0018      	movs	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	b002      	add	sp, #8
 8003260:	bd80      	pop	{r7, pc}

08003262 <LL_ADC_IsCalibrationOnGoing>:
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	0fdb      	lsrs	r3, r3, #31
 8003270:	07da      	lsls	r2, r3, #31
 8003272:	2380      	movs	r3, #128	; 0x80
 8003274:	061b      	lsls	r3, r3, #24
 8003276:	429a      	cmp	r2, r3
 8003278:	d101      	bne.n	800327e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <LL_ADC_IsCalibrationOnGoing+0x1e>
 800327e:	2300      	movs	r3, #0
}
 8003280:	0018      	movs	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	b002      	add	sp, #8
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2254      	movs	r2, #84	; 0x54
 8003298:	5c9b      	ldrb	r3, [r3, r2]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_ADCEx_Calibration_Start+0x1a>
 800329e:	2302      	movs	r3, #2
 80032a0:	e06c      	b.n	800337c <HAL_ADCEx_Calibration_Start+0xf4>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2254      	movs	r2, #84	; 0x54
 80032a6:	2101      	movs	r1, #1
 80032a8:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80032aa:	2317      	movs	r3, #23
 80032ac:	18fc      	adds	r4, r7, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	0018      	movs	r0, r3
 80032b2:	f7ff fed9 	bl	8003068 <ADC_Disable>
 80032b6:	0003      	movs	r3, r0
 80032b8:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	0018      	movs	r0, r3
 80032c0:	f7ff ffbe 	bl	8003240 <LL_ADC_IsEnabled>
 80032c4:	1e03      	subs	r3, r0, #0
 80032c6:	d14c      	bne.n	8003362 <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032cc:	4a2d      	ldr	r2, [pc, #180]	; (8003384 <HAL_ADCEx_Calibration_Start+0xfc>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	2202      	movs	r2, #2
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	2203      	movs	r2, #3
 80032e0:	4013      	ands	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2103      	movs	r1, #3
 80032f0:	438a      	bics	r2, r1
 80032f2:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2180      	movs	r1, #128	; 0x80
 8003300:	0609      	lsls	r1, r1, #24
 8003302:	430a      	orrs	r2, r1
 8003304:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003306:	e014      	b.n	8003332 <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	3301      	adds	r3, #1
 800330c:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4a1d      	ldr	r2, [pc, #116]	; (8003388 <HAL_ADCEx_Calibration_Start+0x100>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d90d      	bls.n	8003332 <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331a:	2212      	movs	r2, #18
 800331c:	4393      	bics	r3, r2
 800331e:	2210      	movs	r2, #16
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2254      	movs	r2, #84	; 0x54
 800332a:	2100      	movs	r1, #0
 800332c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e024      	b.n	800337c <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	0018      	movs	r0, r3
 8003338:	f7ff ff93 	bl	8003262 <LL_ADC_IsCalibrationOnGoing>
 800333c:	1e03      	subs	r3, r0, #0
 800333e:	d1e3      	bne.n	8003308 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68d9      	ldr	r1, [r3, #12]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	430a      	orrs	r2, r1
 800334e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003354:	2203      	movs	r2, #3
 8003356:	4393      	bics	r3, r2
 8003358:	2201      	movs	r2, #1
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	659a      	str	r2, [r3, #88]	; 0x58
 8003360:	e005      	b.n	800336e <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003366:	2210      	movs	r2, #16
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2254      	movs	r2, #84	; 0x54
 8003372:	2100      	movs	r1, #0
 8003374:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003376:	2317      	movs	r3, #23
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	781b      	ldrb	r3, [r3, #0]
}
 800337c:	0018      	movs	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	b007      	add	sp, #28
 8003382:	bd90      	pop	{r4, r7, pc}
 8003384:	fffffefd 	.word	0xfffffefd
 8003388:	0002f1ff 	.word	0x0002f1ff

0800338c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	0002      	movs	r2, r0
 8003394:	1dfb      	adds	r3, r7, #7
 8003396:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003398:	1dfb      	adds	r3, r7, #7
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b7f      	cmp	r3, #127	; 0x7f
 800339e:	d809      	bhi.n	80033b4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033a0:	1dfb      	adds	r3, r7, #7
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	001a      	movs	r2, r3
 80033a6:	231f      	movs	r3, #31
 80033a8:	401a      	ands	r2, r3
 80033aa:	4b04      	ldr	r3, [pc, #16]	; (80033bc <__NVIC_EnableIRQ+0x30>)
 80033ac:	2101      	movs	r1, #1
 80033ae:	4091      	lsls	r1, r2
 80033b0:	000a      	movs	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b002      	add	sp, #8
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	e000e100 	.word	0xe000e100

080033c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c0:	b590      	push	{r4, r7, lr}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	0002      	movs	r2, r0
 80033c8:	6039      	str	r1, [r7, #0]
 80033ca:	1dfb      	adds	r3, r7, #7
 80033cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033ce:	1dfb      	adds	r3, r7, #7
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b7f      	cmp	r3, #127	; 0x7f
 80033d4:	d828      	bhi.n	8003428 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033d6:	4a2f      	ldr	r2, [pc, #188]	; (8003494 <__NVIC_SetPriority+0xd4>)
 80033d8:	1dfb      	adds	r3, r7, #7
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	b25b      	sxtb	r3, r3
 80033de:	089b      	lsrs	r3, r3, #2
 80033e0:	33c0      	adds	r3, #192	; 0xc0
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	589b      	ldr	r3, [r3, r2]
 80033e6:	1dfa      	adds	r2, r7, #7
 80033e8:	7812      	ldrb	r2, [r2, #0]
 80033ea:	0011      	movs	r1, r2
 80033ec:	2203      	movs	r2, #3
 80033ee:	400a      	ands	r2, r1
 80033f0:	00d2      	lsls	r2, r2, #3
 80033f2:	21ff      	movs	r1, #255	; 0xff
 80033f4:	4091      	lsls	r1, r2
 80033f6:	000a      	movs	r2, r1
 80033f8:	43d2      	mvns	r2, r2
 80033fa:	401a      	ands	r2, r3
 80033fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	019b      	lsls	r3, r3, #6
 8003402:	22ff      	movs	r2, #255	; 0xff
 8003404:	401a      	ands	r2, r3
 8003406:	1dfb      	adds	r3, r7, #7
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	0018      	movs	r0, r3
 800340c:	2303      	movs	r3, #3
 800340e:	4003      	ands	r3, r0
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003414:	481f      	ldr	r0, [pc, #124]	; (8003494 <__NVIC_SetPriority+0xd4>)
 8003416:	1dfb      	adds	r3, r7, #7
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	b25b      	sxtb	r3, r3
 800341c:	089b      	lsrs	r3, r3, #2
 800341e:	430a      	orrs	r2, r1
 8003420:	33c0      	adds	r3, #192	; 0xc0
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003426:	e031      	b.n	800348c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003428:	4a1b      	ldr	r2, [pc, #108]	; (8003498 <__NVIC_SetPriority+0xd8>)
 800342a:	1dfb      	adds	r3, r7, #7
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	0019      	movs	r1, r3
 8003430:	230f      	movs	r3, #15
 8003432:	400b      	ands	r3, r1
 8003434:	3b08      	subs	r3, #8
 8003436:	089b      	lsrs	r3, r3, #2
 8003438:	3306      	adds	r3, #6
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	18d3      	adds	r3, r2, r3
 800343e:	3304      	adds	r3, #4
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	1dfa      	adds	r2, r7, #7
 8003444:	7812      	ldrb	r2, [r2, #0]
 8003446:	0011      	movs	r1, r2
 8003448:	2203      	movs	r2, #3
 800344a:	400a      	ands	r2, r1
 800344c:	00d2      	lsls	r2, r2, #3
 800344e:	21ff      	movs	r1, #255	; 0xff
 8003450:	4091      	lsls	r1, r2
 8003452:	000a      	movs	r2, r1
 8003454:	43d2      	mvns	r2, r2
 8003456:	401a      	ands	r2, r3
 8003458:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	019b      	lsls	r3, r3, #6
 800345e:	22ff      	movs	r2, #255	; 0xff
 8003460:	401a      	ands	r2, r3
 8003462:	1dfb      	adds	r3, r7, #7
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	0018      	movs	r0, r3
 8003468:	2303      	movs	r3, #3
 800346a:	4003      	ands	r3, r0
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003470:	4809      	ldr	r0, [pc, #36]	; (8003498 <__NVIC_SetPriority+0xd8>)
 8003472:	1dfb      	adds	r3, r7, #7
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	001c      	movs	r4, r3
 8003478:	230f      	movs	r3, #15
 800347a:	4023      	ands	r3, r4
 800347c:	3b08      	subs	r3, #8
 800347e:	089b      	lsrs	r3, r3, #2
 8003480:	430a      	orrs	r2, r1
 8003482:	3306      	adds	r3, #6
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	18c3      	adds	r3, r0, r3
 8003488:	3304      	adds	r3, #4
 800348a:	601a      	str	r2, [r3, #0]
}
 800348c:	46c0      	nop			; (mov r8, r8)
 800348e:	46bd      	mov	sp, r7
 8003490:	b003      	add	sp, #12
 8003492:	bd90      	pop	{r4, r7, pc}
 8003494:	e000e100 	.word	0xe000e100
 8003498:	e000ed00 	.word	0xe000ed00

0800349c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	1e5a      	subs	r2, r3, #1
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	045b      	lsls	r3, r3, #17
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d301      	bcc.n	80034b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034b0:	2301      	movs	r3, #1
 80034b2:	e010      	b.n	80034d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034b4:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <SysTick_Config+0x44>)
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	3a01      	subs	r2, #1
 80034ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034bc:	2301      	movs	r3, #1
 80034be:	425b      	negs	r3, r3
 80034c0:	2103      	movs	r1, #3
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7ff ff7c 	bl	80033c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <SysTick_Config+0x44>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ce:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <SysTick_Config+0x44>)
 80034d0:	2207      	movs	r2, #7
 80034d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	0018      	movs	r0, r3
 80034d8:	46bd      	mov	sp, r7
 80034da:	b002      	add	sp, #8
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	e000e010 	.word	0xe000e010

080034e4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
 80034ee:	210f      	movs	r1, #15
 80034f0:	187b      	adds	r3, r7, r1
 80034f2:	1c02      	adds	r2, r0, #0
 80034f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	187b      	adds	r3, r7, r1
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	b25b      	sxtb	r3, r3
 80034fe:	0011      	movs	r1, r2
 8003500:	0018      	movs	r0, r3
 8003502:	f7ff ff5d 	bl	80033c0 <__NVIC_SetPriority>
}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	46bd      	mov	sp, r7
 800350a:	b004      	add	sp, #16
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	0002      	movs	r2, r0
 8003516:	1dfb      	adds	r3, r7, #7
 8003518:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800351a:	1dfb      	adds	r3, r7, #7
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	b25b      	sxtb	r3, r3
 8003520:	0018      	movs	r0, r3
 8003522:	f7ff ff33 	bl	800338c <__NVIC_EnableIRQ>
}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	46bd      	mov	sp, r7
 800352a:	b002      	add	sp, #8
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	0018      	movs	r0, r3
 800353a:	f7ff ffaf 	bl	800349c <SysTick_Config>
 800353e:	0003      	movs	r3, r0
}
 8003540:	0018      	movs	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	b002      	add	sp, #8
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e091      	b.n	800367e <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	001a      	movs	r2, r3
 8003560:	4b49      	ldr	r3, [pc, #292]	; (8003688 <HAL_DMA_Init+0x140>)
 8003562:	429a      	cmp	r2, r3
 8003564:	d810      	bhi.n	8003588 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a48      	ldr	r2, [pc, #288]	; (800368c <HAL_DMA_Init+0x144>)
 800356c:	4694      	mov	ip, r2
 800356e:	4463      	add	r3, ip
 8003570:	2114      	movs	r1, #20
 8003572:	0018      	movs	r0, r3
 8003574:	f7fc fdc6 	bl	8000104 <__udivsi3>
 8003578:	0003      	movs	r3, r0
 800357a:	009a      	lsls	r2, r3, #2
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a43      	ldr	r2, [pc, #268]	; (8003690 <HAL_DMA_Init+0x148>)
 8003584:	641a      	str	r2, [r3, #64]	; 0x40
 8003586:	e00f      	b.n	80035a8 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a41      	ldr	r2, [pc, #260]	; (8003694 <HAL_DMA_Init+0x14c>)
 800358e:	4694      	mov	ip, r2
 8003590:	4463      	add	r3, ip
 8003592:	2114      	movs	r1, #20
 8003594:	0018      	movs	r0, r3
 8003596:	f7fc fdb5 	bl	8000104 <__udivsi3>
 800359a:	0003      	movs	r3, r0
 800359c:	009a      	lsls	r2, r3, #2
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a3c      	ldr	r2, [pc, #240]	; (8003698 <HAL_DMA_Init+0x150>)
 80035a6:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2225      	movs	r2, #37	; 0x25
 80035ac:	2102      	movs	r1, #2
 80035ae:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4938      	ldr	r1, [pc, #224]	; (800369c <HAL_DMA_Init+0x154>)
 80035bc:	400a      	ands	r2, r1
 80035be:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6819      	ldr	r1, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	431a      	orrs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	431a      	orrs	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	0018      	movs	r0, r3
 80035fa:	f000 f9d7 	bl	80039ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	2380      	movs	r3, #128	; 0x80
 8003604:	01db      	lsls	r3, r3, #7
 8003606:	429a      	cmp	r2, r3
 8003608:	d102      	bne.n	8003610 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003618:	217f      	movs	r1, #127	; 0x7f
 800361a:	400a      	ands	r2, r1
 800361c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003626:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d011      	beq.n	8003654 <HAL_DMA_Init+0x10c>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b04      	cmp	r3, #4
 8003636:	d80d      	bhi.n	8003654 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	0018      	movs	r0, r3
 800363c:	f000 fa00 	bl	8003a40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003650:	605a      	str	r2, [r3, #4]
 8003652:	e008      	b.n	8003666 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2225      	movs	r2, #37	; 0x25
 8003670:	2101      	movs	r1, #1
 8003672:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2224      	movs	r2, #36	; 0x24
 8003678:	2100      	movs	r1, #0
 800367a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	0018      	movs	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	b002      	add	sp, #8
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	40020407 	.word	0x40020407
 800368c:	bffdfff8 	.word	0xbffdfff8
 8003690:	40020000 	.word	0x40020000
 8003694:	bffdfbf8 	.word	0xbffdfbf8
 8003698:	40020400 	.word	0x40020400
 800369c:	ffff800f 	.word	0xffff800f

080036a0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ae:	2317      	movs	r3, #23
 80036b0:	18fb      	adds	r3, r7, r3
 80036b2:	2200      	movs	r2, #0
 80036b4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2224      	movs	r2, #36	; 0x24
 80036ba:	5c9b      	ldrb	r3, [r3, r2]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_DMA_Start_IT+0x24>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e06f      	b.n	80037a4 <HAL_DMA_Start_IT+0x104>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2224      	movs	r2, #36	; 0x24
 80036c8:	2101      	movs	r1, #1
 80036ca:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2225      	movs	r2, #37	; 0x25
 80036d0:	5c9b      	ldrb	r3, [r3, r2]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d157      	bne.n	8003788 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2225      	movs	r2, #37	; 0x25
 80036dc:	2102      	movs	r1, #2
 80036de:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2101      	movs	r1, #1
 80036f2:	438a      	bics	r2, r1
 80036f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 f919 	bl	8003934 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	2b00      	cmp	r3, #0
 8003708:	d008      	beq.n	800371c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	210e      	movs	r1, #14
 8003716:	430a      	orrs	r2, r1
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	e00f      	b.n	800373c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2104      	movs	r1, #4
 8003728:	438a      	bics	r2, r1
 800372a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	210a      	movs	r1, #10
 8003738:	430a      	orrs	r2, r1
 800373a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	025b      	lsls	r3, r3, #9
 8003746:	4013      	ands	r3, r2
 8003748:	d008      	beq.n	800375c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003754:	2180      	movs	r1, #128	; 0x80
 8003756:	0049      	lsls	r1, r1, #1
 8003758:	430a      	orrs	r2, r1
 800375a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376e:	2180      	movs	r1, #128	; 0x80
 8003770:	0049      	lsls	r1, r1, #1
 8003772:	430a      	orrs	r2, r1
 8003774:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2101      	movs	r1, #1
 8003782:	430a      	orrs	r2, r1
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	e00a      	b.n	800379e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2280      	movs	r2, #128	; 0x80
 800378c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2224      	movs	r2, #36	; 0x24
 8003792:	2100      	movs	r1, #0
 8003794:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003796:	2317      	movs	r3, #23
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	2201      	movs	r2, #1
 800379c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800379e:	2317      	movs	r3, #23
 80037a0:	18fb      	adds	r3, r7, r3
 80037a2:	781b      	ldrb	r3, [r3, #0]
}
 80037a4:	0018      	movs	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	b006      	add	sp, #24
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c8:	221c      	movs	r2, #28
 80037ca:	4013      	ands	r3, r2
 80037cc:	2204      	movs	r2, #4
 80037ce:	409a      	lsls	r2, r3
 80037d0:	0013      	movs	r3, r2
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	4013      	ands	r3, r2
 80037d6:	d026      	beq.n	8003826 <HAL_DMA_IRQHandler+0x7a>
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2204      	movs	r2, #4
 80037dc:	4013      	ands	r3, r2
 80037de:	d022      	beq.n	8003826 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2220      	movs	r2, #32
 80037e8:	4013      	ands	r3, r2
 80037ea:	d107      	bne.n	80037fc <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2104      	movs	r1, #4
 80037f8:	438a      	bics	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003800:	221c      	movs	r2, #28
 8003802:	401a      	ands	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	2104      	movs	r1, #4
 800380a:	4091      	lsls	r1, r2
 800380c:	000a      	movs	r2, r1
 800380e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003814:	2b00      	cmp	r3, #0
 8003816:	d100      	bne.n	800381a <HAL_DMA_IRQHandler+0x6e>
 8003818:	e080      	b.n	800391c <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	0010      	movs	r0, r2
 8003822:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003824:	e07a      	b.n	800391c <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382a:	221c      	movs	r2, #28
 800382c:	4013      	ands	r3, r2
 800382e:	2202      	movs	r2, #2
 8003830:	409a      	lsls	r2, r3
 8003832:	0013      	movs	r3, r2
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	4013      	ands	r3, r2
 8003838:	d03c      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x108>
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2202      	movs	r2, #2
 800383e:	4013      	ands	r3, r2
 8003840:	d038      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2220      	movs	r2, #32
 800384a:	4013      	ands	r3, r2
 800384c:	d10b      	bne.n	8003866 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	210a      	movs	r1, #10
 800385a:	438a      	bics	r2, r1
 800385c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2225      	movs	r2, #37	; 0x25
 8003862:	2101      	movs	r1, #1
 8003864:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	001a      	movs	r2, r3
 800386c:	4b2e      	ldr	r3, [pc, #184]	; (8003928 <HAL_DMA_IRQHandler+0x17c>)
 800386e:	429a      	cmp	r2, r3
 8003870:	d909      	bls.n	8003886 <HAL_DMA_IRQHandler+0xda>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	221c      	movs	r2, #28
 8003878:	401a      	ands	r2, r3
 800387a:	4b2c      	ldr	r3, [pc, #176]	; (800392c <HAL_DMA_IRQHandler+0x180>)
 800387c:	2102      	movs	r1, #2
 800387e:	4091      	lsls	r1, r2
 8003880:	000a      	movs	r2, r1
 8003882:	605a      	str	r2, [r3, #4]
 8003884:	e008      	b.n	8003898 <HAL_DMA_IRQHandler+0xec>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388a:	221c      	movs	r2, #28
 800388c:	401a      	ands	r2, r3
 800388e:	4b28      	ldr	r3, [pc, #160]	; (8003930 <HAL_DMA_IRQHandler+0x184>)
 8003890:	2102      	movs	r1, #2
 8003892:	4091      	lsls	r1, r2
 8003894:	000a      	movs	r2, r1
 8003896:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2224      	movs	r2, #36	; 0x24
 800389c:	2100      	movs	r1, #0
 800389e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d039      	beq.n	800391c <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	0010      	movs	r0, r2
 80038b0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80038b2:	e033      	b.n	800391c <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b8:	221c      	movs	r2, #28
 80038ba:	4013      	ands	r3, r2
 80038bc:	2208      	movs	r2, #8
 80038be:	409a      	lsls	r2, r3
 80038c0:	0013      	movs	r3, r2
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4013      	ands	r3, r2
 80038c6:	d02a      	beq.n	800391e <HAL_DMA_IRQHandler+0x172>
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2208      	movs	r2, #8
 80038cc:	4013      	ands	r3, r2
 80038ce:	d026      	beq.n	800391e <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	210e      	movs	r1, #14
 80038dc:	438a      	bics	r2, r1
 80038de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e4:	221c      	movs	r2, #28
 80038e6:	401a      	ands	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	2101      	movs	r1, #1
 80038ee:	4091      	lsls	r1, r2
 80038f0:	000a      	movs	r2, r1
 80038f2:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2225      	movs	r2, #37	; 0x25
 80038fe:	2101      	movs	r1, #1
 8003900:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2224      	movs	r2, #36	; 0x24
 8003906:	2100      	movs	r1, #0
 8003908:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	0010      	movs	r0, r2
 800391a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800391c:	46c0      	nop			; (mov r8, r8)
 800391e:	46c0      	nop			; (mov r8, r8)
}
 8003920:	46bd      	mov	sp, r7
 8003922:	b004      	add	sp, #16
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	40020080 	.word	0x40020080
 800392c:	40020400 	.word	0x40020400
 8003930:	40020000 	.word	0x40020000

08003934 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800394a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800395c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	221c      	movs	r2, #28
 8003964:	401a      	ands	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	2101      	movs	r1, #1
 800396c:	4091      	lsls	r1, r2
 800396e:	000a      	movs	r2, r1
 8003970:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b10      	cmp	r3, #16
 8003980:	d108      	bne.n	8003994 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003992:	e007      	b.n	80039a4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	60da      	str	r2, [r3, #12]
}
 80039a4:	46c0      	nop			; (mov r8, r8)
 80039a6:	46bd      	mov	sp, r7
 80039a8:	b004      	add	sp, #16
 80039aa:	bd80      	pop	{r7, pc}

080039ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	001a      	movs	r2, r3
 80039ba:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80039bc:	429a      	cmp	r2, r3
 80039be:	d814      	bhi.n	80039ea <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c4:	089b      	lsrs	r3, r3, #2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4a1a      	ldr	r2, [pc, #104]	; (8003a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80039ca:	189a      	adds	r2, r3, r2
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	001a      	movs	r2, r3
 80039d6:	23ff      	movs	r3, #255	; 0xff
 80039d8:	4013      	ands	r3, r2
 80039da:	3b08      	subs	r3, #8
 80039dc:	2114      	movs	r1, #20
 80039de:	0018      	movs	r0, r3
 80039e0:	f7fc fb90 	bl	8000104 <__udivsi3>
 80039e4:	0003      	movs	r3, r0
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	e014      	b.n	8003a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	089b      	lsrs	r3, r3, #2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4a11      	ldr	r2, [pc, #68]	; (8003a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80039f4:	189a      	adds	r2, r3, r2
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	001a      	movs	r2, r3
 8003a00:	23ff      	movs	r3, #255	; 0xff
 8003a02:	4013      	ands	r3, r2
 8003a04:	3b08      	subs	r3, #8
 8003a06:	2114      	movs	r1, #20
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f7fc fb7b 	bl	8000104 <__udivsi3>
 8003a0e:	0003      	movs	r3, r0
 8003a10:	3307      	adds	r3, #7
 8003a12:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a09      	ldr	r2, [pc, #36]	; (8003a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8003a18:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	221f      	movs	r2, #31
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2201      	movs	r2, #1
 8003a22:	409a      	lsls	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a28:	46c0      	nop			; (mov r8, r8)
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b004      	add	sp, #16
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40020407 	.word	0x40020407
 8003a34:	40020800 	.word	0x40020800
 8003a38:	4002081c 	.word	0x4002081c
 8003a3c:	40020880 	.word	0x40020880

08003a40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	227f      	movs	r2, #127	; 0x7f
 8003a4e:	4013      	ands	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4a0a      	ldr	r2, [pc, #40]	; (8003a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003a56:	4694      	mov	ip, r2
 8003a58:	4463      	add	r3, ip
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	001a      	movs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a07      	ldr	r2, [pc, #28]	; (8003a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003a66:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2201      	movs	r2, #1
 8003a72:	409a      	lsls	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003a78:	46c0      	nop			; (mov r8, r8)
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b004      	add	sp, #16
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	1000823f 	.word	0x1000823f
 8003a84:	40020940 	.word	0x40020940

08003a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a96:	e14d      	b.n	8003d34 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4091      	lsls	r1, r2
 8003aa2:	000a      	movs	r2, r1
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d100      	bne.n	8003ab0 <HAL_GPIO_Init+0x28>
 8003aae:	e13e      	b.n	8003d2e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d005      	beq.n	8003ac8 <HAL_GPIO_Init+0x40>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2203      	movs	r2, #3
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d130      	bne.n	8003b2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	409a      	lsls	r2, r3
 8003ad6:	0013      	movs	r3, r2
 8003ad8:	43da      	mvns	r2, r3
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	4013      	ands	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	409a      	lsls	r2, r3
 8003aea:	0013      	movs	r3, r2
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003afe:	2201      	movs	r2, #1
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	409a      	lsls	r2, r3
 8003b04:	0013      	movs	r3, r2
 8003b06:	43da      	mvns	r2, r3
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	091b      	lsrs	r3, r3, #4
 8003b14:	2201      	movs	r2, #1
 8003b16:	401a      	ands	r2, r3
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	409a      	lsls	r2, r3
 8003b1c:	0013      	movs	r3, r2
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2203      	movs	r2, #3
 8003b30:	4013      	ands	r3, r2
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	d017      	beq.n	8003b66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	2203      	movs	r2, #3
 8003b42:	409a      	lsls	r2, r3
 8003b44:	0013      	movs	r3, r2
 8003b46:	43da      	mvns	r2, r3
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	409a      	lsls	r2, r3
 8003b58:	0013      	movs	r3, r2
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d123      	bne.n	8003bba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	08da      	lsrs	r2, r3, #3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3208      	adds	r2, #8
 8003b7a:	0092      	lsls	r2, r2, #2
 8003b7c:	58d3      	ldr	r3, [r2, r3]
 8003b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	2207      	movs	r2, #7
 8003b84:	4013      	ands	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	220f      	movs	r2, #15
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	0013      	movs	r3, r2
 8003b8e:	43da      	mvns	r2, r3
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	4013      	ands	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2107      	movs	r1, #7
 8003b9e:	400b      	ands	r3, r1
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	0013      	movs	r3, r2
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	08da      	lsrs	r2, r3, #3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3208      	adds	r2, #8
 8003bb4:	0092      	lsls	r2, r2, #2
 8003bb6:	6939      	ldr	r1, [r7, #16]
 8003bb8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	2203      	movs	r2, #3
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	0013      	movs	r3, r2
 8003bca:	43da      	mvns	r2, r3
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2203      	movs	r2, #3
 8003bd8:	401a      	ands	r2, r3
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	409a      	lsls	r2, r3
 8003be0:	0013      	movs	r3, r2
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	23c0      	movs	r3, #192	; 0xc0
 8003bf4:	029b      	lsls	r3, r3, #10
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	d100      	bne.n	8003bfc <HAL_GPIO_Init+0x174>
 8003bfa:	e098      	b.n	8003d2e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003bfc:	4a53      	ldr	r2, [pc, #332]	; (8003d4c <HAL_GPIO_Init+0x2c4>)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	089b      	lsrs	r3, r3, #2
 8003c02:	3318      	adds	r3, #24
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	589b      	ldr	r3, [r3, r2]
 8003c08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	4013      	ands	r3, r2
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	220f      	movs	r2, #15
 8003c14:	409a      	lsls	r2, r3
 8003c16:	0013      	movs	r3, r2
 8003c18:	43da      	mvns	r2, r3
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	23a0      	movs	r3, #160	; 0xa0
 8003c24:	05db      	lsls	r3, r3, #23
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d019      	beq.n	8003c5e <HAL_GPIO_Init+0x1d6>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a48      	ldr	r2, [pc, #288]	; (8003d50 <HAL_GPIO_Init+0x2c8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d013      	beq.n	8003c5a <HAL_GPIO_Init+0x1d2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a47      	ldr	r2, [pc, #284]	; (8003d54 <HAL_GPIO_Init+0x2cc>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00d      	beq.n	8003c56 <HAL_GPIO_Init+0x1ce>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a46      	ldr	r2, [pc, #280]	; (8003d58 <HAL_GPIO_Init+0x2d0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d007      	beq.n	8003c52 <HAL_GPIO_Init+0x1ca>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a45      	ldr	r2, [pc, #276]	; (8003d5c <HAL_GPIO_Init+0x2d4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d101      	bne.n	8003c4e <HAL_GPIO_Init+0x1c6>
 8003c4a:	2304      	movs	r3, #4
 8003c4c:	e008      	b.n	8003c60 <HAL_GPIO_Init+0x1d8>
 8003c4e:	2305      	movs	r3, #5
 8003c50:	e006      	b.n	8003c60 <HAL_GPIO_Init+0x1d8>
 8003c52:	2303      	movs	r3, #3
 8003c54:	e004      	b.n	8003c60 <HAL_GPIO_Init+0x1d8>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e002      	b.n	8003c60 <HAL_GPIO_Init+0x1d8>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <HAL_GPIO_Init+0x1d8>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	2103      	movs	r1, #3
 8003c64:	400a      	ands	r2, r1
 8003c66:	00d2      	lsls	r2, r2, #3
 8003c68:	4093      	lsls	r3, r2
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003c70:	4936      	ldr	r1, [pc, #216]	; (8003d4c <HAL_GPIO_Init+0x2c4>)
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	089b      	lsrs	r3, r3, #2
 8003c76:	3318      	adds	r3, #24
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c7e:	4a33      	ldr	r2, [pc, #204]	; (8003d4c <HAL_GPIO_Init+0x2c4>)
 8003c80:	2380      	movs	r3, #128	; 0x80
 8003c82:	58d3      	ldr	r3, [r2, r3]
 8003c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	43da      	mvns	r2, r3
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	2380      	movs	r3, #128	; 0x80
 8003c96:	025b      	lsls	r3, r3, #9
 8003c98:	4013      	ands	r3, r2
 8003c9a:	d003      	beq.n	8003ca4 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ca4:	4929      	ldr	r1, [pc, #164]	; (8003d4c <HAL_GPIO_Init+0x2c4>)
 8003ca6:	2280      	movs	r2, #128	; 0x80
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003cac:	4a27      	ldr	r2, [pc, #156]	; (8003d4c <HAL_GPIO_Init+0x2c4>)
 8003cae:	2384      	movs	r3, #132	; 0x84
 8003cb0:	58d3      	ldr	r3, [r2, r3]
 8003cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	43da      	mvns	r2, r3
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	2380      	movs	r3, #128	; 0x80
 8003cc4:	029b      	lsls	r3, r3, #10
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003cd2:	491e      	ldr	r1, [pc, #120]	; (8003d4c <HAL_GPIO_Init+0x2c4>)
 8003cd4:	2284      	movs	r2, #132	; 0x84
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cda:	4b1c      	ldr	r3, [pc, #112]	; (8003d4c <HAL_GPIO_Init+0x2c4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	43da      	mvns	r2, r3
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	2380      	movs	r3, #128	; 0x80
 8003cf0:	035b      	lsls	r3, r3, #13
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	d003      	beq.n	8003cfe <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cfe:	4b13      	ldr	r3, [pc, #76]	; (8003d4c <HAL_GPIO_Init+0x2c4>)
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003d04:	4b11      	ldr	r3, [pc, #68]	; (8003d4c <HAL_GPIO_Init+0x2c4>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	43da      	mvns	r2, r3
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4013      	ands	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	039b      	lsls	r3, r3, #14
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d003      	beq.n	8003d28 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d28:	4b08      	ldr	r3, [pc, #32]	; (8003d4c <HAL_GPIO_Init+0x2c4>)
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	3301      	adds	r3, #1
 8003d32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	40da      	lsrs	r2, r3
 8003d3c:	1e13      	subs	r3, r2, #0
 8003d3e:	d000      	beq.n	8003d42 <HAL_GPIO_Init+0x2ba>
 8003d40:	e6aa      	b.n	8003a98 <HAL_GPIO_Init+0x10>
  }
}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b006      	add	sp, #24
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40021800 	.word	0x40021800
 8003d50:	50000400 	.word	0x50000400
 8003d54:	50000800 	.word	0x50000800
 8003d58:	50000c00 	.word	0x50000c00
 8003d5c:	50001000 	.word	0x50001000

08003d60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003d68:	4b19      	ldr	r3, [pc, #100]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a19      	ldr	r2, [pc, #100]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	0019      	movs	r1, r3
 8003d72:	4b17      	ldr	r3, [pc, #92]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	2380      	movs	r3, #128	; 0x80
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d11f      	bne.n	8003dc4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003d84:	4b14      	ldr	r3, [pc, #80]	; (8003dd8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	0013      	movs	r3, r2
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	189b      	adds	r3, r3, r2
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	4912      	ldr	r1, [pc, #72]	; (8003ddc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003d92:	0018      	movs	r0, r3
 8003d94:	f7fc f9b6 	bl	8000104 <__udivsi3>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d9e:	e008      	b.n	8003db2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3b01      	subs	r3, #1
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	e001      	b.n	8003db2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e009      	b.n	8003dc6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003db2:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003db4:	695a      	ldr	r2, [r3, #20]
 8003db6:	2380      	movs	r3, #128	; 0x80
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	401a      	ands	r2, r3
 8003dbc:	2380      	movs	r3, #128	; 0x80
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d0ed      	beq.n	8003da0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b004      	add	sp, #16
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	40007000 	.word	0x40007000
 8003dd4:	fffff9ff 	.word	0xfffff9ff
 8003dd8:	2000000c 	.word	0x2000000c
 8003ddc:	000f4240 	.word	0x000f4240

08003de0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d102      	bne.n	8003df4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	f000 fb56 	bl	80044a0 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d100      	bne.n	8003e00 <HAL_RCC_OscConfig+0x20>
 8003dfe:	e07d      	b.n	8003efc <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e00:	4bc3      	ldr	r3, [pc, #780]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2238      	movs	r2, #56	; 0x38
 8003e06:	4013      	ands	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e0a:	4bc1      	ldr	r3, [pc, #772]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	2203      	movs	r2, #3
 8003e10:	4013      	ands	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2b10      	cmp	r3, #16
 8003e18:	d102      	bne.n	8003e20 <HAL_RCC_OscConfig+0x40>
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d002      	beq.n	8003e26 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d10c      	bne.n	8003e40 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e26:	4bba      	ldr	r3, [pc, #744]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	2380      	movs	r3, #128	; 0x80
 8003e2c:	029b      	lsls	r3, r3, #10
 8003e2e:	4013      	ands	r3, r2
 8003e30:	d063      	beq.n	8003efa <HAL_RCC_OscConfig+0x11a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d15f      	bne.n	8003efa <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f000 fb30 	bl	80044a0 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	2380      	movs	r3, #128	; 0x80
 8003e46:	025b      	lsls	r3, r3, #9
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d107      	bne.n	8003e5c <HAL_RCC_OscConfig+0x7c>
 8003e4c:	4bb0      	ldr	r3, [pc, #704]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	4baf      	ldr	r3, [pc, #700]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003e52:	2180      	movs	r1, #128	; 0x80
 8003e54:	0249      	lsls	r1, r1, #9
 8003e56:	430a      	orrs	r2, r1
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e020      	b.n	8003e9e <HAL_RCC_OscConfig+0xbe>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	23a0      	movs	r3, #160	; 0xa0
 8003e62:	02db      	lsls	r3, r3, #11
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d10e      	bne.n	8003e86 <HAL_RCC_OscConfig+0xa6>
 8003e68:	4ba9      	ldr	r3, [pc, #676]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	4ba8      	ldr	r3, [pc, #672]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003e6e:	2180      	movs	r1, #128	; 0x80
 8003e70:	02c9      	lsls	r1, r1, #11
 8003e72:	430a      	orrs	r2, r1
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	4ba6      	ldr	r3, [pc, #664]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	4ba5      	ldr	r3, [pc, #660]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003e7c:	2180      	movs	r1, #128	; 0x80
 8003e7e:	0249      	lsls	r1, r1, #9
 8003e80:	430a      	orrs	r2, r1
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	e00b      	b.n	8003e9e <HAL_RCC_OscConfig+0xbe>
 8003e86:	4ba2      	ldr	r3, [pc, #648]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	4ba1      	ldr	r3, [pc, #644]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003e8c:	49a1      	ldr	r1, [pc, #644]	; (8004114 <HAL_RCC_OscConfig+0x334>)
 8003e8e:	400a      	ands	r2, r1
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	4b9f      	ldr	r3, [pc, #636]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	4b9e      	ldr	r3, [pc, #632]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003e98:	499f      	ldr	r1, [pc, #636]	; (8004118 <HAL_RCC_OscConfig+0x338>)
 8003e9a:	400a      	ands	r2, r1
 8003e9c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d014      	beq.n	8003ed0 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea6:	f7fe fa9d 	bl	80023e4 <HAL_GetTick>
 8003eaa:	0003      	movs	r3, r0
 8003eac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb0:	f7fe fa98 	bl	80023e4 <HAL_GetTick>
 8003eb4:	0002      	movs	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b64      	cmp	r3, #100	; 0x64
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e2ee      	b.n	80044a0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ec2:	4b93      	ldr	r3, [pc, #588]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	2380      	movs	r3, #128	; 0x80
 8003ec8:	029b      	lsls	r3, r3, #10
 8003eca:	4013      	ands	r3, r2
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCC_OscConfig+0xd0>
 8003ece:	e015      	b.n	8003efc <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7fe fa88 	bl	80023e4 <HAL_GetTick>
 8003ed4:	0003      	movs	r3, r0
 8003ed6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eda:	f7fe fa83 	bl	80023e4 <HAL_GetTick>
 8003ede:	0002      	movs	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b64      	cmp	r3, #100	; 0x64
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e2d9      	b.n	80044a0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eec:	4b88      	ldr	r3, [pc, #544]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	2380      	movs	r3, #128	; 0x80
 8003ef2:	029b      	lsls	r3, r3, #10
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	d1f0      	bne.n	8003eda <HAL_RCC_OscConfig+0xfa>
 8003ef8:	e000      	b.n	8003efc <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003efa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2202      	movs	r2, #2
 8003f02:	4013      	ands	r3, r2
 8003f04:	d100      	bne.n	8003f08 <HAL_RCC_OscConfig+0x128>
 8003f06:	e099      	b.n	800403c <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f08:	4b81      	ldr	r3, [pc, #516]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2238      	movs	r2, #56	; 0x38
 8003f0e:	4013      	ands	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f12:	4b7f      	ldr	r3, [pc, #508]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	2203      	movs	r2, #3
 8003f18:	4013      	ands	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	2b10      	cmp	r3, #16
 8003f20:	d102      	bne.n	8003f28 <HAL_RCC_OscConfig+0x148>
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d002      	beq.n	8003f2e <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d135      	bne.n	8003f9a <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f2e:	4b78      	ldr	r3, [pc, #480]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	2380      	movs	r3, #128	; 0x80
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	4013      	ands	r3, r2
 8003f38:	d005      	beq.n	8003f46 <HAL_RCC_OscConfig+0x166>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e2ac      	b.n	80044a0 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f46:	4b72      	ldr	r3, [pc, #456]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	4a74      	ldr	r2, [pc, #464]	; (800411c <HAL_RCC_OscConfig+0x33c>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	0019      	movs	r1, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	021a      	lsls	r2, r3, #8
 8003f56:	4b6e      	ldr	r3, [pc, #440]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d112      	bne.n	8003f88 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003f62:	4b6b      	ldr	r3, [pc, #428]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a6e      	ldr	r2, [pc, #440]	; (8004120 <HAL_RCC_OscConfig+0x340>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	0019      	movs	r1, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	4b67      	ldr	r3, [pc, #412]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003f72:	430a      	orrs	r2, r1
 8003f74:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003f76:	4b66      	ldr	r3, [pc, #408]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	0adb      	lsrs	r3, r3, #11
 8003f7c:	2207      	movs	r2, #7
 8003f7e:	4013      	ands	r3, r2
 8003f80:	4a68      	ldr	r2, [pc, #416]	; (8004124 <HAL_RCC_OscConfig+0x344>)
 8003f82:	40da      	lsrs	r2, r3
 8003f84:	4b68      	ldr	r3, [pc, #416]	; (8004128 <HAL_RCC_OscConfig+0x348>)
 8003f86:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f88:	4b68      	ldr	r3, [pc, #416]	; (800412c <HAL_RCC_OscConfig+0x34c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f7fe f9cd 	bl	800232c <HAL_InitTick>
 8003f92:	1e03      	subs	r3, r0, #0
 8003f94:	d051      	beq.n	800403a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e282      	b.n	80044a0 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d030      	beq.n	8004004 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003fa2:	4b5b      	ldr	r3, [pc, #364]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a5e      	ldr	r2, [pc, #376]	; (8004120 <HAL_RCC_OscConfig+0x340>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	0019      	movs	r1, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	4b57      	ldr	r3, [pc, #348]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003fb6:	4b56      	ldr	r3, [pc, #344]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	4b55      	ldr	r3, [pc, #340]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003fbc:	2180      	movs	r1, #128	; 0x80
 8003fbe:	0049      	lsls	r1, r1, #1
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc4:	f7fe fa0e 	bl	80023e4 <HAL_GetTick>
 8003fc8:	0003      	movs	r3, r0
 8003fca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fce:	f7fe fa09 	bl	80023e4 <HAL_GetTick>
 8003fd2:	0002      	movs	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e25f      	b.n	80044a0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fe0:	4b4b      	ldr	r3, [pc, #300]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	2380      	movs	r3, #128	; 0x80
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fec:	4b48      	ldr	r3, [pc, #288]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	4a4a      	ldr	r2, [pc, #296]	; (800411c <HAL_RCC_OscConfig+0x33c>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	0019      	movs	r1, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	021a      	lsls	r2, r3, #8
 8003ffc:	4b44      	ldr	r3, [pc, #272]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
 8004002:	e01b      	b.n	800403c <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004004:	4b42      	ldr	r3, [pc, #264]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	4b41      	ldr	r3, [pc, #260]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 800400a:	4949      	ldr	r1, [pc, #292]	; (8004130 <HAL_RCC_OscConfig+0x350>)
 800400c:	400a      	ands	r2, r1
 800400e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004010:	f7fe f9e8 	bl	80023e4 <HAL_GetTick>
 8004014:	0003      	movs	r3, r0
 8004016:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800401a:	f7fe f9e3 	bl	80023e4 <HAL_GetTick>
 800401e:	0002      	movs	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e239      	b.n	80044a0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800402c:	4b38      	ldr	r3, [pc, #224]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	2380      	movs	r3, #128	; 0x80
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	4013      	ands	r3, r2
 8004036:	d1f0      	bne.n	800401a <HAL_RCC_OscConfig+0x23a>
 8004038:	e000      	b.n	800403c <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800403a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2208      	movs	r2, #8
 8004042:	4013      	ands	r3, r2
 8004044:	d047      	beq.n	80040d6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004046:	4b32      	ldr	r3, [pc, #200]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2238      	movs	r2, #56	; 0x38
 800404c:	4013      	ands	r3, r2
 800404e:	2b18      	cmp	r3, #24
 8004050:	d10a      	bne.n	8004068 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004052:	4b2f      	ldr	r3, [pc, #188]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8004054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004056:	2202      	movs	r2, #2
 8004058:	4013      	ands	r3, r2
 800405a:	d03c      	beq.n	80040d6 <HAL_RCC_OscConfig+0x2f6>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d138      	bne.n	80040d6 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e21b      	b.n	80044a0 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d019      	beq.n	80040a4 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004070:	4b27      	ldr	r3, [pc, #156]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8004072:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004074:	4b26      	ldr	r3, [pc, #152]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 8004076:	2101      	movs	r1, #1
 8004078:	430a      	orrs	r2, r1
 800407a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407c:	f7fe f9b2 	bl	80023e4 <HAL_GetTick>
 8004080:	0003      	movs	r3, r0
 8004082:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004086:	f7fe f9ad 	bl	80023e4 <HAL_GetTick>
 800408a:	0002      	movs	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e203      	b.n	80044a0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004098:	4b1d      	ldr	r3, [pc, #116]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 800409a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800409c:	2202      	movs	r2, #2
 800409e:	4013      	ands	r3, r2
 80040a0:	d0f1      	beq.n	8004086 <HAL_RCC_OscConfig+0x2a6>
 80040a2:	e018      	b.n	80040d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80040a4:	4b1a      	ldr	r3, [pc, #104]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 80040a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040a8:	4b19      	ldr	r3, [pc, #100]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 80040aa:	2101      	movs	r1, #1
 80040ac:	438a      	bics	r2, r1
 80040ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b0:	f7fe f998 	bl	80023e4 <HAL_GetTick>
 80040b4:	0003      	movs	r3, r0
 80040b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ba:	f7fe f993 	bl	80023e4 <HAL_GetTick>
 80040be:	0002      	movs	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e1e9      	b.n	80044a0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040cc:	4b10      	ldr	r3, [pc, #64]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 80040ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d0:	2202      	movs	r2, #2
 80040d2:	4013      	ands	r3, r2
 80040d4:	d1f1      	bne.n	80040ba <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2204      	movs	r2, #4
 80040dc:	4013      	ands	r3, r2
 80040de:	d100      	bne.n	80040e2 <HAL_RCC_OscConfig+0x302>
 80040e0:	e0c6      	b.n	8004270 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040e2:	231f      	movs	r3, #31
 80040e4:	18fb      	adds	r3, r7, r3
 80040e6:	2200      	movs	r2, #0
 80040e8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80040ea:	4b09      	ldr	r3, [pc, #36]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2238      	movs	r2, #56	; 0x38
 80040f0:	4013      	ands	r3, r2
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	d11e      	bne.n	8004134 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80040f6:	4b06      	ldr	r3, [pc, #24]	; (8004110 <HAL_RCC_OscConfig+0x330>)
 80040f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fa:	2202      	movs	r2, #2
 80040fc:	4013      	ands	r3, r2
 80040fe:	d100      	bne.n	8004102 <HAL_RCC_OscConfig+0x322>
 8004100:	e0b6      	b.n	8004270 <HAL_RCC_OscConfig+0x490>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d000      	beq.n	800410c <HAL_RCC_OscConfig+0x32c>
 800410a:	e0b1      	b.n	8004270 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e1c7      	b.n	80044a0 <HAL_RCC_OscConfig+0x6c0>
 8004110:	40021000 	.word	0x40021000
 8004114:	fffeffff 	.word	0xfffeffff
 8004118:	fffbffff 	.word	0xfffbffff
 800411c:	ffff80ff 	.word	0xffff80ff
 8004120:	ffffc7ff 	.word	0xffffc7ff
 8004124:	00f42400 	.word	0x00f42400
 8004128:	2000000c 	.word	0x2000000c
 800412c:	20000010 	.word	0x20000010
 8004130:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004134:	4bb8      	ldr	r3, [pc, #736]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 8004136:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004138:	2380      	movs	r3, #128	; 0x80
 800413a:	055b      	lsls	r3, r3, #21
 800413c:	4013      	ands	r3, r2
 800413e:	d101      	bne.n	8004144 <HAL_RCC_OscConfig+0x364>
 8004140:	2301      	movs	r3, #1
 8004142:	e000      	b.n	8004146 <HAL_RCC_OscConfig+0x366>
 8004144:	2300      	movs	r3, #0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d011      	beq.n	800416e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800414a:	4bb3      	ldr	r3, [pc, #716]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 800414c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800414e:	4bb2      	ldr	r3, [pc, #712]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 8004150:	2180      	movs	r1, #128	; 0x80
 8004152:	0549      	lsls	r1, r1, #21
 8004154:	430a      	orrs	r2, r1
 8004156:	63da      	str	r2, [r3, #60]	; 0x3c
 8004158:	4baf      	ldr	r3, [pc, #700]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 800415a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800415c:	2380      	movs	r3, #128	; 0x80
 800415e:	055b      	lsls	r3, r3, #21
 8004160:	4013      	ands	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004166:	231f      	movs	r3, #31
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	2201      	movs	r2, #1
 800416c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800416e:	4bab      	ldr	r3, [pc, #684]	; (800441c <HAL_RCC_OscConfig+0x63c>)
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	2380      	movs	r3, #128	; 0x80
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	4013      	ands	r3, r2
 8004178:	d11a      	bne.n	80041b0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800417a:	4ba8      	ldr	r3, [pc, #672]	; (800441c <HAL_RCC_OscConfig+0x63c>)
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	4ba7      	ldr	r3, [pc, #668]	; (800441c <HAL_RCC_OscConfig+0x63c>)
 8004180:	2180      	movs	r1, #128	; 0x80
 8004182:	0049      	lsls	r1, r1, #1
 8004184:	430a      	orrs	r2, r1
 8004186:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004188:	f7fe f92c 	bl	80023e4 <HAL_GetTick>
 800418c:	0003      	movs	r3, r0
 800418e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004192:	f7fe f927 	bl	80023e4 <HAL_GetTick>
 8004196:	0002      	movs	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e17d      	b.n	80044a0 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041a4:	4b9d      	ldr	r3, [pc, #628]	; (800441c <HAL_RCC_OscConfig+0x63c>)
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	2380      	movs	r3, #128	; 0x80
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	4013      	ands	r3, r2
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d106      	bne.n	80041c6 <HAL_RCC_OscConfig+0x3e6>
 80041b8:	4b97      	ldr	r3, [pc, #604]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 80041ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041bc:	4b96      	ldr	r3, [pc, #600]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 80041be:	2101      	movs	r1, #1
 80041c0:	430a      	orrs	r2, r1
 80041c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80041c4:	e01c      	b.n	8004200 <HAL_RCC_OscConfig+0x420>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b05      	cmp	r3, #5
 80041cc:	d10c      	bne.n	80041e8 <HAL_RCC_OscConfig+0x408>
 80041ce:	4b92      	ldr	r3, [pc, #584]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 80041d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041d2:	4b91      	ldr	r3, [pc, #580]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 80041d4:	2104      	movs	r1, #4
 80041d6:	430a      	orrs	r2, r1
 80041d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80041da:	4b8f      	ldr	r3, [pc, #572]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 80041dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041de:	4b8e      	ldr	r3, [pc, #568]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 80041e0:	2101      	movs	r1, #1
 80041e2:	430a      	orrs	r2, r1
 80041e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80041e6:	e00b      	b.n	8004200 <HAL_RCC_OscConfig+0x420>
 80041e8:	4b8b      	ldr	r3, [pc, #556]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 80041ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041ec:	4b8a      	ldr	r3, [pc, #552]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 80041ee:	2101      	movs	r1, #1
 80041f0:	438a      	bics	r2, r1
 80041f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80041f4:	4b88      	ldr	r3, [pc, #544]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 80041f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041f8:	4b87      	ldr	r3, [pc, #540]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 80041fa:	2104      	movs	r1, #4
 80041fc:	438a      	bics	r2, r1
 80041fe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d014      	beq.n	8004232 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004208:	f7fe f8ec 	bl	80023e4 <HAL_GetTick>
 800420c:	0003      	movs	r3, r0
 800420e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004210:	e009      	b.n	8004226 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004212:	f7fe f8e7 	bl	80023e4 <HAL_GetTick>
 8004216:	0002      	movs	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	4a80      	ldr	r2, [pc, #512]	; (8004420 <HAL_RCC_OscConfig+0x640>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e13c      	b.n	80044a0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004226:	4b7c      	ldr	r3, [pc, #496]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 8004228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422a:	2202      	movs	r2, #2
 800422c:	4013      	ands	r3, r2
 800422e:	d0f0      	beq.n	8004212 <HAL_RCC_OscConfig+0x432>
 8004230:	e013      	b.n	800425a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004232:	f7fe f8d7 	bl	80023e4 <HAL_GetTick>
 8004236:	0003      	movs	r3, r0
 8004238:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800423a:	e009      	b.n	8004250 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800423c:	f7fe f8d2 	bl	80023e4 <HAL_GetTick>
 8004240:	0002      	movs	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	4a76      	ldr	r2, [pc, #472]	; (8004420 <HAL_RCC_OscConfig+0x640>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e127      	b.n	80044a0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004250:	4b71      	ldr	r3, [pc, #452]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 8004252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004254:	2202      	movs	r2, #2
 8004256:	4013      	ands	r3, r2
 8004258:	d1f0      	bne.n	800423c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800425a:	231f      	movs	r3, #31
 800425c:	18fb      	adds	r3, r7, r3
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d105      	bne.n	8004270 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004264:	4b6c      	ldr	r3, [pc, #432]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 8004266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004268:	4b6b      	ldr	r3, [pc, #428]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 800426a:	496e      	ldr	r1, [pc, #440]	; (8004424 <HAL_RCC_OscConfig+0x644>)
 800426c:	400a      	ands	r2, r1
 800426e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2220      	movs	r2, #32
 8004276:	4013      	ands	r3, r2
 8004278:	d039      	beq.n	80042ee <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d01b      	beq.n	80042ba <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004282:	4b65      	ldr	r3, [pc, #404]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	4b64      	ldr	r3, [pc, #400]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 8004288:	2180      	movs	r1, #128	; 0x80
 800428a:	03c9      	lsls	r1, r1, #15
 800428c:	430a      	orrs	r2, r1
 800428e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004290:	f7fe f8a8 	bl	80023e4 <HAL_GetTick>
 8004294:	0003      	movs	r3, r0
 8004296:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004298:	e008      	b.n	80042ac <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800429a:	f7fe f8a3 	bl	80023e4 <HAL_GetTick>
 800429e:	0002      	movs	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e0f9      	b.n	80044a0 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80042ac:	4b5a      	ldr	r3, [pc, #360]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	2380      	movs	r3, #128	; 0x80
 80042b2:	041b      	lsls	r3, r3, #16
 80042b4:	4013      	ands	r3, r2
 80042b6:	d0f0      	beq.n	800429a <HAL_RCC_OscConfig+0x4ba>
 80042b8:	e019      	b.n	80042ee <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042ba:	4b57      	ldr	r3, [pc, #348]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4b56      	ldr	r3, [pc, #344]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 80042c0:	4959      	ldr	r1, [pc, #356]	; (8004428 <HAL_RCC_OscConfig+0x648>)
 80042c2:	400a      	ands	r2, r1
 80042c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c6:	f7fe f88d 	bl	80023e4 <HAL_GetTick>
 80042ca:	0003      	movs	r3, r0
 80042cc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042d0:	f7fe f888 	bl	80023e4 <HAL_GetTick>
 80042d4:	0002      	movs	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e0de      	b.n	80044a0 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80042e2:	4b4d      	ldr	r3, [pc, #308]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	2380      	movs	r3, #128	; 0x80
 80042e8:	041b      	lsls	r3, r3, #16
 80042ea:	4013      	ands	r3, r2
 80042ec:	d1f0      	bne.n	80042d0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d100      	bne.n	80042f8 <HAL_RCC_OscConfig+0x518>
 80042f6:	e0d2      	b.n	800449e <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042f8:	4b47      	ldr	r3, [pc, #284]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	2238      	movs	r2, #56	; 0x38
 80042fe:	4013      	ands	r3, r2
 8004300:	2b10      	cmp	r3, #16
 8004302:	d100      	bne.n	8004306 <HAL_RCC_OscConfig+0x526>
 8004304:	e081      	b.n	800440a <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	2b02      	cmp	r3, #2
 800430c:	d156      	bne.n	80043bc <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800430e:	4b42      	ldr	r3, [pc, #264]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	4b41      	ldr	r3, [pc, #260]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 8004314:	4945      	ldr	r1, [pc, #276]	; (800442c <HAL_RCC_OscConfig+0x64c>)
 8004316:	400a      	ands	r2, r1
 8004318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431a:	f7fe f863 	bl	80023e4 <HAL_GetTick>
 800431e:	0003      	movs	r3, r0
 8004320:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004324:	f7fe f85e 	bl	80023e4 <HAL_GetTick>
 8004328:	0002      	movs	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e0b4      	b.n	80044a0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004336:	4b38      	ldr	r3, [pc, #224]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	2380      	movs	r3, #128	; 0x80
 800433c:	049b      	lsls	r3, r3, #18
 800433e:	4013      	ands	r3, r2
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004342:	4b35      	ldr	r3, [pc, #212]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	4a3a      	ldr	r2, [pc, #232]	; (8004430 <HAL_RCC_OscConfig+0x650>)
 8004348:	4013      	ands	r3, r2
 800434a:	0019      	movs	r1, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	431a      	orrs	r2, r3
 8004370:	4b29      	ldr	r3, [pc, #164]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 8004372:	430a      	orrs	r2, r1
 8004374:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004376:	4b28      	ldr	r3, [pc, #160]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	4b27      	ldr	r3, [pc, #156]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 800437c:	2180      	movs	r1, #128	; 0x80
 800437e:	0449      	lsls	r1, r1, #17
 8004380:	430a      	orrs	r2, r1
 8004382:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004384:	4b24      	ldr	r3, [pc, #144]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	4b23      	ldr	r3, [pc, #140]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 800438a:	2180      	movs	r1, #128	; 0x80
 800438c:	0549      	lsls	r1, r1, #21
 800438e:	430a      	orrs	r2, r1
 8004390:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004392:	f7fe f827 	bl	80023e4 <HAL_GetTick>
 8004396:	0003      	movs	r3, r0
 8004398:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800439c:	f7fe f822 	bl	80023e4 <HAL_GetTick>
 80043a0:	0002      	movs	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e078      	b.n	80044a0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ae:	4b1a      	ldr	r3, [pc, #104]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	2380      	movs	r3, #128	; 0x80
 80043b4:	049b      	lsls	r3, r3, #18
 80043b6:	4013      	ands	r3, r2
 80043b8:	d0f0      	beq.n	800439c <HAL_RCC_OscConfig+0x5bc>
 80043ba:	e070      	b.n	800449e <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043bc:	4b16      	ldr	r3, [pc, #88]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4b15      	ldr	r3, [pc, #84]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 80043c2:	491a      	ldr	r1, [pc, #104]	; (800442c <HAL_RCC_OscConfig+0x64c>)
 80043c4:	400a      	ands	r2, r1
 80043c6:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80043c8:	4b13      	ldr	r3, [pc, #76]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	4b12      	ldr	r3, [pc, #72]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 80043ce:	2103      	movs	r1, #3
 80043d0:	438a      	bics	r2, r1
 80043d2:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80043d4:	4b10      	ldr	r3, [pc, #64]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 80043da:	4916      	ldr	r1, [pc, #88]	; (8004434 <HAL_RCC_OscConfig+0x654>)
 80043dc:	400a      	ands	r2, r1
 80043de:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e0:	f7fe f800 	bl	80023e4 <HAL_GetTick>
 80043e4:	0003      	movs	r3, r0
 80043e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ea:	f7fd fffb 	bl	80023e4 <HAL_GetTick>
 80043ee:	0002      	movs	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e051      	b.n	80044a0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043fc:	4b06      	ldr	r3, [pc, #24]	; (8004418 <HAL_RCC_OscConfig+0x638>)
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	2380      	movs	r3, #128	; 0x80
 8004402:	049b      	lsls	r3, r3, #18
 8004404:	4013      	ands	r3, r2
 8004406:	d1f0      	bne.n	80043ea <HAL_RCC_OscConfig+0x60a>
 8004408:	e049      	b.n	800449e <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d112      	bne.n	8004438 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e044      	b.n	80044a0 <HAL_RCC_OscConfig+0x6c0>
 8004416:	46c0      	nop			; (mov r8, r8)
 8004418:	40021000 	.word	0x40021000
 800441c:	40007000 	.word	0x40007000
 8004420:	00001388 	.word	0x00001388
 8004424:	efffffff 	.word	0xefffffff
 8004428:	ffbfffff 	.word	0xffbfffff
 800442c:	feffffff 	.word	0xfeffffff
 8004430:	11c1808c 	.word	0x11c1808c
 8004434:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004438:	4b1b      	ldr	r3, [pc, #108]	; (80044a8 <HAL_RCC_OscConfig+0x6c8>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2203      	movs	r2, #3
 8004442:	401a      	ands	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	429a      	cmp	r2, r3
 800444a:	d126      	bne.n	800449a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	2270      	movs	r2, #112	; 0x70
 8004450:	401a      	ands	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004456:	429a      	cmp	r2, r3
 8004458:	d11f      	bne.n	800449a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	23fe      	movs	r3, #254	; 0xfe
 800445e:	01db      	lsls	r3, r3, #7
 8004460:	401a      	ands	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004468:	429a      	cmp	r2, r3
 800446a:	d116      	bne.n	800449a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	23f8      	movs	r3, #248	; 0xf8
 8004470:	039b      	lsls	r3, r3, #14
 8004472:	401a      	ands	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004478:	429a      	cmp	r2, r3
 800447a:	d10e      	bne.n	800449a <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	23e0      	movs	r3, #224	; 0xe0
 8004480:	051b      	lsls	r3, r3, #20
 8004482:	401a      	ands	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004488:	429a      	cmp	r2, r3
 800448a:	d106      	bne.n	800449a <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	0f5b      	lsrs	r3, r3, #29
 8004490:	075a      	lsls	r2, r3, #29
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004496:	429a      	cmp	r2, r3
 8004498:	d001      	beq.n	800449e <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	0018      	movs	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b008      	add	sp, #32
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40021000 	.word	0x40021000

080044ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0e9      	b.n	8004694 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044c0:	4b76      	ldr	r3, [pc, #472]	; (800469c <HAL_RCC_ClockConfig+0x1f0>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2207      	movs	r2, #7
 80044c6:	4013      	ands	r3, r2
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d91e      	bls.n	800450c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ce:	4b73      	ldr	r3, [pc, #460]	; (800469c <HAL_RCC_ClockConfig+0x1f0>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2207      	movs	r2, #7
 80044d4:	4393      	bics	r3, r2
 80044d6:	0019      	movs	r1, r3
 80044d8:	4b70      	ldr	r3, [pc, #448]	; (800469c <HAL_RCC_ClockConfig+0x1f0>)
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044e0:	f7fd ff80 	bl	80023e4 <HAL_GetTick>
 80044e4:	0003      	movs	r3, r0
 80044e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80044e8:	e009      	b.n	80044fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ea:	f7fd ff7b 	bl	80023e4 <HAL_GetTick>
 80044ee:	0002      	movs	r2, r0
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	4a6a      	ldr	r2, [pc, #424]	; (80046a0 <HAL_RCC_ClockConfig+0x1f4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e0ca      	b.n	8004694 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80044fe:	4b67      	ldr	r3, [pc, #412]	; (800469c <HAL_RCC_ClockConfig+0x1f0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2207      	movs	r2, #7
 8004504:	4013      	ands	r3, r2
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d1ee      	bne.n	80044ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2202      	movs	r2, #2
 8004512:	4013      	ands	r3, r2
 8004514:	d015      	beq.n	8004542 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2204      	movs	r2, #4
 800451c:	4013      	ands	r3, r2
 800451e:	d006      	beq.n	800452e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004520:	4b60      	ldr	r3, [pc, #384]	; (80046a4 <HAL_RCC_ClockConfig+0x1f8>)
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	4b5f      	ldr	r3, [pc, #380]	; (80046a4 <HAL_RCC_ClockConfig+0x1f8>)
 8004526:	21e0      	movs	r1, #224	; 0xe0
 8004528:	01c9      	lsls	r1, r1, #7
 800452a:	430a      	orrs	r2, r1
 800452c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800452e:	4b5d      	ldr	r3, [pc, #372]	; (80046a4 <HAL_RCC_ClockConfig+0x1f8>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	4a5d      	ldr	r2, [pc, #372]	; (80046a8 <HAL_RCC_ClockConfig+0x1fc>)
 8004534:	4013      	ands	r3, r2
 8004536:	0019      	movs	r1, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	4b59      	ldr	r3, [pc, #356]	; (80046a4 <HAL_RCC_ClockConfig+0x1f8>)
 800453e:	430a      	orrs	r2, r1
 8004540:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2201      	movs	r2, #1
 8004548:	4013      	ands	r3, r2
 800454a:	d057      	beq.n	80045fc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d107      	bne.n	8004564 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004554:	4b53      	ldr	r3, [pc, #332]	; (80046a4 <HAL_RCC_ClockConfig+0x1f8>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	2380      	movs	r3, #128	; 0x80
 800455a:	029b      	lsls	r3, r3, #10
 800455c:	4013      	ands	r3, r2
 800455e:	d12b      	bne.n	80045b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e097      	b.n	8004694 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b02      	cmp	r3, #2
 800456a:	d107      	bne.n	800457c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800456c:	4b4d      	ldr	r3, [pc, #308]	; (80046a4 <HAL_RCC_ClockConfig+0x1f8>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	2380      	movs	r3, #128	; 0x80
 8004572:	049b      	lsls	r3, r3, #18
 8004574:	4013      	ands	r3, r2
 8004576:	d11f      	bne.n	80045b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e08b      	b.n	8004694 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d107      	bne.n	8004594 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004584:	4b47      	ldr	r3, [pc, #284]	; (80046a4 <HAL_RCC_ClockConfig+0x1f8>)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	2380      	movs	r3, #128	; 0x80
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4013      	ands	r3, r2
 800458e:	d113      	bne.n	80045b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e07f      	b.n	8004694 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b03      	cmp	r3, #3
 800459a:	d106      	bne.n	80045aa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800459c:	4b41      	ldr	r3, [pc, #260]	; (80046a4 <HAL_RCC_ClockConfig+0x1f8>)
 800459e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a0:	2202      	movs	r2, #2
 80045a2:	4013      	ands	r3, r2
 80045a4:	d108      	bne.n	80045b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e074      	b.n	8004694 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045aa:	4b3e      	ldr	r3, [pc, #248]	; (80046a4 <HAL_RCC_ClockConfig+0x1f8>)
 80045ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ae:	2202      	movs	r2, #2
 80045b0:	4013      	ands	r3, r2
 80045b2:	d101      	bne.n	80045b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e06d      	b.n	8004694 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045b8:	4b3a      	ldr	r3, [pc, #232]	; (80046a4 <HAL_RCC_ClockConfig+0x1f8>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2207      	movs	r2, #7
 80045be:	4393      	bics	r3, r2
 80045c0:	0019      	movs	r1, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	4b37      	ldr	r3, [pc, #220]	; (80046a4 <HAL_RCC_ClockConfig+0x1f8>)
 80045c8:	430a      	orrs	r2, r1
 80045ca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045cc:	f7fd ff0a 	bl	80023e4 <HAL_GetTick>
 80045d0:	0003      	movs	r3, r0
 80045d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d4:	e009      	b.n	80045ea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d6:	f7fd ff05 	bl	80023e4 <HAL_GetTick>
 80045da:	0002      	movs	r2, r0
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	4a2f      	ldr	r2, [pc, #188]	; (80046a0 <HAL_RCC_ClockConfig+0x1f4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e054      	b.n	8004694 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ea:	4b2e      	ldr	r3, [pc, #184]	; (80046a4 <HAL_RCC_ClockConfig+0x1f8>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	2238      	movs	r2, #56	; 0x38
 80045f0:	401a      	ands	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d1ec      	bne.n	80045d6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045fc:	4b27      	ldr	r3, [pc, #156]	; (800469c <HAL_RCC_ClockConfig+0x1f0>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2207      	movs	r2, #7
 8004602:	4013      	ands	r3, r2
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d21e      	bcs.n	8004648 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460a:	4b24      	ldr	r3, [pc, #144]	; (800469c <HAL_RCC_ClockConfig+0x1f0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2207      	movs	r2, #7
 8004610:	4393      	bics	r3, r2
 8004612:	0019      	movs	r1, r3
 8004614:	4b21      	ldr	r3, [pc, #132]	; (800469c <HAL_RCC_ClockConfig+0x1f0>)
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800461c:	f7fd fee2 	bl	80023e4 <HAL_GetTick>
 8004620:	0003      	movs	r3, r0
 8004622:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004624:	e009      	b.n	800463a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004626:	f7fd fedd 	bl	80023e4 <HAL_GetTick>
 800462a:	0002      	movs	r2, r0
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	4a1b      	ldr	r2, [pc, #108]	; (80046a0 <HAL_RCC_ClockConfig+0x1f4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e02c      	b.n	8004694 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800463a:	4b18      	ldr	r3, [pc, #96]	; (800469c <HAL_RCC_ClockConfig+0x1f0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2207      	movs	r2, #7
 8004640:	4013      	ands	r3, r2
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d1ee      	bne.n	8004626 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2204      	movs	r2, #4
 800464e:	4013      	ands	r3, r2
 8004650:	d009      	beq.n	8004666 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004652:	4b14      	ldr	r3, [pc, #80]	; (80046a4 <HAL_RCC_ClockConfig+0x1f8>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	4a15      	ldr	r2, [pc, #84]	; (80046ac <HAL_RCC_ClockConfig+0x200>)
 8004658:	4013      	ands	r3, r2
 800465a:	0019      	movs	r1, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <HAL_RCC_ClockConfig+0x1f8>)
 8004662:	430a      	orrs	r2, r1
 8004664:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004666:	f000 f829 	bl	80046bc <HAL_RCC_GetSysClockFreq>
 800466a:	0001      	movs	r1, r0
 800466c:	4b0d      	ldr	r3, [pc, #52]	; (80046a4 <HAL_RCC_ClockConfig+0x1f8>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	0a1b      	lsrs	r3, r3, #8
 8004672:	220f      	movs	r2, #15
 8004674:	401a      	ands	r2, r3
 8004676:	4b0e      	ldr	r3, [pc, #56]	; (80046b0 <HAL_RCC_ClockConfig+0x204>)
 8004678:	0092      	lsls	r2, r2, #2
 800467a:	58d3      	ldr	r3, [r2, r3]
 800467c:	221f      	movs	r2, #31
 800467e:	4013      	ands	r3, r2
 8004680:	000a      	movs	r2, r1
 8004682:	40da      	lsrs	r2, r3
 8004684:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <HAL_RCC_ClockConfig+0x208>)
 8004686:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004688:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <HAL_RCC_ClockConfig+0x20c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	0018      	movs	r0, r3
 800468e:	f7fd fe4d 	bl	800232c <HAL_InitTick>
 8004692:	0003      	movs	r3, r0
}
 8004694:	0018      	movs	r0, r3
 8004696:	46bd      	mov	sp, r7
 8004698:	b004      	add	sp, #16
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40022000 	.word	0x40022000
 80046a0:	00001388 	.word	0x00001388
 80046a4:	40021000 	.word	0x40021000
 80046a8:	fffff0ff 	.word	0xfffff0ff
 80046ac:	ffff8fff 	.word	0xffff8fff
 80046b0:	08004d68 	.word	0x08004d68
 80046b4:	2000000c 	.word	0x2000000c
 80046b8:	20000010 	.word	0x20000010

080046bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046c2:	4b3c      	ldr	r3, [pc, #240]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2238      	movs	r2, #56	; 0x38
 80046c8:	4013      	ands	r3, r2
 80046ca:	d10f      	bne.n	80046ec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80046cc:	4b39      	ldr	r3, [pc, #228]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	0adb      	lsrs	r3, r3, #11
 80046d2:	2207      	movs	r2, #7
 80046d4:	4013      	ands	r3, r2
 80046d6:	2201      	movs	r2, #1
 80046d8:	409a      	lsls	r2, r3
 80046da:	0013      	movs	r3, r2
 80046dc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80046de:	6839      	ldr	r1, [r7, #0]
 80046e0:	4835      	ldr	r0, [pc, #212]	; (80047b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80046e2:	f7fb fd0f 	bl	8000104 <__udivsi3>
 80046e6:	0003      	movs	r3, r0
 80046e8:	613b      	str	r3, [r7, #16]
 80046ea:	e05d      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046ec:	4b31      	ldr	r3, [pc, #196]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2238      	movs	r2, #56	; 0x38
 80046f2:	4013      	ands	r3, r2
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d102      	bne.n	80046fe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046f8:	4b30      	ldr	r3, [pc, #192]	; (80047bc <HAL_RCC_GetSysClockFreq+0x100>)
 80046fa:	613b      	str	r3, [r7, #16]
 80046fc:	e054      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046fe:	4b2d      	ldr	r3, [pc, #180]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	2238      	movs	r2, #56	; 0x38
 8004704:	4013      	ands	r3, r2
 8004706:	2b10      	cmp	r3, #16
 8004708:	d138      	bne.n	800477c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800470a:	4b2a      	ldr	r3, [pc, #168]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	2203      	movs	r2, #3
 8004710:	4013      	ands	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004714:	4b27      	ldr	r3, [pc, #156]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	091b      	lsrs	r3, r3, #4
 800471a:	2207      	movs	r2, #7
 800471c:	4013      	ands	r3, r2
 800471e:	3301      	adds	r3, #1
 8004720:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b03      	cmp	r3, #3
 8004726:	d10d      	bne.n	8004744 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	4824      	ldr	r0, [pc, #144]	; (80047bc <HAL_RCC_GetSysClockFreq+0x100>)
 800472c:	f7fb fcea 	bl	8000104 <__udivsi3>
 8004730:	0003      	movs	r3, r0
 8004732:	0019      	movs	r1, r3
 8004734:	4b1f      	ldr	r3, [pc, #124]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	0a1b      	lsrs	r3, r3, #8
 800473a:	227f      	movs	r2, #127	; 0x7f
 800473c:	4013      	ands	r3, r2
 800473e:	434b      	muls	r3, r1
 8004740:	617b      	str	r3, [r7, #20]
        break;
 8004742:	e00d      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	481c      	ldr	r0, [pc, #112]	; (80047b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004748:	f7fb fcdc 	bl	8000104 <__udivsi3>
 800474c:	0003      	movs	r3, r0
 800474e:	0019      	movs	r1, r3
 8004750:	4b18      	ldr	r3, [pc, #96]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	0a1b      	lsrs	r3, r3, #8
 8004756:	227f      	movs	r2, #127	; 0x7f
 8004758:	4013      	ands	r3, r2
 800475a:	434b      	muls	r3, r1
 800475c:	617b      	str	r3, [r7, #20]
        break;
 800475e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004760:	4b14      	ldr	r3, [pc, #80]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	0f5b      	lsrs	r3, r3, #29
 8004766:	2207      	movs	r2, #7
 8004768:	4013      	ands	r3, r2
 800476a:	3301      	adds	r3, #1
 800476c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	6978      	ldr	r0, [r7, #20]
 8004772:	f7fb fcc7 	bl	8000104 <__udivsi3>
 8004776:	0003      	movs	r3, r0
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	e015      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800477c:	4b0d      	ldr	r3, [pc, #52]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2238      	movs	r2, #56	; 0x38
 8004782:	4013      	ands	r3, r2
 8004784:	2b20      	cmp	r3, #32
 8004786:	d103      	bne.n	8004790 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004788:	2380      	movs	r3, #128	; 0x80
 800478a:	021b      	lsls	r3, r3, #8
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	e00b      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004790:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2238      	movs	r2, #56	; 0x38
 8004796:	4013      	ands	r3, r2
 8004798:	2b18      	cmp	r3, #24
 800479a:	d103      	bne.n	80047a4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800479c:	23fa      	movs	r3, #250	; 0xfa
 800479e:	01db      	lsls	r3, r3, #7
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	e001      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047a8:	693b      	ldr	r3, [r7, #16]
}
 80047aa:	0018      	movs	r0, r3
 80047ac:	46bd      	mov	sp, r7
 80047ae:	b006      	add	sp, #24
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	46c0      	nop			; (mov r8, r8)
 80047b4:	40021000 	.word	0x40021000
 80047b8:	00f42400 	.word	0x00f42400
 80047bc:	007a1200 	.word	0x007a1200

080047c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80047c8:	2313      	movs	r3, #19
 80047ca:	18fb      	adds	r3, r7, r3
 80047cc:	2200      	movs	r2, #0
 80047ce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047d0:	2312      	movs	r3, #18
 80047d2:	18fb      	adds	r3, r7, r3
 80047d4:	2200      	movs	r2, #0
 80047d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	2380      	movs	r3, #128	; 0x80
 80047de:	029b      	lsls	r3, r3, #10
 80047e0:	4013      	ands	r3, r2
 80047e2:	d100      	bne.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80047e4:	e0ad      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e6:	2011      	movs	r0, #17
 80047e8:	183b      	adds	r3, r7, r0
 80047ea:	2200      	movs	r2, #0
 80047ec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ee:	4b47      	ldr	r3, [pc, #284]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047f2:	2380      	movs	r3, #128	; 0x80
 80047f4:	055b      	lsls	r3, r3, #21
 80047f6:	4013      	ands	r3, r2
 80047f8:	d110      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047fa:	4b44      	ldr	r3, [pc, #272]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047fe:	4b43      	ldr	r3, [pc, #268]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004800:	2180      	movs	r1, #128	; 0x80
 8004802:	0549      	lsls	r1, r1, #21
 8004804:	430a      	orrs	r2, r1
 8004806:	63da      	str	r2, [r3, #60]	; 0x3c
 8004808:	4b40      	ldr	r3, [pc, #256]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800480a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	055b      	lsls	r3, r3, #21
 8004810:	4013      	ands	r3, r2
 8004812:	60bb      	str	r3, [r7, #8]
 8004814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004816:	183b      	adds	r3, r7, r0
 8004818:	2201      	movs	r2, #1
 800481a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800481c:	4b3c      	ldr	r3, [pc, #240]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	4b3b      	ldr	r3, [pc, #236]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004822:	2180      	movs	r1, #128	; 0x80
 8004824:	0049      	lsls	r1, r1, #1
 8004826:	430a      	orrs	r2, r1
 8004828:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800482a:	f7fd fddb 	bl	80023e4 <HAL_GetTick>
 800482e:	0003      	movs	r3, r0
 8004830:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004832:	e00b      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004834:	f7fd fdd6 	bl	80023e4 <HAL_GetTick>
 8004838:	0002      	movs	r2, r0
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d904      	bls.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004842:	2313      	movs	r3, #19
 8004844:	18fb      	adds	r3, r7, r3
 8004846:	2203      	movs	r2, #3
 8004848:	701a      	strb	r2, [r3, #0]
        break;
 800484a:	e005      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800484c:	4b30      	ldr	r3, [pc, #192]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	2380      	movs	r3, #128	; 0x80
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	4013      	ands	r3, r2
 8004856:	d0ed      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004858:	2313      	movs	r3, #19
 800485a:	18fb      	adds	r3, r7, r3
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d15e      	bne.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004862:	4b2a      	ldr	r3, [pc, #168]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004864:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004866:	23c0      	movs	r3, #192	; 0xc0
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4013      	ands	r3, r2
 800486c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d019      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	429a      	cmp	r2, r3
 800487c:	d014      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800487e:	4b23      	ldr	r3, [pc, #140]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004882:	4a24      	ldr	r2, [pc, #144]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004884:	4013      	ands	r3, r2
 8004886:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004888:	4b20      	ldr	r3, [pc, #128]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800488a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800488c:	4b1f      	ldr	r3, [pc, #124]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800488e:	2180      	movs	r1, #128	; 0x80
 8004890:	0249      	lsls	r1, r1, #9
 8004892:	430a      	orrs	r2, r1
 8004894:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004896:	4b1d      	ldr	r3, [pc, #116]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004898:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800489a:	4b1c      	ldr	r3, [pc, #112]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800489c:	491e      	ldr	r1, [pc, #120]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800489e:	400a      	ands	r2, r1
 80048a0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048a2:	4b1a      	ldr	r3, [pc, #104]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2201      	movs	r2, #1
 80048ac:	4013      	ands	r3, r2
 80048ae:	d016      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b0:	f7fd fd98 	bl	80023e4 <HAL_GetTick>
 80048b4:	0003      	movs	r3, r0
 80048b6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048b8:	e00c      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ba:	f7fd fd93 	bl	80023e4 <HAL_GetTick>
 80048be:	0002      	movs	r2, r0
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	4a15      	ldr	r2, [pc, #84]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d904      	bls.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80048ca:	2313      	movs	r3, #19
 80048cc:	18fb      	adds	r3, r7, r3
 80048ce:	2203      	movs	r2, #3
 80048d0:	701a      	strb	r2, [r3, #0]
            break;
 80048d2:	e004      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048d4:	4b0d      	ldr	r3, [pc, #52]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80048d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d8:	2202      	movs	r2, #2
 80048da:	4013      	ands	r3, r2
 80048dc:	d0ed      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80048de:	2313      	movs	r3, #19
 80048e0:	18fb      	adds	r3, r7, r3
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10a      	bne.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048e8:	4b08      	ldr	r3, [pc, #32]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80048ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ec:	4a09      	ldr	r2, [pc, #36]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80048ee:	4013      	ands	r3, r2
 80048f0:	0019      	movs	r1, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048f6:	4b05      	ldr	r3, [pc, #20]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80048f8:	430a      	orrs	r2, r1
 80048fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80048fc:	e016      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048fe:	2312      	movs	r3, #18
 8004900:	18fb      	adds	r3, r7, r3
 8004902:	2213      	movs	r2, #19
 8004904:	18ba      	adds	r2, r7, r2
 8004906:	7812      	ldrb	r2, [r2, #0]
 8004908:	701a      	strb	r2, [r3, #0]
 800490a:	e00f      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800490c:	40021000 	.word	0x40021000
 8004910:	40007000 	.word	0x40007000
 8004914:	fffffcff 	.word	0xfffffcff
 8004918:	fffeffff 	.word	0xfffeffff
 800491c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004920:	2312      	movs	r3, #18
 8004922:	18fb      	adds	r3, r7, r3
 8004924:	2213      	movs	r2, #19
 8004926:	18ba      	adds	r2, r7, r2
 8004928:	7812      	ldrb	r2, [r2, #0]
 800492a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800492c:	2311      	movs	r3, #17
 800492e:	18fb      	adds	r3, r7, r3
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d105      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004936:	4bb6      	ldr	r3, [pc, #728]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004938:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800493a:	4bb5      	ldr	r3, [pc, #724]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800493c:	49b5      	ldr	r1, [pc, #724]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800493e:	400a      	ands	r2, r1
 8004940:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2201      	movs	r2, #1
 8004948:	4013      	ands	r3, r2
 800494a:	d009      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800494c:	4bb0      	ldr	r3, [pc, #704]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800494e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004950:	2203      	movs	r2, #3
 8004952:	4393      	bics	r3, r2
 8004954:	0019      	movs	r1, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	4bad      	ldr	r3, [pc, #692]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800495c:	430a      	orrs	r2, r1
 800495e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2202      	movs	r2, #2
 8004966:	4013      	ands	r3, r2
 8004968:	d009      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800496a:	4ba9      	ldr	r3, [pc, #676]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800496c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496e:	220c      	movs	r2, #12
 8004970:	4393      	bics	r3, r2
 8004972:	0019      	movs	r1, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	4ba5      	ldr	r3, [pc, #660]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800497a:	430a      	orrs	r2, r1
 800497c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2204      	movs	r2, #4
 8004984:	4013      	ands	r3, r2
 8004986:	d009      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004988:	4ba1      	ldr	r3, [pc, #644]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800498a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498c:	2230      	movs	r2, #48	; 0x30
 800498e:	4393      	bics	r3, r2
 8004990:	0019      	movs	r1, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	4b9e      	ldr	r3, [pc, #632]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004998:	430a      	orrs	r2, r1
 800499a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2210      	movs	r2, #16
 80049a2:	4013      	ands	r3, r2
 80049a4:	d009      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049a6:	4b9a      	ldr	r3, [pc, #616]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049aa:	4a9b      	ldr	r2, [pc, #620]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	0019      	movs	r1, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	4b96      	ldr	r3, [pc, #600]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049b6:	430a      	orrs	r2, r1
 80049b8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	2380      	movs	r3, #128	; 0x80
 80049c0:	015b      	lsls	r3, r3, #5
 80049c2:	4013      	ands	r3, r2
 80049c4:	d009      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80049c6:	4b92      	ldr	r3, [pc, #584]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ca:	4a94      	ldr	r2, [pc, #592]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	0019      	movs	r1, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	695a      	ldr	r2, [r3, #20]
 80049d4:	4b8e      	ldr	r3, [pc, #568]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049d6:	430a      	orrs	r2, r1
 80049d8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	2380      	movs	r3, #128	; 0x80
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4013      	ands	r3, r2
 80049e4:	d009      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049e6:	4b8a      	ldr	r3, [pc, #552]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ea:	4a8d      	ldr	r2, [pc, #564]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	0019      	movs	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049f4:	4b86      	ldr	r3, [pc, #536]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049f6:	430a      	orrs	r2, r1
 80049f8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	2380      	movs	r3, #128	; 0x80
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	4013      	ands	r3, r2
 8004a04:	d009      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a06:	4b82      	ldr	r3, [pc, #520]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0a:	4a86      	ldr	r2, [pc, #536]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	0019      	movs	r1, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a14:	4b7e      	ldr	r3, [pc, #504]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a16:	430a      	orrs	r2, r1
 8004a18:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	4013      	ands	r3, r2
 8004a22:	d009      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a24:	4b7a      	ldr	r3, [pc, #488]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a28:	4a7f      	ldr	r2, [pc, #508]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	0019      	movs	r1, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	4b77      	ldr	r3, [pc, #476]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a34:	430a      	orrs	r2, r1
 8004a36:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2240      	movs	r2, #64	; 0x40
 8004a3e:	4013      	ands	r3, r2
 8004a40:	d009      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a42:	4b73      	ldr	r3, [pc, #460]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a46:	4a79      	ldr	r2, [pc, #484]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	0019      	movs	r1, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	69da      	ldr	r2, [r3, #28]
 8004a50:	4b6f      	ldr	r3, [pc, #444]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a52:	430a      	orrs	r2, r1
 8004a54:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	2380      	movs	r3, #128	; 0x80
 8004a5c:	01db      	lsls	r3, r3, #7
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d015      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a62:	4b6b      	ldr	r3, [pc, #428]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	0899      	lsrs	r1, r3, #2
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a6e:	4b68      	ldr	r3, [pc, #416]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a70:	430a      	orrs	r2, r1
 8004a72:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a78:	2380      	movs	r3, #128	; 0x80
 8004a7a:	05db      	lsls	r3, r3, #23
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d106      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004a80:	4b63      	ldr	r3, [pc, #396]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	4b62      	ldr	r3, [pc, #392]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a86:	2180      	movs	r1, #128	; 0x80
 8004a88:	0249      	lsls	r1, r1, #9
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	2380      	movs	r3, #128	; 0x80
 8004a94:	031b      	lsls	r3, r3, #12
 8004a96:	4013      	ands	r3, r2
 8004a98:	d009      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a9a:	4b5d      	ldr	r3, [pc, #372]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9e:	2240      	movs	r2, #64	; 0x40
 8004aa0:	4393      	bics	r3, r2
 8004aa2:	0019      	movs	r1, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aa8:	4b59      	ldr	r3, [pc, #356]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	2380      	movs	r3, #128	; 0x80
 8004ab4:	039b      	lsls	r3, r3, #14
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	d016      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004aba:	4b55      	ldr	r3, [pc, #340]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abe:	4a5c      	ldr	r2, [pc, #368]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	0019      	movs	r1, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ac8:	4b51      	ldr	r3, [pc, #324]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004aca:	430a      	orrs	r2, r1
 8004acc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ad2:	2380      	movs	r3, #128	; 0x80
 8004ad4:	03db      	lsls	r3, r3, #15
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d106      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004ada:	4b4d      	ldr	r3, [pc, #308]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004adc:	68da      	ldr	r2, [r3, #12]
 8004ade:	4b4c      	ldr	r3, [pc, #304]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ae0:	2180      	movs	r1, #128	; 0x80
 8004ae2:	0449      	lsls	r1, r1, #17
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	2380      	movs	r3, #128	; 0x80
 8004aee:	03db      	lsls	r3, r3, #15
 8004af0:	4013      	ands	r3, r2
 8004af2:	d016      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004af4:	4b46      	ldr	r3, [pc, #280]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af8:	4a4e      	ldr	r2, [pc, #312]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004afa:	4013      	ands	r3, r2
 8004afc:	0019      	movs	r1, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b02:	4b43      	ldr	r3, [pc, #268]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b04:	430a      	orrs	r2, r1
 8004b06:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b0c:	2380      	movs	r3, #128	; 0x80
 8004b0e:	045b      	lsls	r3, r3, #17
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d106      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004b14:	4b3e      	ldr	r3, [pc, #248]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	4b3d      	ldr	r3, [pc, #244]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b1a:	2180      	movs	r1, #128	; 0x80
 8004b1c:	0449      	lsls	r1, r1, #17
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	2380      	movs	r3, #128	; 0x80
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d014      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004b2e:	4b38      	ldr	r3, [pc, #224]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b32:	2203      	movs	r2, #3
 8004b34:	4393      	bics	r3, r2
 8004b36:	0019      	movs	r1, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a1a      	ldr	r2, [r3, #32]
 8004b3c:	4b34      	ldr	r3, [pc, #208]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d106      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004b4a:	4b31      	ldr	r3, [pc, #196]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	4b30      	ldr	r3, [pc, #192]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b50:	2180      	movs	r1, #128	; 0x80
 8004b52:	0249      	lsls	r1, r1, #9
 8004b54:	430a      	orrs	r2, r1
 8004b56:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	2380      	movs	r3, #128	; 0x80
 8004b5e:	019b      	lsls	r3, r3, #6
 8004b60:	4013      	ands	r3, r2
 8004b62:	d014      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004b64:	4b2a      	ldr	r3, [pc, #168]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b68:	220c      	movs	r2, #12
 8004b6a:	4393      	bics	r3, r2
 8004b6c:	0019      	movs	r1, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b72:	4b27      	ldr	r3, [pc, #156]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b74:	430a      	orrs	r2, r1
 8004b76:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d106      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004b80:	4b23      	ldr	r3, [pc, #140]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	4b22      	ldr	r3, [pc, #136]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b86:	2180      	movs	r1, #128	; 0x80
 8004b88:	0249      	lsls	r1, r1, #9
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	2380      	movs	r3, #128	; 0x80
 8004b94:	045b      	lsls	r3, r3, #17
 8004b96:	4013      	ands	r3, r2
 8004b98:	d016      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b9a:	4b1d      	ldr	r3, [pc, #116]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9e:	4a22      	ldr	r2, [pc, #136]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	0019      	movs	r1, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ba8:	4b19      	ldr	r3, [pc, #100]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004baa:	430a      	orrs	r2, r1
 8004bac:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bb2:	2380      	movs	r3, #128	; 0x80
 8004bb4:	019b      	lsls	r3, r3, #6
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d106      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004bba:	4b15      	ldr	r3, [pc, #84]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bbc:	68da      	ldr	r2, [r3, #12]
 8004bbe:	4b14      	ldr	r3, [pc, #80]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bc0:	2180      	movs	r1, #128	; 0x80
 8004bc2:	0449      	lsls	r1, r1, #17
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	2380      	movs	r3, #128	; 0x80
 8004bce:	049b      	lsls	r3, r3, #18
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	d016      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bd4:	4b0e      	ldr	r3, [pc, #56]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd8:	4a10      	ldr	r2, [pc, #64]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004bda:	4013      	ands	r3, r2
 8004bdc:	0019      	movs	r1, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004be2:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004be4:	430a      	orrs	r2, r1
 8004be6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bec:	2380      	movs	r3, #128	; 0x80
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d106      	bne.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004bf4:	4b06      	ldr	r3, [pc, #24]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bf6:	68da      	ldr	r2, [r3, #12]
 8004bf8:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bfa:	2180      	movs	r1, #128	; 0x80
 8004bfc:	0449      	lsls	r1, r1, #17
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004c02:	2312      	movs	r3, #18
 8004c04:	18fb      	adds	r3, r7, r3
 8004c06:	781b      	ldrb	r3, [r3, #0]
}
 8004c08:	0018      	movs	r0, r3
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	b006      	add	sp, #24
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40021000 	.word	0x40021000
 8004c14:	efffffff 	.word	0xefffffff
 8004c18:	fffff3ff 	.word	0xfffff3ff
 8004c1c:	fffffcff 	.word	0xfffffcff
 8004c20:	fff3ffff 	.word	0xfff3ffff
 8004c24:	ffcfffff 	.word	0xffcfffff
 8004c28:	ffffcfff 	.word	0xffffcfff
 8004c2c:	ffff3fff 	.word	0xffff3fff
 8004c30:	ffbfffff 	.word	0xffbfffff
 8004c34:	feffffff 	.word	0xfeffffff

08004c38 <__libc_init_array>:
 8004c38:	b570      	push	{r4, r5, r6, lr}
 8004c3a:	2600      	movs	r6, #0
 8004c3c:	4d0c      	ldr	r5, [pc, #48]	; (8004c70 <__libc_init_array+0x38>)
 8004c3e:	4c0d      	ldr	r4, [pc, #52]	; (8004c74 <__libc_init_array+0x3c>)
 8004c40:	1b64      	subs	r4, r4, r5
 8004c42:	10a4      	asrs	r4, r4, #2
 8004c44:	42a6      	cmp	r6, r4
 8004c46:	d109      	bne.n	8004c5c <__libc_init_array+0x24>
 8004c48:	2600      	movs	r6, #0
 8004c4a:	f000 f821 	bl	8004c90 <_init>
 8004c4e:	4d0a      	ldr	r5, [pc, #40]	; (8004c78 <__libc_init_array+0x40>)
 8004c50:	4c0a      	ldr	r4, [pc, #40]	; (8004c7c <__libc_init_array+0x44>)
 8004c52:	1b64      	subs	r4, r4, r5
 8004c54:	10a4      	asrs	r4, r4, #2
 8004c56:	42a6      	cmp	r6, r4
 8004c58:	d105      	bne.n	8004c66 <__libc_init_array+0x2e>
 8004c5a:	bd70      	pop	{r4, r5, r6, pc}
 8004c5c:	00b3      	lsls	r3, r6, #2
 8004c5e:	58eb      	ldr	r3, [r5, r3]
 8004c60:	4798      	blx	r3
 8004c62:	3601      	adds	r6, #1
 8004c64:	e7ee      	b.n	8004c44 <__libc_init_array+0xc>
 8004c66:	00b3      	lsls	r3, r6, #2
 8004c68:	58eb      	ldr	r3, [r5, r3]
 8004c6a:	4798      	blx	r3
 8004c6c:	3601      	adds	r6, #1
 8004c6e:	e7f2      	b.n	8004c56 <__libc_init_array+0x1e>
 8004c70:	08004da8 	.word	0x08004da8
 8004c74:	08004da8 	.word	0x08004da8
 8004c78:	08004da8 	.word	0x08004da8
 8004c7c:	08004dac 	.word	0x08004dac

08004c80 <memset>:
 8004c80:	0003      	movs	r3, r0
 8004c82:	1882      	adds	r2, r0, r2
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d100      	bne.n	8004c8a <memset+0xa>
 8004c88:	4770      	bx	lr
 8004c8a:	7019      	strb	r1, [r3, #0]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	e7f9      	b.n	8004c84 <memset+0x4>

08004c90 <_init>:
 8004c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c96:	bc08      	pop	{r3}
 8004c98:	469e      	mov	lr, r3
 8004c9a:	4770      	bx	lr

08004c9c <_fini>:
 8004c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca2:	bc08      	pop	{r3}
 8004ca4:	469e      	mov	lr, r3
 8004ca6:	4770      	bx	lr
