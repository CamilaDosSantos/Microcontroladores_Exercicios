
pablo_ensina.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002438  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080024f4  080024f4  000124f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002534  08002534  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002534  08002534  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002534  08002534  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002534  08002534  00012534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002538  08002538  00012538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800253c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08002548  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08002548  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e81  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000170b  00000000  00000000  00027eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  000295c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f0  00000000  00000000  00029d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019de7  00000000  00000000  0002a458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008413  00000000  00000000  0004423f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a77f3  00000000  00000000  0004c652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f3e45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019f4  00000000  00000000  000f3e98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080024dc 	.word	0x080024dc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080024dc 	.word	0x080024dc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <HAL_SPI_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
  void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
   //HAL_SPI_Receive_IT(&hspi1, &reck, 1);
      flag = 1;
 8000224:	4b04      	ldr	r3, [pc, #16]	; (8000238 <HAL_SPI_RxCpltCallback+0x1c>)
 8000226:	2201      	movs	r2, #1
 8000228:	701a      	strb	r2, [r3, #0]
	  delay_ms= 10;
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <HAL_SPI_RxCpltCallback+0x20>)
 800022c:	220a      	movs	r2, #10
 800022e:	801a      	strh	r2, [r3, #0]

  }
 8000230:	46c0      	nop			; (mov r8, r8)
 8000232:	46bd      	mov	sp, r7
 8000234:	b002      	add	sp, #8
 8000236:	bd80      	pop	{r7, pc}
 8000238:	20000028 	.word	0x20000028
 800023c:	2000002a 	.word	0x2000002a

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000244:	f000 f98a 	bl	800055c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000248:	f000 f81c 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024c:	f000 f89c 	bl	8000388 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000250:	f000 f860 	bl	8000314 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  flag = 1;
 8000254:	4b08      	ldr	r3, [pc, #32]	; (8000278 <main+0x38>)
 8000256:	2201      	movs	r2, #1
 8000258:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1){
	   if (flag){
 800025a:	4b07      	ldr	r3, [pc, #28]	; (8000278 <main+0x38>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d0fb      	beq.n	800025a <main+0x1a>
		   flag = 0;
 8000262:	4b05      	ldr	r3, [pc, #20]	; (8000278 <main+0x38>)
 8000264:	2200      	movs	r2, #0
 8000266:	701a      	strb	r2, [r3, #0]
		   HAL_SPI_Receive_IT(&hspi1, &reck, 1);
 8000268:	4904      	ldr	r1, [pc, #16]	; (800027c <main+0x3c>)
 800026a:	4b05      	ldr	r3, [pc, #20]	; (8000280 <main+0x40>)
 800026c:	2201      	movs	r2, #1
 800026e:	0018      	movs	r0, r3
 8000270:	f001 faaa 	bl	80017c8 <HAL_SPI_Receive_IT>
	   if (flag){
 8000274:	e7f1      	b.n	800025a <main+0x1a>
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	20000028 	.word	0x20000028
 800027c:	20000029 	.word	0x20000029
 8000280:	2000002c 	.word	0x2000002c

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b095      	sub	sp, #84	; 0x54
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	2414      	movs	r4, #20
 800028c:	193b      	adds	r3, r7, r4
 800028e:	0018      	movs	r0, r3
 8000290:	233c      	movs	r3, #60	; 0x3c
 8000292:	001a      	movs	r2, r3
 8000294:	2100      	movs	r1, #0
 8000296:	f002 f919 	bl	80024cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	0018      	movs	r0, r3
 800029e:	2310      	movs	r3, #16
 80002a0:	001a      	movs	r2, r3
 80002a2:	2100      	movs	r1, #0
 80002a4:	f002 f912 	bl	80024cc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fca3 	bl	8000bf8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b2:	193b      	adds	r3, r7, r4
 80002b4:	2202      	movs	r2, #2
 80002b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	2280      	movs	r2, #128	; 0x80
 80002bc:	0052      	lsls	r2, r2, #1
 80002be:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	2200      	movs	r2, #0
 80002c4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c6:	193b      	adds	r3, r7, r4
 80002c8:	2240      	movs	r2, #64	; 0x40
 80002ca:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	2200      	movs	r2, #0
 80002d0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 fccf 	bl	8000c78 <HAL_RCC_OscConfig>
 80002da:	1e03      	subs	r3, r0, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002de:	f000 f869 	bl	80003b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2207      	movs	r2, #7
 80002e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2100      	movs	r1, #0
 80002fe:	0018      	movs	r0, r3
 8000300:	f001 f820 	bl	8001344 <HAL_RCC_ClockConfig>
 8000304:	1e03      	subs	r3, r0, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000308:	f000 f854 	bl	80003b4 <Error_Handler>
  }
}
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	b015      	add	sp, #84	; 0x54
 8000312:	bd90      	pop	{r4, r7, pc}

08000314 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000318:	4b19      	ldr	r3, [pc, #100]	; (8000380 <MX_SPI1_Init+0x6c>)
 800031a:	4a1a      	ldr	r2, [pc, #104]	; (8000384 <MX_SPI1_Init+0x70>)
 800031c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800031e:	4b18      	ldr	r3, [pc, #96]	; (8000380 <MX_SPI1_Init+0x6c>)
 8000320:	2200      	movs	r2, #0
 8000322:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000324:	4b16      	ldr	r3, [pc, #88]	; (8000380 <MX_SPI1_Init+0x6c>)
 8000326:	2200      	movs	r2, #0
 8000328:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800032a:	4b15      	ldr	r3, [pc, #84]	; (8000380 <MX_SPI1_Init+0x6c>)
 800032c:	22e0      	movs	r2, #224	; 0xe0
 800032e:	00d2      	lsls	r2, r2, #3
 8000330:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000332:	4b13      	ldr	r3, [pc, #76]	; (8000380 <MX_SPI1_Init+0x6c>)
 8000334:	2200      	movs	r2, #0
 8000336:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <MX_SPI1_Init+0x6c>)
 800033a:	2200      	movs	r2, #0
 800033c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800033e:	4b10      	ldr	r3, [pc, #64]	; (8000380 <MX_SPI1_Init+0x6c>)
 8000340:	2200      	movs	r2, #0
 8000342:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <MX_SPI1_Init+0x6c>)
 8000346:	2200      	movs	r2, #0
 8000348:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800034a:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <MX_SPI1_Init+0x6c>)
 800034c:	2200      	movs	r2, #0
 800034e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <MX_SPI1_Init+0x6c>)
 8000352:	2200      	movs	r2, #0
 8000354:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000356:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <MX_SPI1_Init+0x6c>)
 8000358:	2207      	movs	r2, #7
 800035a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800035c:	4b08      	ldr	r3, [pc, #32]	; (8000380 <MX_SPI1_Init+0x6c>)
 800035e:	2200      	movs	r2, #0
 8000360:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000362:	4b07      	ldr	r3, [pc, #28]	; (8000380 <MX_SPI1_Init+0x6c>)
 8000364:	2200      	movs	r2, #0
 8000366:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <MX_SPI1_Init+0x6c>)
 800036a:	0018      	movs	r0, r3
 800036c:	f001 f974 	bl	8001658 <HAL_SPI_Init>
 8000370:	1e03      	subs	r3, r0, #0
 8000372:	d001      	beq.n	8000378 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000374:	f000 f81e 	bl	80003b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	2000002c 	.word	0x2000002c
 8000384:	40013000 	.word	0x40013000

08000388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <MX_GPIO_Init+0x28>)
 8000390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000392:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <MX_GPIO_Init+0x28>)
 8000394:	2101      	movs	r1, #1
 8000396:	430a      	orrs	r2, r1
 8000398:	635a      	str	r2, [r3, #52]	; 0x34
 800039a:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <MX_GPIO_Init+0x28>)
 800039c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800039e:	2201      	movs	r2, #1
 80003a0:	4013      	ands	r3, r2
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]

}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b002      	add	sp, #8
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	40021000 	.word	0x40021000

080003b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b8:	b672      	cpsid	i
}
 80003ba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003bc:	e7fe      	b.n	80003bc <Error_Handler+0x8>
	...

080003c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003c6:	4b11      	ldr	r3, [pc, #68]	; (800040c <HAL_MspInit+0x4c>)
 80003c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003ca:	4b10      	ldr	r3, [pc, #64]	; (800040c <HAL_MspInit+0x4c>)
 80003cc:	2101      	movs	r1, #1
 80003ce:	430a      	orrs	r2, r1
 80003d0:	641a      	str	r2, [r3, #64]	; 0x40
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <HAL_MspInit+0x4c>)
 80003d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003d6:	2201      	movs	r2, #1
 80003d8:	4013      	ands	r3, r2
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003de:	4b0b      	ldr	r3, [pc, #44]	; (800040c <HAL_MspInit+0x4c>)
 80003e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80003e2:	4b0a      	ldr	r3, [pc, #40]	; (800040c <HAL_MspInit+0x4c>)
 80003e4:	2180      	movs	r1, #128	; 0x80
 80003e6:	0549      	lsls	r1, r1, #21
 80003e8:	430a      	orrs	r2, r1
 80003ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80003ec:	4b07      	ldr	r3, [pc, #28]	; (800040c <HAL_MspInit+0x4c>)
 80003ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	055b      	lsls	r3, r3, #21
 80003f4:	4013      	ands	r3, r2
 80003f6:	603b      	str	r3, [r7, #0]
 80003f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80003fa:	23c0      	movs	r3, #192	; 0xc0
 80003fc:	00db      	lsls	r3, r3, #3
 80003fe:	0018      	movs	r0, r3
 8000400:	f000 f932 	bl	8000668 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40021000 	.word	0x40021000

08000410 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000410:	b590      	push	{r4, r7, lr}
 8000412:	b08b      	sub	sp, #44	; 0x2c
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000418:	2414      	movs	r4, #20
 800041a:	193b      	adds	r3, r7, r4
 800041c:	0018      	movs	r0, r3
 800041e:	2314      	movs	r3, #20
 8000420:	001a      	movs	r2, r3
 8000422:	2100      	movs	r1, #0
 8000424:	f002 f852 	bl	80024cc <memset>
  if(hspi->Instance==SPI1)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a1f      	ldr	r2, [pc, #124]	; (80004ac <HAL_SPI_MspInit+0x9c>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d138      	bne.n	80004a4 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000432:	4b1f      	ldr	r3, [pc, #124]	; (80004b0 <HAL_SPI_MspInit+0xa0>)
 8000434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000436:	4b1e      	ldr	r3, [pc, #120]	; (80004b0 <HAL_SPI_MspInit+0xa0>)
 8000438:	2180      	movs	r1, #128	; 0x80
 800043a:	0149      	lsls	r1, r1, #5
 800043c:	430a      	orrs	r2, r1
 800043e:	641a      	str	r2, [r3, #64]	; 0x40
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <HAL_SPI_MspInit+0xa0>)
 8000442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000444:	2380      	movs	r3, #128	; 0x80
 8000446:	015b      	lsls	r3, r3, #5
 8000448:	4013      	ands	r3, r2
 800044a:	613b      	str	r3, [r7, #16]
 800044c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800044e:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <HAL_SPI_MspInit+0xa0>)
 8000450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <HAL_SPI_MspInit+0xa0>)
 8000454:	2101      	movs	r1, #1
 8000456:	430a      	orrs	r2, r1
 8000458:	635a      	str	r2, [r3, #52]	; 0x34
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <HAL_SPI_MspInit+0xa0>)
 800045c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800045e:	2201      	movs	r2, #1
 8000460:	4013      	ands	r3, r2
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 8000466:	0021      	movs	r1, r4
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2256      	movs	r2, #86	; 0x56
 800046c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800046e:	187b      	adds	r3, r7, r1
 8000470:	2202      	movs	r2, #2
 8000472:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	187b      	adds	r3, r7, r1
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2200      	movs	r2, #0
 800047e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000486:	187a      	adds	r2, r7, r1
 8000488:	23a0      	movs	r3, #160	; 0xa0
 800048a:	05db      	lsls	r3, r3, #23
 800048c:	0011      	movs	r1, r2
 800048e:	0018      	movs	r0, r3
 8000490:	f000 fa46 	bl	8000920 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000494:	2200      	movs	r2, #0
 8000496:	2100      	movs	r1, #0
 8000498:	2019      	movs	r0, #25
 800049a:	f000 f9a7 	bl	80007ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800049e:	2019      	movs	r0, #25
 80004a0:	f000 f9b9 	bl	8000816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80004a4:	46c0      	nop			; (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	b00b      	add	sp, #44	; 0x2c
 80004aa:	bd90      	pop	{r4, r7, pc}
 80004ac:	40013000 	.word	0x40013000
 80004b0:	40021000 	.word	0x40021000

080004b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <NMI_Handler+0x4>

080004ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004be:	e7fe      	b.n	80004be <HardFault_Handler+0x4>

080004c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004c4:	46c0      	nop			; (mov r8, r8)
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}

080004ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ca:	b580      	push	{r7, lr}
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d8:	f000 f8aa 	bl	8000630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
	...

080004e4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1/I2S1 Interrupt.
  */
void SPI1_IRQHandler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80004e8:	4b03      	ldr	r3, [pc, #12]	; (80004f8 <SPI1_IRQHandler+0x14>)
 80004ea:	0018      	movs	r0, r3
 80004ec:	f001 fafa 	bl	8001ae4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	2000002c 	.word	0x2000002c

080004fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000500:	46c0      	nop			; (mov r8, r8)
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000508:	480d      	ldr	r0, [pc, #52]	; (8000540 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800050a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800050c:	f7ff fff6 	bl	80004fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000510:	480c      	ldr	r0, [pc, #48]	; (8000544 <LoopForever+0x6>)
  ldr r1, =_edata
 8000512:	490d      	ldr	r1, [pc, #52]	; (8000548 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000514:	4a0d      	ldr	r2, [pc, #52]	; (800054c <LoopForever+0xe>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000518:	e002      	b.n	8000520 <LoopCopyDataInit>

0800051a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800051c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051e:	3304      	adds	r3, #4

08000520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000524:	d3f9      	bcc.n	800051a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000526:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000528:	4c0a      	ldr	r4, [pc, #40]	; (8000554 <LoopForever+0x16>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800052c:	e001      	b.n	8000532 <LoopFillZerobss>

0800052e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000530:	3204      	adds	r2, #4

08000532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000534:	d3fb      	bcc.n	800052e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000536:	f001 ffa5 	bl	8002484 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800053a:	f7ff fe81 	bl	8000240 <main>

0800053e <LoopForever>:

LoopForever:
  b LoopForever
 800053e:	e7fe      	b.n	800053e <LoopForever>
  ldr   r0, =_estack
 8000540:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000548:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800054c:	0800253c 	.word	0x0800253c
  ldr r2, =_sbss
 8000550:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000554:	20000094 	.word	0x20000094

08000558 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000558:	e7fe      	b.n	8000558 <ADC1_COMP_IRQHandler>
	...

0800055c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000562:	1dfb      	adds	r3, r7, #7
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000568:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <HAL_Init+0x3c>)
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <HAL_Init+0x3c>)
 800056e:	2180      	movs	r1, #128	; 0x80
 8000570:	0049      	lsls	r1, r1, #1
 8000572:	430a      	orrs	r2, r1
 8000574:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000576:	2003      	movs	r0, #3
 8000578:	f000 f810 	bl	800059c <HAL_InitTick>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d003      	beq.n	8000588 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000580:	1dfb      	adds	r3, r7, #7
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
 8000586:	e001      	b.n	800058c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000588:	f7ff ff1a 	bl	80003c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800058c:	1dfb      	adds	r3, r7, #7
 800058e:	781b      	ldrb	r3, [r3, #0]
}
 8000590:	0018      	movs	r0, r3
 8000592:	46bd      	mov	sp, r7
 8000594:	b002      	add	sp, #8
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40022000 	.word	0x40022000

0800059c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005a4:	230f      	movs	r3, #15
 80005a6:	18fb      	adds	r3, r7, r3
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <HAL_InitTick+0x88>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d02b      	beq.n	800060c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80005b4:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <HAL_InitTick+0x8c>)
 80005b6:	681c      	ldr	r4, [r3, #0]
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <HAL_InitTick+0x88>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	0019      	movs	r1, r3
 80005be:	23fa      	movs	r3, #250	; 0xfa
 80005c0:	0098      	lsls	r0, r3, #2
 80005c2:	f7ff fd9f 	bl	8000104 <__udivsi3>
 80005c6:	0003      	movs	r3, r0
 80005c8:	0019      	movs	r1, r3
 80005ca:	0020      	movs	r0, r4
 80005cc:	f7ff fd9a 	bl	8000104 <__udivsi3>
 80005d0:	0003      	movs	r3, r0
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 f92f 	bl	8000836 <HAL_SYSTICK_Config>
 80005d8:	1e03      	subs	r3, r0, #0
 80005da:	d112      	bne.n	8000602 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d80a      	bhi.n	80005f8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e2:	6879      	ldr	r1, [r7, #4]
 80005e4:	2301      	movs	r3, #1
 80005e6:	425b      	negs	r3, r3
 80005e8:	2200      	movs	r2, #0
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 f8fe 	bl	80007ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005f0:	4b0e      	ldr	r3, [pc, #56]	; (800062c <HAL_InitTick+0x90>)
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	e00d      	b.n	8000614 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80005f8:	230f      	movs	r3, #15
 80005fa:	18fb      	adds	r3, r7, r3
 80005fc:	2201      	movs	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]
 8000600:	e008      	b.n	8000614 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000602:	230f      	movs	r3, #15
 8000604:	18fb      	adds	r3, r7, r3
 8000606:	2201      	movs	r2, #1
 8000608:	701a      	strb	r2, [r3, #0]
 800060a:	e003      	b.n	8000614 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800060c:	230f      	movs	r3, #15
 800060e:	18fb      	adds	r3, r7, r3
 8000610:	2201      	movs	r2, #1
 8000612:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000614:	230f      	movs	r3, #15
 8000616:	18fb      	adds	r3, r7, r3
 8000618:	781b      	ldrb	r3, [r3, #0]
}
 800061a:	0018      	movs	r0, r3
 800061c:	46bd      	mov	sp, r7
 800061e:	b005      	add	sp, #20
 8000620:	bd90      	pop	{r4, r7, pc}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	20000008 	.word	0x20000008
 8000628:	20000000 	.word	0x20000000
 800062c:	20000004 	.word	0x20000004

08000630 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <HAL_IncTick+0x1c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	001a      	movs	r2, r3
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <HAL_IncTick+0x20>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	18d2      	adds	r2, r2, r3
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <HAL_IncTick+0x20>)
 8000642:	601a      	str	r2, [r3, #0]
}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	20000008 	.word	0x20000008
 8000650:	20000090 	.word	0x20000090

08000654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  return uwTick;
 8000658:	4b02      	ldr	r3, [pc, #8]	; (8000664 <HAL_GetTick+0x10>)
 800065a:	681b      	ldr	r3, [r3, #0]
}
 800065c:	0018      	movs	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	20000090 	.word	0x20000090

08000668 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a06      	ldr	r2, [pc, #24]	; (8000690 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000676:	4013      	ands	r3, r2
 8000678:	0019      	movs	r1, r3
 800067a:	4b04      	ldr	r3, [pc, #16]	; (800068c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	430a      	orrs	r2, r1
 8000680:	601a      	str	r2, [r3, #0]
}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b002      	add	sp, #8
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	40010000 	.word	0x40010000
 8000690:	fffff9ff 	.word	0xfffff9ff

08000694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	0002      	movs	r2, r0
 800069c:	1dfb      	adds	r3, r7, #7
 800069e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006a0:	1dfb      	adds	r3, r7, #7
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b7f      	cmp	r3, #127	; 0x7f
 80006a6:	d809      	bhi.n	80006bc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a8:	1dfb      	adds	r3, r7, #7
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	001a      	movs	r2, r3
 80006ae:	231f      	movs	r3, #31
 80006b0:	401a      	ands	r2, r3
 80006b2:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <__NVIC_EnableIRQ+0x30>)
 80006b4:	2101      	movs	r1, #1
 80006b6:	4091      	lsls	r1, r2
 80006b8:	000a      	movs	r2, r1
 80006ba:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	b002      	add	sp, #8
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	e000e100 	.word	0xe000e100

080006c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	0002      	movs	r2, r0
 80006d0:	6039      	str	r1, [r7, #0]
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006d6:	1dfb      	adds	r3, r7, #7
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b7f      	cmp	r3, #127	; 0x7f
 80006dc:	d828      	bhi.n	8000730 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006de:	4a2f      	ldr	r2, [pc, #188]	; (800079c <__NVIC_SetPriority+0xd4>)
 80006e0:	1dfb      	adds	r3, r7, #7
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	b25b      	sxtb	r3, r3
 80006e6:	089b      	lsrs	r3, r3, #2
 80006e8:	33c0      	adds	r3, #192	; 0xc0
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	589b      	ldr	r3, [r3, r2]
 80006ee:	1dfa      	adds	r2, r7, #7
 80006f0:	7812      	ldrb	r2, [r2, #0]
 80006f2:	0011      	movs	r1, r2
 80006f4:	2203      	movs	r2, #3
 80006f6:	400a      	ands	r2, r1
 80006f8:	00d2      	lsls	r2, r2, #3
 80006fa:	21ff      	movs	r1, #255	; 0xff
 80006fc:	4091      	lsls	r1, r2
 80006fe:	000a      	movs	r2, r1
 8000700:	43d2      	mvns	r2, r2
 8000702:	401a      	ands	r2, r3
 8000704:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	019b      	lsls	r3, r3, #6
 800070a:	22ff      	movs	r2, #255	; 0xff
 800070c:	401a      	ands	r2, r3
 800070e:	1dfb      	adds	r3, r7, #7
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	0018      	movs	r0, r3
 8000714:	2303      	movs	r3, #3
 8000716:	4003      	ands	r3, r0
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800071c:	481f      	ldr	r0, [pc, #124]	; (800079c <__NVIC_SetPriority+0xd4>)
 800071e:	1dfb      	adds	r3, r7, #7
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	b25b      	sxtb	r3, r3
 8000724:	089b      	lsrs	r3, r3, #2
 8000726:	430a      	orrs	r2, r1
 8000728:	33c0      	adds	r3, #192	; 0xc0
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800072e:	e031      	b.n	8000794 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000730:	4a1b      	ldr	r2, [pc, #108]	; (80007a0 <__NVIC_SetPriority+0xd8>)
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	0019      	movs	r1, r3
 8000738:	230f      	movs	r3, #15
 800073a:	400b      	ands	r3, r1
 800073c:	3b08      	subs	r3, #8
 800073e:	089b      	lsrs	r3, r3, #2
 8000740:	3306      	adds	r3, #6
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	18d3      	adds	r3, r2, r3
 8000746:	3304      	adds	r3, #4
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	1dfa      	adds	r2, r7, #7
 800074c:	7812      	ldrb	r2, [r2, #0]
 800074e:	0011      	movs	r1, r2
 8000750:	2203      	movs	r2, #3
 8000752:	400a      	ands	r2, r1
 8000754:	00d2      	lsls	r2, r2, #3
 8000756:	21ff      	movs	r1, #255	; 0xff
 8000758:	4091      	lsls	r1, r2
 800075a:	000a      	movs	r2, r1
 800075c:	43d2      	mvns	r2, r2
 800075e:	401a      	ands	r2, r3
 8000760:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	019b      	lsls	r3, r3, #6
 8000766:	22ff      	movs	r2, #255	; 0xff
 8000768:	401a      	ands	r2, r3
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	0018      	movs	r0, r3
 8000770:	2303      	movs	r3, #3
 8000772:	4003      	ands	r3, r0
 8000774:	00db      	lsls	r3, r3, #3
 8000776:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000778:	4809      	ldr	r0, [pc, #36]	; (80007a0 <__NVIC_SetPriority+0xd8>)
 800077a:	1dfb      	adds	r3, r7, #7
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	001c      	movs	r4, r3
 8000780:	230f      	movs	r3, #15
 8000782:	4023      	ands	r3, r4
 8000784:	3b08      	subs	r3, #8
 8000786:	089b      	lsrs	r3, r3, #2
 8000788:	430a      	orrs	r2, r1
 800078a:	3306      	adds	r3, #6
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	18c3      	adds	r3, r0, r3
 8000790:	3304      	adds	r3, #4
 8000792:	601a      	str	r2, [r3, #0]
}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	b003      	add	sp, #12
 800079a:	bd90      	pop	{r4, r7, pc}
 800079c:	e000e100 	.word	0xe000e100
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	1e5a      	subs	r2, r3, #1
 80007b0:	2380      	movs	r3, #128	; 0x80
 80007b2:	045b      	lsls	r3, r3, #17
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d301      	bcc.n	80007bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007b8:	2301      	movs	r3, #1
 80007ba:	e010      	b.n	80007de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <SysTick_Config+0x44>)
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	3a01      	subs	r2, #1
 80007c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007c4:	2301      	movs	r3, #1
 80007c6:	425b      	negs	r3, r3
 80007c8:	2103      	movs	r1, #3
 80007ca:	0018      	movs	r0, r3
 80007cc:	f7ff ff7c 	bl	80006c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <SysTick_Config+0x44>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d6:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <SysTick_Config+0x44>)
 80007d8:	2207      	movs	r2, #7
 80007da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007dc:	2300      	movs	r3, #0
}
 80007de:	0018      	movs	r0, r3
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b002      	add	sp, #8
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	e000e010 	.word	0xe000e010

080007ec <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60b9      	str	r1, [r7, #8]
 80007f4:	607a      	str	r2, [r7, #4]
 80007f6:	210f      	movs	r1, #15
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	1c02      	adds	r2, r0, #0
 80007fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	187b      	adds	r3, r7, r1
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	b25b      	sxtb	r3, r3
 8000806:	0011      	movs	r1, r2
 8000808:	0018      	movs	r0, r3
 800080a:	f7ff ff5d 	bl	80006c8 <__NVIC_SetPriority>
}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b004      	add	sp, #16
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	0002      	movs	r2, r0
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	b25b      	sxtb	r3, r3
 8000828:	0018      	movs	r0, r3
 800082a:	f7ff ff33 	bl	8000694 <__NVIC_EnableIRQ>
}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	b002      	add	sp, #8
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	0018      	movs	r0, r3
 8000842:	f7ff ffaf 	bl	80007a4 <SysTick_Config>
 8000846:	0003      	movs	r3, r0
}
 8000848:	0018      	movs	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	b002      	add	sp, #8
 800084e:	bd80      	pop	{r7, pc}

08000850 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000858:	210f      	movs	r1, #15
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2225      	movs	r2, #37	; 0x25
 8000864:	5c9b      	ldrb	r3, [r3, r2]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	2b02      	cmp	r3, #2
 800086a:	d006      	beq.n	800087a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2204      	movs	r2, #4
 8000870:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2201      	movs	r2, #1
 8000876:	701a      	strb	r2, [r3, #0]
 8000878:	e048      	b.n	800090c <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	210e      	movs	r1, #14
 8000886:	438a      	bics	r2, r1
 8000888:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2101      	movs	r1, #1
 8000896:	438a      	bics	r2, r1
 8000898:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008a4:	491d      	ldr	r1, [pc, #116]	; (800091c <HAL_DMA_Abort_IT+0xcc>)
 80008a6:	400a      	ands	r2, r1
 80008a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	221c      	movs	r2, #28
 80008b0:	401a      	ands	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	2101      	movs	r1, #1
 80008b8:	4091      	lsls	r1, r2
 80008ba:	000a      	movs	r2, r1
 80008bc:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80008c6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d00c      	beq.n	80008ea <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008da:	4910      	ldr	r1, [pc, #64]	; (800091c <HAL_DMA_Abort_IT+0xcc>)
 80008dc:	400a      	ands	r2, r1
 80008de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80008e8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2225      	movs	r2, #37	; 0x25
 80008ee:	2101      	movs	r1, #1
 80008f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2224      	movs	r2, #36	; 0x24
 80008f6:	2100      	movs	r1, #0
 80008f8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d004      	beq.n	800090c <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	0010      	movs	r0, r2
 800090a:	4798      	blx	r3
    }
  }
  return status;
 800090c:	230f      	movs	r3, #15
 800090e:	18fb      	adds	r3, r7, r3
 8000910:	781b      	ldrb	r3, [r3, #0]
}
 8000912:	0018      	movs	r0, r3
 8000914:	46bd      	mov	sp, r7
 8000916:	b004      	add	sp, #16
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	fffffeff 	.word	0xfffffeff

08000920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800092e:	e14d      	b.n	8000bcc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2101      	movs	r1, #1
 8000936:	697a      	ldr	r2, [r7, #20]
 8000938:	4091      	lsls	r1, r2
 800093a:	000a      	movs	r2, r1
 800093c:	4013      	ands	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d100      	bne.n	8000948 <HAL_GPIO_Init+0x28>
 8000946:	e13e      	b.n	8000bc6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	2203      	movs	r2, #3
 800094e:	4013      	ands	r3, r2
 8000950:	2b01      	cmp	r3, #1
 8000952:	d005      	beq.n	8000960 <HAL_GPIO_Init+0x40>
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	2203      	movs	r2, #3
 800095a:	4013      	ands	r3, r2
 800095c:	2b02      	cmp	r3, #2
 800095e:	d130      	bne.n	80009c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	2203      	movs	r2, #3
 800096c:	409a      	lsls	r2, r3
 800096e:	0013      	movs	r3, r2
 8000970:	43da      	mvns	r2, r3
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	4013      	ands	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	68da      	ldr	r2, [r3, #12]
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	409a      	lsls	r2, r3
 8000982:	0013      	movs	r3, r2
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4313      	orrs	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000996:	2201      	movs	r2, #1
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	409a      	lsls	r2, r3
 800099c:	0013      	movs	r3, r2
 800099e:	43da      	mvns	r2, r3
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	4013      	ands	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	091b      	lsrs	r3, r3, #4
 80009ac:	2201      	movs	r2, #1
 80009ae:	401a      	ands	r2, r3
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	409a      	lsls	r2, r3
 80009b4:	0013      	movs	r3, r2
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	2203      	movs	r2, #3
 80009c8:	4013      	ands	r3, r2
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	d017      	beq.n	80009fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	2203      	movs	r2, #3
 80009da:	409a      	lsls	r2, r3
 80009dc:	0013      	movs	r3, r2
 80009de:	43da      	mvns	r2, r3
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	4013      	ands	r3, r2
 80009e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	689a      	ldr	r2, [r3, #8]
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	409a      	lsls	r2, r3
 80009f0:	0013      	movs	r3, r2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	2203      	movs	r2, #3
 8000a04:	4013      	ands	r3, r2
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d123      	bne.n	8000a52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	08da      	lsrs	r2, r3, #3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3208      	adds	r2, #8
 8000a12:	0092      	lsls	r2, r2, #2
 8000a14:	58d3      	ldr	r3, [r2, r3]
 8000a16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	2207      	movs	r2, #7
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	220f      	movs	r2, #15
 8000a22:	409a      	lsls	r2, r3
 8000a24:	0013      	movs	r3, r2
 8000a26:	43da      	mvns	r2, r3
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	691a      	ldr	r2, [r3, #16]
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	2107      	movs	r1, #7
 8000a36:	400b      	ands	r3, r1
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	409a      	lsls	r2, r3
 8000a3c:	0013      	movs	r3, r2
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	08da      	lsrs	r2, r3, #3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3208      	adds	r2, #8
 8000a4c:	0092      	lsls	r2, r2, #2
 8000a4e:	6939      	ldr	r1, [r7, #16]
 8000a50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	0013      	movs	r3, r2
 8000a62:	43da      	mvns	r2, r3
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	2203      	movs	r2, #3
 8000a70:	401a      	ands	r2, r3
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	409a      	lsls	r2, r3
 8000a78:	0013      	movs	r3, r2
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685a      	ldr	r2, [r3, #4]
 8000a8a:	23c0      	movs	r3, #192	; 0xc0
 8000a8c:	029b      	lsls	r3, r3, #10
 8000a8e:	4013      	ands	r3, r2
 8000a90:	d100      	bne.n	8000a94 <HAL_GPIO_Init+0x174>
 8000a92:	e098      	b.n	8000bc6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000a94:	4a53      	ldr	r2, [pc, #332]	; (8000be4 <HAL_GPIO_Init+0x2c4>)
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	089b      	lsrs	r3, r3, #2
 8000a9a:	3318      	adds	r3, #24
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	589b      	ldr	r3, [r3, r2]
 8000aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	220f      	movs	r2, #15
 8000aac:	409a      	lsls	r2, r3
 8000aae:	0013      	movs	r3, r2
 8000ab0:	43da      	mvns	r2, r3
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	23a0      	movs	r3, #160	; 0xa0
 8000abc:	05db      	lsls	r3, r3, #23
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d019      	beq.n	8000af6 <HAL_GPIO_Init+0x1d6>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a48      	ldr	r2, [pc, #288]	; (8000be8 <HAL_GPIO_Init+0x2c8>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d013      	beq.n	8000af2 <HAL_GPIO_Init+0x1d2>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a47      	ldr	r2, [pc, #284]	; (8000bec <HAL_GPIO_Init+0x2cc>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d00d      	beq.n	8000aee <HAL_GPIO_Init+0x1ce>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a46      	ldr	r2, [pc, #280]	; (8000bf0 <HAL_GPIO_Init+0x2d0>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d007      	beq.n	8000aea <HAL_GPIO_Init+0x1ca>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a45      	ldr	r2, [pc, #276]	; (8000bf4 <HAL_GPIO_Init+0x2d4>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d101      	bne.n	8000ae6 <HAL_GPIO_Init+0x1c6>
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	e008      	b.n	8000af8 <HAL_GPIO_Init+0x1d8>
 8000ae6:	2305      	movs	r3, #5
 8000ae8:	e006      	b.n	8000af8 <HAL_GPIO_Init+0x1d8>
 8000aea:	2303      	movs	r3, #3
 8000aec:	e004      	b.n	8000af8 <HAL_GPIO_Init+0x1d8>
 8000aee:	2302      	movs	r3, #2
 8000af0:	e002      	b.n	8000af8 <HAL_GPIO_Init+0x1d8>
 8000af2:	2301      	movs	r3, #1
 8000af4:	e000      	b.n	8000af8 <HAL_GPIO_Init+0x1d8>
 8000af6:	2300      	movs	r3, #0
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	2103      	movs	r1, #3
 8000afc:	400a      	ands	r2, r1
 8000afe:	00d2      	lsls	r2, r2, #3
 8000b00:	4093      	lsls	r3, r2
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000b08:	4936      	ldr	r1, [pc, #216]	; (8000be4 <HAL_GPIO_Init+0x2c4>)
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	089b      	lsrs	r3, r3, #2
 8000b0e:	3318      	adds	r3, #24
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b16:	4a33      	ldr	r2, [pc, #204]	; (8000be4 <HAL_GPIO_Init+0x2c4>)
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	58d3      	ldr	r3, [r2, r3]
 8000b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	43da      	mvns	r2, r3
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	025b      	lsls	r3, r3, #9
 8000b30:	4013      	ands	r3, r2
 8000b32:	d003      	beq.n	8000b3c <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b3c:	4929      	ldr	r1, [pc, #164]	; (8000be4 <HAL_GPIO_Init+0x2c4>)
 8000b3e:	2280      	movs	r2, #128	; 0x80
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000b44:	4a27      	ldr	r2, [pc, #156]	; (8000be4 <HAL_GPIO_Init+0x2c4>)
 8000b46:	2384      	movs	r3, #132	; 0x84
 8000b48:	58d3      	ldr	r3, [r2, r3]
 8000b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	43da      	mvns	r2, r3
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685a      	ldr	r2, [r3, #4]
 8000b5a:	2380      	movs	r3, #128	; 0x80
 8000b5c:	029b      	lsls	r3, r3, #10
 8000b5e:	4013      	ands	r3, r2
 8000b60:	d003      	beq.n	8000b6a <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b6a:	491e      	ldr	r1, [pc, #120]	; (8000be4 <HAL_GPIO_Init+0x2c4>)
 8000b6c:	2284      	movs	r2, #132	; 0x84
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b72:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <HAL_GPIO_Init+0x2c4>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685a      	ldr	r2, [r3, #4]
 8000b86:	2380      	movs	r3, #128	; 0x80
 8000b88:	035b      	lsls	r3, r3, #13
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <HAL_GPIO_Init+0x2c4>)
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <HAL_GPIO_Init+0x2c4>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	43da      	mvns	r2, r3
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685a      	ldr	r2, [r3, #4]
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	039b      	lsls	r3, r3, #14
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	d003      	beq.n	8000bc0 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_GPIO_Init+0x2c4>)
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	40da      	lsrs	r2, r3
 8000bd4:	1e13      	subs	r3, r2, #0
 8000bd6:	d000      	beq.n	8000bda <HAL_GPIO_Init+0x2ba>
 8000bd8:	e6aa      	b.n	8000930 <HAL_GPIO_Init+0x10>
  }
}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b006      	add	sp, #24
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40021800 	.word	0x40021800
 8000be8:	50000400 	.word	0x50000400
 8000bec:	50000800 	.word	0x50000800
 8000bf0:	50000c00 	.word	0x50000c00
 8000bf4:	50001000 	.word	0x50001000

08000bf8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000c00:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a19      	ldr	r2, [pc, #100]	; (8000c6c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000c06:	4013      	ands	r3, r2
 8000c08:	0019      	movs	r1, r3
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d11f      	bne.n	8000c5c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	0013      	movs	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	189b      	adds	r3, r3, r2
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	4912      	ldr	r1, [pc, #72]	; (8000c74 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff fa6a 	bl	8000104 <__udivsi3>
 8000c30:	0003      	movs	r3, r0
 8000c32:	3301      	adds	r3, #1
 8000c34:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c36:	e008      	b.n	8000c4a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d003      	beq.n	8000c46 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	e001      	b.n	8000c4a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000c46:	2303      	movs	r3, #3
 8000c48:	e009      	b.n	8000c5e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c4a:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c4c:	695a      	ldr	r2, [r3, #20]
 8000c4e:	2380      	movs	r3, #128	; 0x80
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	401a      	ands	r2, r3
 8000c54:	2380      	movs	r3, #128	; 0x80
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d0ed      	beq.n	8000c38 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	0018      	movs	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b004      	add	sp, #16
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	40007000 	.word	0x40007000
 8000c6c:	fffff9ff 	.word	0xfffff9ff
 8000c70:	20000000 	.word	0x20000000
 8000c74:	000f4240 	.word	0x000f4240

08000c78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d102      	bne.n	8000c8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	f000 fb56 	bl	8001338 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2201      	movs	r2, #1
 8000c92:	4013      	ands	r3, r2
 8000c94:	d100      	bne.n	8000c98 <HAL_RCC_OscConfig+0x20>
 8000c96:	e07d      	b.n	8000d94 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c98:	4bc3      	ldr	r3, [pc, #780]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	2238      	movs	r2, #56	; 0x38
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ca2:	4bc1      	ldr	r3, [pc, #772]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	4013      	ands	r3, r2
 8000caa:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	2b10      	cmp	r3, #16
 8000cb0:	d102      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x40>
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	2b03      	cmp	r3, #3
 8000cb6:	d002      	beq.n	8000cbe <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	2b08      	cmp	r3, #8
 8000cbc:	d10c      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cbe:	4bba      	ldr	r3, [pc, #744]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	2380      	movs	r3, #128	; 0x80
 8000cc4:	029b      	lsls	r3, r3, #10
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	d063      	beq.n	8000d92 <HAL_RCC_OscConfig+0x11a>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d15f      	bne.n	8000d92 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	f000 fb30 	bl	8001338 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	2380      	movs	r3, #128	; 0x80
 8000cde:	025b      	lsls	r3, r3, #9
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d107      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x7c>
 8000ce4:	4bb0      	ldr	r3, [pc, #704]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4baf      	ldr	r3, [pc, #700]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000cea:	2180      	movs	r1, #128	; 0x80
 8000cec:	0249      	lsls	r1, r1, #9
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	e020      	b.n	8000d36 <HAL_RCC_OscConfig+0xbe>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	23a0      	movs	r3, #160	; 0xa0
 8000cfa:	02db      	lsls	r3, r3, #11
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d10e      	bne.n	8000d1e <HAL_RCC_OscConfig+0xa6>
 8000d00:	4ba9      	ldr	r3, [pc, #676]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4ba8      	ldr	r3, [pc, #672]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000d06:	2180      	movs	r1, #128	; 0x80
 8000d08:	02c9      	lsls	r1, r1, #11
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	4ba6      	ldr	r3, [pc, #664]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	4ba5      	ldr	r3, [pc, #660]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000d14:	2180      	movs	r1, #128	; 0x80
 8000d16:	0249      	lsls	r1, r1, #9
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	e00b      	b.n	8000d36 <HAL_RCC_OscConfig+0xbe>
 8000d1e:	4ba2      	ldr	r3, [pc, #648]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	4ba1      	ldr	r3, [pc, #644]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000d24:	49a1      	ldr	r1, [pc, #644]	; (8000fac <HAL_RCC_OscConfig+0x334>)
 8000d26:	400a      	ands	r2, r1
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	4b9f      	ldr	r3, [pc, #636]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	4b9e      	ldr	r3, [pc, #632]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000d30:	499f      	ldr	r1, [pc, #636]	; (8000fb0 <HAL_RCC_OscConfig+0x338>)
 8000d32:	400a      	ands	r2, r1
 8000d34:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d014      	beq.n	8000d68 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d3e:	f7ff fc89 	bl	8000654 <HAL_GetTick>
 8000d42:	0003      	movs	r3, r0
 8000d44:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d46:	e008      	b.n	8000d5a <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d48:	f7ff fc84 	bl	8000654 <HAL_GetTick>
 8000d4c:	0002      	movs	r2, r0
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	2b64      	cmp	r3, #100	; 0x64
 8000d54:	d901      	bls.n	8000d5a <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8000d56:	2303      	movs	r3, #3
 8000d58:	e2ee      	b.n	8001338 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d5a:	4b93      	ldr	r3, [pc, #588]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	029b      	lsls	r3, r3, #10
 8000d62:	4013      	ands	r3, r2
 8000d64:	d0f0      	beq.n	8000d48 <HAL_RCC_OscConfig+0xd0>
 8000d66:	e015      	b.n	8000d94 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d68:	f7ff fc74 	bl	8000654 <HAL_GetTick>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d70:	e008      	b.n	8000d84 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d72:	f7ff fc6f 	bl	8000654 <HAL_GetTick>
 8000d76:	0002      	movs	r2, r0
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	2b64      	cmp	r3, #100	; 0x64
 8000d7e:	d901      	bls.n	8000d84 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8000d80:	2303      	movs	r3, #3
 8000d82:	e2d9      	b.n	8001338 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d84:	4b88      	ldr	r3, [pc, #544]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	029b      	lsls	r3, r3, #10
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	d1f0      	bne.n	8000d72 <HAL_RCC_OscConfig+0xfa>
 8000d90:	e000      	b.n	8000d94 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d92:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2202      	movs	r2, #2
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	d100      	bne.n	8000da0 <HAL_RCC_OscConfig+0x128>
 8000d9e:	e099      	b.n	8000ed4 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000da0:	4b81      	ldr	r3, [pc, #516]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	2238      	movs	r2, #56	; 0x38
 8000da6:	4013      	ands	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000daa:	4b7f      	ldr	r3, [pc, #508]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	2203      	movs	r2, #3
 8000db0:	4013      	ands	r3, r2
 8000db2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	2b10      	cmp	r3, #16
 8000db8:	d102      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x148>
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d002      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d135      	bne.n	8000e32 <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000dc6:	4b78      	ldr	r3, [pc, #480]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	4013      	ands	r3, r2
 8000dd0:	d005      	beq.n	8000dde <HAL_RCC_OscConfig+0x166>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d101      	bne.n	8000dde <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e2ac      	b.n	8001338 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dde:	4b72      	ldr	r3, [pc, #456]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	4a74      	ldr	r2, [pc, #464]	; (8000fb4 <HAL_RCC_OscConfig+0x33c>)
 8000de4:	4013      	ands	r3, r2
 8000de6:	0019      	movs	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	021a      	lsls	r2, r3, #8
 8000dee:	4b6e      	ldr	r3, [pc, #440]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000df0:	430a      	orrs	r2, r1
 8000df2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d112      	bne.n	8000e20 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000dfa:	4b6b      	ldr	r3, [pc, #428]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a6e      	ldr	r2, [pc, #440]	; (8000fb8 <HAL_RCC_OscConfig+0x340>)
 8000e00:	4013      	ands	r3, r2
 8000e02:	0019      	movs	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	691a      	ldr	r2, [r3, #16]
 8000e08:	4b67      	ldr	r3, [pc, #412]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000e0e:	4b66      	ldr	r3, [pc, #408]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	0adb      	lsrs	r3, r3, #11
 8000e14:	2207      	movs	r2, #7
 8000e16:	4013      	ands	r3, r2
 8000e18:	4a68      	ldr	r2, [pc, #416]	; (8000fbc <HAL_RCC_OscConfig+0x344>)
 8000e1a:	40da      	lsrs	r2, r3
 8000e1c:	4b68      	ldr	r3, [pc, #416]	; (8000fc0 <HAL_RCC_OscConfig+0x348>)
 8000e1e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e20:	4b68      	ldr	r3, [pc, #416]	; (8000fc4 <HAL_RCC_OscConfig+0x34c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	0018      	movs	r0, r3
 8000e26:	f7ff fbb9 	bl	800059c <HAL_InitTick>
 8000e2a:	1e03      	subs	r3, r0, #0
 8000e2c:	d051      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e282      	b.n	8001338 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d030      	beq.n	8000e9c <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e3a:	4b5b      	ldr	r3, [pc, #364]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a5e      	ldr	r2, [pc, #376]	; (8000fb8 <HAL_RCC_OscConfig+0x340>)
 8000e40:	4013      	ands	r3, r2
 8000e42:	0019      	movs	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	691a      	ldr	r2, [r3, #16]
 8000e48:	4b57      	ldr	r3, [pc, #348]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000e4e:	4b56      	ldr	r3, [pc, #344]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	4b55      	ldr	r3, [pc, #340]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000e54:	2180      	movs	r1, #128	; 0x80
 8000e56:	0049      	lsls	r1, r1, #1
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fbfa 	bl	8000654 <HAL_GetTick>
 8000e60:	0003      	movs	r3, r0
 8000e62:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e64:	e008      	b.n	8000e78 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e66:	f7ff fbf5 	bl	8000654 <HAL_GetTick>
 8000e6a:	0002      	movs	r2, r0
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e25f      	b.n	8001338 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e78:	4b4b      	ldr	r3, [pc, #300]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	4013      	ands	r3, r2
 8000e82:	d0f0      	beq.n	8000e66 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e84:	4b48      	ldr	r3, [pc, #288]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	4a4a      	ldr	r2, [pc, #296]	; (8000fb4 <HAL_RCC_OscConfig+0x33c>)
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	0019      	movs	r1, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	021a      	lsls	r2, r3, #8
 8000e94:	4b44      	ldr	r3, [pc, #272]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000e96:	430a      	orrs	r2, r1
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	e01b      	b.n	8000ed4 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000e9c:	4b42      	ldr	r3, [pc, #264]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b41      	ldr	r3, [pc, #260]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000ea2:	4949      	ldr	r1, [pc, #292]	; (8000fc8 <HAL_RCC_OscConfig+0x350>)
 8000ea4:	400a      	ands	r2, r1
 8000ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ea8:	f7ff fbd4 	bl	8000654 <HAL_GetTick>
 8000eac:	0003      	movs	r3, r0
 8000eae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000eb0:	e008      	b.n	8000ec4 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb2:	f7ff fbcf 	bl	8000654 <HAL_GetTick>
 8000eb6:	0002      	movs	r2, r0
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e239      	b.n	8001338 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ec4:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	00db      	lsls	r3, r3, #3
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d1f0      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x23a>
 8000ed0:	e000      	b.n	8000ed4 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ed2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2208      	movs	r2, #8
 8000eda:	4013      	ands	r3, r2
 8000edc:	d047      	beq.n	8000f6e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000ede:	4b32      	ldr	r3, [pc, #200]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	2238      	movs	r2, #56	; 0x38
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	2b18      	cmp	r3, #24
 8000ee8:	d10a      	bne.n	8000f00 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000eea:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eee:	2202      	movs	r2, #2
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d03c      	beq.n	8000f6e <HAL_RCC_OscConfig+0x2f6>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d138      	bne.n	8000f6e <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e21b      	b.n	8001338 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d019      	beq.n	8000f3c <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000f08:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000f0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f0c:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000f0e:	2101      	movs	r1, #1
 8000f10:	430a      	orrs	r2, r1
 8000f12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f14:	f7ff fb9e 	bl	8000654 <HAL_GetTick>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f1c:	e008      	b.n	8000f30 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f1e:	f7ff fb99 	bl	8000654 <HAL_GetTick>
 8000f22:	0002      	movs	r2, r0
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d901      	bls.n	8000f30 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e203      	b.n	8001338 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f34:	2202      	movs	r2, #2
 8000f36:	4013      	ands	r3, r2
 8000f38:	d0f1      	beq.n	8000f1e <HAL_RCC_OscConfig+0x2a6>
 8000f3a:	e018      	b.n	8000f6e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000f3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f40:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000f42:	2101      	movs	r1, #1
 8000f44:	438a      	bics	r2, r1
 8000f46:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f48:	f7ff fb84 	bl	8000654 <HAL_GetTick>
 8000f4c:	0003      	movs	r3, r0
 8000f4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f50:	e008      	b.n	8000f64 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f52:	f7ff fb7f 	bl	8000654 <HAL_GetTick>
 8000f56:	0002      	movs	r2, r0
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d901      	bls.n	8000f64 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e1e9      	b.n	8001338 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f68:	2202      	movs	r2, #2
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d1f1      	bne.n	8000f52 <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2204      	movs	r2, #4
 8000f74:	4013      	ands	r3, r2
 8000f76:	d100      	bne.n	8000f7a <HAL_RCC_OscConfig+0x302>
 8000f78:	e0c6      	b.n	8001108 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f7a:	231f      	movs	r3, #31
 8000f7c:	18fb      	adds	r3, r7, r3
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	2238      	movs	r2, #56	; 0x38
 8000f88:	4013      	ands	r3, r2
 8000f8a:	2b20      	cmp	r3, #32
 8000f8c:	d11e      	bne.n	8000fcc <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_RCC_OscConfig+0x330>)
 8000f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f92:	2202      	movs	r2, #2
 8000f94:	4013      	ands	r3, r2
 8000f96:	d100      	bne.n	8000f9a <HAL_RCC_OscConfig+0x322>
 8000f98:	e0b6      	b.n	8001108 <HAL_RCC_OscConfig+0x490>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d000      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x32c>
 8000fa2:	e0b1      	b.n	8001108 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e1c7      	b.n	8001338 <HAL_RCC_OscConfig+0x6c0>
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	fffeffff 	.word	0xfffeffff
 8000fb0:	fffbffff 	.word	0xfffbffff
 8000fb4:	ffff80ff 	.word	0xffff80ff
 8000fb8:	ffffc7ff 	.word	0xffffc7ff
 8000fbc:	00f42400 	.word	0x00f42400
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000004 	.word	0x20000004
 8000fc8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000fcc:	4bb8      	ldr	r3, [pc, #736]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8000fce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	055b      	lsls	r3, r3, #21
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	d101      	bne.n	8000fdc <HAL_RCC_OscConfig+0x364>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e000      	b.n	8000fde <HAL_RCC_OscConfig+0x366>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d011      	beq.n	8001006 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000fe2:	4bb3      	ldr	r3, [pc, #716]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8000fe4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fe6:	4bb2      	ldr	r3, [pc, #712]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8000fe8:	2180      	movs	r1, #128	; 0x80
 8000fea:	0549      	lsls	r1, r1, #21
 8000fec:	430a      	orrs	r2, r1
 8000fee:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ff0:	4baf      	ldr	r3, [pc, #700]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8000ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	055b      	lsls	r3, r3, #21
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8000ffe:	231f      	movs	r3, #31
 8001000:	18fb      	adds	r3, r7, r3
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001006:	4bab      	ldr	r3, [pc, #684]	; (80012b4 <HAL_RCC_OscConfig+0x63c>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	2380      	movs	r3, #128	; 0x80
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	4013      	ands	r3, r2
 8001010:	d11a      	bne.n	8001048 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001012:	4ba8      	ldr	r3, [pc, #672]	; (80012b4 <HAL_RCC_OscConfig+0x63c>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4ba7      	ldr	r3, [pc, #668]	; (80012b4 <HAL_RCC_OscConfig+0x63c>)
 8001018:	2180      	movs	r1, #128	; 0x80
 800101a:	0049      	lsls	r1, r1, #1
 800101c:	430a      	orrs	r2, r1
 800101e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001020:	f7ff fb18 	bl	8000654 <HAL_GetTick>
 8001024:	0003      	movs	r3, r0
 8001026:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800102a:	f7ff fb13 	bl	8000654 <HAL_GetTick>
 800102e:	0002      	movs	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e17d      	b.n	8001338 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800103c:	4b9d      	ldr	r3, [pc, #628]	; (80012b4 <HAL_RCC_OscConfig+0x63c>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4013      	ands	r3, r2
 8001046:	d0f0      	beq.n	800102a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d106      	bne.n	800105e <HAL_RCC_OscConfig+0x3e6>
 8001050:	4b97      	ldr	r3, [pc, #604]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8001052:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001054:	4b96      	ldr	r3, [pc, #600]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8001056:	2101      	movs	r1, #1
 8001058:	430a      	orrs	r2, r1
 800105a:	65da      	str	r2, [r3, #92]	; 0x5c
 800105c:	e01c      	b.n	8001098 <HAL_RCC_OscConfig+0x420>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	2b05      	cmp	r3, #5
 8001064:	d10c      	bne.n	8001080 <HAL_RCC_OscConfig+0x408>
 8001066:	4b92      	ldr	r3, [pc, #584]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8001068:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800106a:	4b91      	ldr	r3, [pc, #580]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 800106c:	2104      	movs	r1, #4
 800106e:	430a      	orrs	r2, r1
 8001070:	65da      	str	r2, [r3, #92]	; 0x5c
 8001072:	4b8f      	ldr	r3, [pc, #572]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8001074:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001076:	4b8e      	ldr	r3, [pc, #568]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8001078:	2101      	movs	r1, #1
 800107a:	430a      	orrs	r2, r1
 800107c:	65da      	str	r2, [r3, #92]	; 0x5c
 800107e:	e00b      	b.n	8001098 <HAL_RCC_OscConfig+0x420>
 8001080:	4b8b      	ldr	r3, [pc, #556]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8001082:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001084:	4b8a      	ldr	r3, [pc, #552]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8001086:	2101      	movs	r1, #1
 8001088:	438a      	bics	r2, r1
 800108a:	65da      	str	r2, [r3, #92]	; 0x5c
 800108c:	4b88      	ldr	r3, [pc, #544]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 800108e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001090:	4b87      	ldr	r3, [pc, #540]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8001092:	2104      	movs	r1, #4
 8001094:	438a      	bics	r2, r1
 8001096:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d014      	beq.n	80010ca <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a0:	f7ff fad8 	bl	8000654 <HAL_GetTick>
 80010a4:	0003      	movs	r3, r0
 80010a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010a8:	e009      	b.n	80010be <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010aa:	f7ff fad3 	bl	8000654 <HAL_GetTick>
 80010ae:	0002      	movs	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	4a80      	ldr	r2, [pc, #512]	; (80012b8 <HAL_RCC_OscConfig+0x640>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e13c      	b.n	8001338 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010be:	4b7c      	ldr	r3, [pc, #496]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 80010c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c2:	2202      	movs	r2, #2
 80010c4:	4013      	ands	r3, r2
 80010c6:	d0f0      	beq.n	80010aa <HAL_RCC_OscConfig+0x432>
 80010c8:	e013      	b.n	80010f2 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ca:	f7ff fac3 	bl	8000654 <HAL_GetTick>
 80010ce:	0003      	movs	r3, r0
 80010d0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010d2:	e009      	b.n	80010e8 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010d4:	f7ff fabe 	bl	8000654 <HAL_GetTick>
 80010d8:	0002      	movs	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	4a76      	ldr	r2, [pc, #472]	; (80012b8 <HAL_RCC_OscConfig+0x640>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e127      	b.n	8001338 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010e8:	4b71      	ldr	r3, [pc, #452]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 80010ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ec:	2202      	movs	r2, #2
 80010ee:	4013      	ands	r3, r2
 80010f0:	d1f0      	bne.n	80010d4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80010f2:	231f      	movs	r3, #31
 80010f4:	18fb      	adds	r3, r7, r3
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d105      	bne.n	8001108 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80010fc:	4b6c      	ldr	r3, [pc, #432]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 80010fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001100:	4b6b      	ldr	r3, [pc, #428]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8001102:	496e      	ldr	r1, [pc, #440]	; (80012bc <HAL_RCC_OscConfig+0x644>)
 8001104:	400a      	ands	r2, r1
 8001106:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2220      	movs	r2, #32
 800110e:	4013      	ands	r3, r2
 8001110:	d039      	beq.n	8001186 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d01b      	beq.n	8001152 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800111a:	4b65      	ldr	r3, [pc, #404]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	4b64      	ldr	r3, [pc, #400]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8001120:	2180      	movs	r1, #128	; 0x80
 8001122:	03c9      	lsls	r1, r1, #15
 8001124:	430a      	orrs	r2, r1
 8001126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001128:	f7ff fa94 	bl	8000654 <HAL_GetTick>
 800112c:	0003      	movs	r3, r0
 800112e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001130:	e008      	b.n	8001144 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001132:	f7ff fa8f 	bl	8000654 <HAL_GetTick>
 8001136:	0002      	movs	r2, r0
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d901      	bls.n	8001144 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e0f9      	b.n	8001338 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001144:	4b5a      	ldr	r3, [pc, #360]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	041b      	lsls	r3, r3, #16
 800114c:	4013      	ands	r3, r2
 800114e:	d0f0      	beq.n	8001132 <HAL_RCC_OscConfig+0x4ba>
 8001150:	e019      	b.n	8001186 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001152:	4b57      	ldr	r3, [pc, #348]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	4b56      	ldr	r3, [pc, #344]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8001158:	4959      	ldr	r1, [pc, #356]	; (80012c0 <HAL_RCC_OscConfig+0x648>)
 800115a:	400a      	ands	r2, r1
 800115c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800115e:	f7ff fa79 	bl	8000654 <HAL_GetTick>
 8001162:	0003      	movs	r3, r0
 8001164:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001168:	f7ff fa74 	bl	8000654 <HAL_GetTick>
 800116c:	0002      	movs	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e0de      	b.n	8001338 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800117a:	4b4d      	ldr	r3, [pc, #308]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	041b      	lsls	r3, r3, #16
 8001182:	4013      	ands	r3, r2
 8001184:	d1f0      	bne.n	8001168 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d100      	bne.n	8001190 <HAL_RCC_OscConfig+0x518>
 800118e:	e0d2      	b.n	8001336 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001190:	4b47      	ldr	r3, [pc, #284]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	2238      	movs	r2, #56	; 0x38
 8001196:	4013      	ands	r3, r2
 8001198:	2b10      	cmp	r3, #16
 800119a:	d100      	bne.n	800119e <HAL_RCC_OscConfig+0x526>
 800119c:	e081      	b.n	80012a2 <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d156      	bne.n	8001254 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011a6:	4b42      	ldr	r3, [pc, #264]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4b41      	ldr	r3, [pc, #260]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 80011ac:	4945      	ldr	r1, [pc, #276]	; (80012c4 <HAL_RCC_OscConfig+0x64c>)
 80011ae:	400a      	ands	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b2:	f7ff fa4f 	bl	8000654 <HAL_GetTick>
 80011b6:	0003      	movs	r3, r0
 80011b8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011bc:	f7ff fa4a 	bl	8000654 <HAL_GetTick>
 80011c0:	0002      	movs	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e0b4      	b.n	8001338 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011ce:	4b38      	ldr	r3, [pc, #224]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	049b      	lsls	r3, r3, #18
 80011d6:	4013      	ands	r3, r2
 80011d8:	d1f0      	bne.n	80011bc <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011da:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	4a3a      	ldr	r2, [pc, #232]	; (80012c8 <HAL_RCC_OscConfig+0x650>)
 80011e0:	4013      	ands	r3, r2
 80011e2:	0019      	movs	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ec:	431a      	orrs	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	431a      	orrs	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001200:	431a      	orrs	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001206:	431a      	orrs	r2, r3
 8001208:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 800120a:	430a      	orrs	r2, r1
 800120c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800120e:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8001214:	2180      	movs	r1, #128	; 0x80
 8001216:	0449      	lsls	r1, r1, #17
 8001218:	430a      	orrs	r2, r1
 800121a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800121c:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 800121e:	68da      	ldr	r2, [r3, #12]
 8001220:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8001222:	2180      	movs	r1, #128	; 0x80
 8001224:	0549      	lsls	r1, r1, #21
 8001226:	430a      	orrs	r2, r1
 8001228:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122a:	f7ff fa13 	bl	8000654 <HAL_GetTick>
 800122e:	0003      	movs	r3, r0
 8001230:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001234:	f7ff fa0e 	bl	8000654 <HAL_GetTick>
 8001238:	0002      	movs	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e078      	b.n	8001338 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	049b      	lsls	r3, r3, #18
 800124e:	4013      	ands	r3, r2
 8001250:	d0f0      	beq.n	8001234 <HAL_RCC_OscConfig+0x5bc>
 8001252:	e070      	b.n	8001336 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001254:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 800125a:	491a      	ldr	r1, [pc, #104]	; (80012c4 <HAL_RCC_OscConfig+0x64c>)
 800125c:	400a      	ands	r2, r1
 800125e:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8001266:	2103      	movs	r1, #3
 8001268:	438a      	bics	r2, r1
 800126a:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800126c:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8001272:	4916      	ldr	r1, [pc, #88]	; (80012cc <HAL_RCC_OscConfig+0x654>)
 8001274:	400a      	ands	r2, r1
 8001276:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001278:	f7ff f9ec 	bl	8000654 <HAL_GetTick>
 800127c:	0003      	movs	r3, r0
 800127e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001282:	f7ff f9e7 	bl	8000654 <HAL_GetTick>
 8001286:	0002      	movs	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e051      	b.n	8001338 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_RCC_OscConfig+0x638>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	049b      	lsls	r3, r3, #18
 800129c:	4013      	ands	r3, r2
 800129e:	d1f0      	bne.n	8001282 <HAL_RCC_OscConfig+0x60a>
 80012a0:	e049      	b.n	8001336 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d112      	bne.n	80012d0 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e044      	b.n	8001338 <HAL_RCC_OscConfig+0x6c0>
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40007000 	.word	0x40007000
 80012b8:	00001388 	.word	0x00001388
 80012bc:	efffffff 	.word	0xefffffff
 80012c0:	ffbfffff 	.word	0xffbfffff
 80012c4:	feffffff 	.word	0xfeffffff
 80012c8:	11c1808c 	.word	0x11c1808c
 80012cc:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <HAL_RCC_OscConfig+0x6c8>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	2203      	movs	r2, #3
 80012da:	401a      	ands	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d126      	bne.n	8001332 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	2270      	movs	r2, #112	; 0x70
 80012e8:	401a      	ands	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d11f      	bne.n	8001332 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	23fe      	movs	r3, #254	; 0xfe
 80012f6:	01db      	lsls	r3, r3, #7
 80012f8:	401a      	ands	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fe:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001300:	429a      	cmp	r2, r3
 8001302:	d116      	bne.n	8001332 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	23f8      	movs	r3, #248	; 0xf8
 8001308:	039b      	lsls	r3, r3, #14
 800130a:	401a      	ands	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001310:	429a      	cmp	r2, r3
 8001312:	d10e      	bne.n	8001332 <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	23e0      	movs	r3, #224	; 0xe0
 8001318:	051b      	lsls	r3, r3, #20
 800131a:	401a      	ands	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001320:	429a      	cmp	r2, r3
 8001322:	d106      	bne.n	8001332 <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	0f5b      	lsrs	r3, r3, #29
 8001328:	075a      	lsls	r2, r3, #29
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800132e:	429a      	cmp	r2, r3
 8001330:	d001      	beq.n	8001336 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	0018      	movs	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	b008      	add	sp, #32
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000

08001344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d101      	bne.n	8001358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e0e9      	b.n	800152c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001358:	4b76      	ldr	r3, [pc, #472]	; (8001534 <HAL_RCC_ClockConfig+0x1f0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2207      	movs	r2, #7
 800135e:	4013      	ands	r3, r2
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	d91e      	bls.n	80013a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001366:	4b73      	ldr	r3, [pc, #460]	; (8001534 <HAL_RCC_ClockConfig+0x1f0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2207      	movs	r2, #7
 800136c:	4393      	bics	r3, r2
 800136e:	0019      	movs	r1, r3
 8001370:	4b70      	ldr	r3, [pc, #448]	; (8001534 <HAL_RCC_ClockConfig+0x1f0>)
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001378:	f7ff f96c 	bl	8000654 <HAL_GetTick>
 800137c:	0003      	movs	r3, r0
 800137e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001380:	e009      	b.n	8001396 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001382:	f7ff f967 	bl	8000654 <HAL_GetTick>
 8001386:	0002      	movs	r2, r0
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	4a6a      	ldr	r2, [pc, #424]	; (8001538 <HAL_RCC_ClockConfig+0x1f4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e0ca      	b.n	800152c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001396:	4b67      	ldr	r3, [pc, #412]	; (8001534 <HAL_RCC_ClockConfig+0x1f0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2207      	movs	r2, #7
 800139c:	4013      	ands	r3, r2
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d1ee      	bne.n	8001382 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2202      	movs	r2, #2
 80013aa:	4013      	ands	r3, r2
 80013ac:	d015      	beq.n	80013da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2204      	movs	r2, #4
 80013b4:	4013      	ands	r3, r2
 80013b6:	d006      	beq.n	80013c6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013b8:	4b60      	ldr	r3, [pc, #384]	; (800153c <HAL_RCC_ClockConfig+0x1f8>)
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	4b5f      	ldr	r3, [pc, #380]	; (800153c <HAL_RCC_ClockConfig+0x1f8>)
 80013be:	21e0      	movs	r1, #224	; 0xe0
 80013c0:	01c9      	lsls	r1, r1, #7
 80013c2:	430a      	orrs	r2, r1
 80013c4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013c6:	4b5d      	ldr	r3, [pc, #372]	; (800153c <HAL_RCC_ClockConfig+0x1f8>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	4a5d      	ldr	r2, [pc, #372]	; (8001540 <HAL_RCC_ClockConfig+0x1fc>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	0019      	movs	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	4b59      	ldr	r3, [pc, #356]	; (800153c <HAL_RCC_ClockConfig+0x1f8>)
 80013d6:	430a      	orrs	r2, r1
 80013d8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2201      	movs	r2, #1
 80013e0:	4013      	ands	r3, r2
 80013e2:	d057      	beq.n	8001494 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d107      	bne.n	80013fc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ec:	4b53      	ldr	r3, [pc, #332]	; (800153c <HAL_RCC_ClockConfig+0x1f8>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	029b      	lsls	r3, r3, #10
 80013f4:	4013      	ands	r3, r2
 80013f6:	d12b      	bne.n	8001450 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e097      	b.n	800152c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d107      	bne.n	8001414 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001404:	4b4d      	ldr	r3, [pc, #308]	; (800153c <HAL_RCC_ClockConfig+0x1f8>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	049b      	lsls	r3, r3, #18
 800140c:	4013      	ands	r3, r2
 800140e:	d11f      	bne.n	8001450 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e08b      	b.n	800152c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d107      	bne.n	800142c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800141c:	4b47      	ldr	r3, [pc, #284]	; (800153c <HAL_RCC_ClockConfig+0x1f8>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4013      	ands	r3, r2
 8001426:	d113      	bne.n	8001450 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e07f      	b.n	800152c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b03      	cmp	r3, #3
 8001432:	d106      	bne.n	8001442 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001434:	4b41      	ldr	r3, [pc, #260]	; (800153c <HAL_RCC_ClockConfig+0x1f8>)
 8001436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001438:	2202      	movs	r2, #2
 800143a:	4013      	ands	r3, r2
 800143c:	d108      	bne.n	8001450 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e074      	b.n	800152c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001442:	4b3e      	ldr	r3, [pc, #248]	; (800153c <HAL_RCC_ClockConfig+0x1f8>)
 8001444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001446:	2202      	movs	r2, #2
 8001448:	4013      	ands	r3, r2
 800144a:	d101      	bne.n	8001450 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e06d      	b.n	800152c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001450:	4b3a      	ldr	r3, [pc, #232]	; (800153c <HAL_RCC_ClockConfig+0x1f8>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2207      	movs	r2, #7
 8001456:	4393      	bics	r3, r2
 8001458:	0019      	movs	r1, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	4b37      	ldr	r3, [pc, #220]	; (800153c <HAL_RCC_ClockConfig+0x1f8>)
 8001460:	430a      	orrs	r2, r1
 8001462:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001464:	f7ff f8f6 	bl	8000654 <HAL_GetTick>
 8001468:	0003      	movs	r3, r0
 800146a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146c:	e009      	b.n	8001482 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800146e:	f7ff f8f1 	bl	8000654 <HAL_GetTick>
 8001472:	0002      	movs	r2, r0
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	4a2f      	ldr	r2, [pc, #188]	; (8001538 <HAL_RCC_ClockConfig+0x1f4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e054      	b.n	800152c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001482:	4b2e      	ldr	r3, [pc, #184]	; (800153c <HAL_RCC_ClockConfig+0x1f8>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	2238      	movs	r2, #56	; 0x38
 8001488:	401a      	ands	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	429a      	cmp	r2, r3
 8001492:	d1ec      	bne.n	800146e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001494:	4b27      	ldr	r3, [pc, #156]	; (8001534 <HAL_RCC_ClockConfig+0x1f0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2207      	movs	r2, #7
 800149a:	4013      	ands	r3, r2
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d21e      	bcs.n	80014e0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a2:	4b24      	ldr	r3, [pc, #144]	; (8001534 <HAL_RCC_ClockConfig+0x1f0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2207      	movs	r2, #7
 80014a8:	4393      	bics	r3, r2
 80014aa:	0019      	movs	r1, r3
 80014ac:	4b21      	ldr	r3, [pc, #132]	; (8001534 <HAL_RCC_ClockConfig+0x1f0>)
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014b4:	f7ff f8ce 	bl	8000654 <HAL_GetTick>
 80014b8:	0003      	movs	r3, r0
 80014ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014bc:	e009      	b.n	80014d2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014be:	f7ff f8c9 	bl	8000654 <HAL_GetTick>
 80014c2:	0002      	movs	r2, r0
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	4a1b      	ldr	r2, [pc, #108]	; (8001538 <HAL_RCC_ClockConfig+0x1f4>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e02c      	b.n	800152c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_RCC_ClockConfig+0x1f0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2207      	movs	r2, #7
 80014d8:	4013      	ands	r3, r2
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d1ee      	bne.n	80014be <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2204      	movs	r2, #4
 80014e6:	4013      	ands	r3, r2
 80014e8:	d009      	beq.n	80014fe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014ea:	4b14      	ldr	r3, [pc, #80]	; (800153c <HAL_RCC_ClockConfig+0x1f8>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	4a15      	ldr	r2, [pc, #84]	; (8001544 <HAL_RCC_ClockConfig+0x200>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	0019      	movs	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	4b10      	ldr	r3, [pc, #64]	; (800153c <HAL_RCC_ClockConfig+0x1f8>)
 80014fa:	430a      	orrs	r2, r1
 80014fc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80014fe:	f000 f829 	bl	8001554 <HAL_RCC_GetSysClockFreq>
 8001502:	0001      	movs	r1, r0
 8001504:	4b0d      	ldr	r3, [pc, #52]	; (800153c <HAL_RCC_ClockConfig+0x1f8>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	0a1b      	lsrs	r3, r3, #8
 800150a:	220f      	movs	r2, #15
 800150c:	401a      	ands	r2, r3
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <HAL_RCC_ClockConfig+0x204>)
 8001510:	0092      	lsls	r2, r2, #2
 8001512:	58d3      	ldr	r3, [r2, r3]
 8001514:	221f      	movs	r2, #31
 8001516:	4013      	ands	r3, r2
 8001518:	000a      	movs	r2, r1
 800151a:	40da      	lsrs	r2, r3
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_RCC_ClockConfig+0x208>)
 800151e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_RCC_ClockConfig+0x20c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	0018      	movs	r0, r3
 8001526:	f7ff f839 	bl	800059c <HAL_InitTick>
 800152a:	0003      	movs	r3, r0
}
 800152c:	0018      	movs	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	b004      	add	sp, #16
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40022000 	.word	0x40022000
 8001538:	00001388 	.word	0x00001388
 800153c:	40021000 	.word	0x40021000
 8001540:	fffff0ff 	.word	0xfffff0ff
 8001544:	ffff8fff 	.word	0xffff8fff
 8001548:	080024f4 	.word	0x080024f4
 800154c:	20000000 	.word	0x20000000
 8001550:	20000004 	.word	0x20000004

08001554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800155a:	4b3c      	ldr	r3, [pc, #240]	; (800164c <HAL_RCC_GetSysClockFreq+0xf8>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2238      	movs	r2, #56	; 0x38
 8001560:	4013      	ands	r3, r2
 8001562:	d10f      	bne.n	8001584 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001564:	4b39      	ldr	r3, [pc, #228]	; (800164c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	0adb      	lsrs	r3, r3, #11
 800156a:	2207      	movs	r2, #7
 800156c:	4013      	ands	r3, r2
 800156e:	2201      	movs	r2, #1
 8001570:	409a      	lsls	r2, r3
 8001572:	0013      	movs	r3, r2
 8001574:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001576:	6839      	ldr	r1, [r7, #0]
 8001578:	4835      	ldr	r0, [pc, #212]	; (8001650 <HAL_RCC_GetSysClockFreq+0xfc>)
 800157a:	f7fe fdc3 	bl	8000104 <__udivsi3>
 800157e:	0003      	movs	r3, r0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	e05d      	b.n	8001640 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001584:	4b31      	ldr	r3, [pc, #196]	; (800164c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2238      	movs	r2, #56	; 0x38
 800158a:	4013      	ands	r3, r2
 800158c:	2b08      	cmp	r3, #8
 800158e:	d102      	bne.n	8001596 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001590:	4b30      	ldr	r3, [pc, #192]	; (8001654 <HAL_RCC_GetSysClockFreq+0x100>)
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	e054      	b.n	8001640 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001596:	4b2d      	ldr	r3, [pc, #180]	; (800164c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2238      	movs	r2, #56	; 0x38
 800159c:	4013      	ands	r3, r2
 800159e:	2b10      	cmp	r3, #16
 80015a0:	d138      	bne.n	8001614 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80015a2:	4b2a      	ldr	r3, [pc, #168]	; (800164c <HAL_RCC_GetSysClockFreq+0xf8>)
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	2203      	movs	r2, #3
 80015a8:	4013      	ands	r3, r2
 80015aa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015ac:	4b27      	ldr	r3, [pc, #156]	; (800164c <HAL_RCC_GetSysClockFreq+0xf8>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	2207      	movs	r2, #7
 80015b4:	4013      	ands	r3, r2
 80015b6:	3301      	adds	r3, #1
 80015b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d10d      	bne.n	80015dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	4824      	ldr	r0, [pc, #144]	; (8001654 <HAL_RCC_GetSysClockFreq+0x100>)
 80015c4:	f7fe fd9e 	bl	8000104 <__udivsi3>
 80015c8:	0003      	movs	r3, r0
 80015ca:	0019      	movs	r1, r3
 80015cc:	4b1f      	ldr	r3, [pc, #124]	; (800164c <HAL_RCC_GetSysClockFreq+0xf8>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	227f      	movs	r2, #127	; 0x7f
 80015d4:	4013      	ands	r3, r2
 80015d6:	434b      	muls	r3, r1
 80015d8:	617b      	str	r3, [r7, #20]
        break;
 80015da:	e00d      	b.n	80015f8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	481c      	ldr	r0, [pc, #112]	; (8001650 <HAL_RCC_GetSysClockFreq+0xfc>)
 80015e0:	f7fe fd90 	bl	8000104 <__udivsi3>
 80015e4:	0003      	movs	r3, r0
 80015e6:	0019      	movs	r1, r3
 80015e8:	4b18      	ldr	r3, [pc, #96]	; (800164c <HAL_RCC_GetSysClockFreq+0xf8>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	227f      	movs	r2, #127	; 0x7f
 80015f0:	4013      	ands	r3, r2
 80015f2:	434b      	muls	r3, r1
 80015f4:	617b      	str	r3, [r7, #20]
        break;
 80015f6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <HAL_RCC_GetSysClockFreq+0xf8>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	0f5b      	lsrs	r3, r3, #29
 80015fe:	2207      	movs	r2, #7
 8001600:	4013      	ands	r3, r2
 8001602:	3301      	adds	r3, #1
 8001604:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	6978      	ldr	r0, [r7, #20]
 800160a:	f7fe fd7b 	bl	8000104 <__udivsi3>
 800160e:	0003      	movs	r3, r0
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	e015      	b.n	8001640 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001614:	4b0d      	ldr	r3, [pc, #52]	; (800164c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2238      	movs	r2, #56	; 0x38
 800161a:	4013      	ands	r3, r2
 800161c:	2b20      	cmp	r3, #32
 800161e:	d103      	bne.n	8001628 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001620:	2380      	movs	r3, #128	; 0x80
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	e00b      	b.n	8001640 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_RCC_GetSysClockFreq+0xf8>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	2238      	movs	r2, #56	; 0x38
 800162e:	4013      	ands	r3, r2
 8001630:	2b18      	cmp	r3, #24
 8001632:	d103      	bne.n	800163c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001634:	23fa      	movs	r3, #250	; 0xfa
 8001636:	01db      	lsls	r3, r3, #7
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	e001      	b.n	8001640 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001640:	693b      	ldr	r3, [r7, #16]
}
 8001642:	0018      	movs	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	b006      	add	sp, #24
 8001648:	bd80      	pop	{r7, pc}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	40021000 	.word	0x40021000
 8001650:	00f42400 	.word	0x00f42400
 8001654:	007a1200 	.word	0x007a1200

08001658 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e0a8      	b.n	80017bc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	2b00      	cmp	r3, #0
 8001670:	d109      	bne.n	8001686 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	2382      	movs	r3, #130	; 0x82
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	429a      	cmp	r2, r3
 800167c:	d009      	beq.n	8001692 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	61da      	str	r2, [r3, #28]
 8001684:	e005      	b.n	8001692 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	225d      	movs	r2, #93	; 0x5d
 800169c:	5c9b      	ldrb	r3, [r3, r2]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d107      	bne.n	80016b4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	225c      	movs	r2, #92	; 0x5c
 80016a8:	2100      	movs	r1, #0
 80016aa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	0018      	movs	r0, r3
 80016b0:	f7fe feae 	bl	8000410 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	225d      	movs	r2, #93	; 0x5d
 80016b8:	2102      	movs	r1, #2
 80016ba:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2140      	movs	r1, #64	; 0x40
 80016c8:	438a      	bics	r2, r1
 80016ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	23e0      	movs	r3, #224	; 0xe0
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d902      	bls.n	80016de <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	e002      	b.n	80016e4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	015b      	lsls	r3, r3, #5
 80016e2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	23f0      	movs	r3, #240	; 0xf0
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d008      	beq.n	8001702 <HAL_SPI_Init+0xaa>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	23e0      	movs	r3, #224	; 0xe0
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d002      	beq.n	8001702 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	2382      	movs	r3, #130	; 0x82
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	401a      	ands	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6899      	ldr	r1, [r3, #8]
 8001710:	2384      	movs	r3, #132	; 0x84
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	400b      	ands	r3, r1
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	2102      	movs	r1, #2
 800171e:	400b      	ands	r3, r1
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	2101      	movs	r1, #1
 8001728:	400b      	ands	r3, r1
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6999      	ldr	r1, [r3, #24]
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	400b      	ands	r3, r1
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	2138      	movs	r1, #56	; 0x38
 800173e:	400b      	ands	r3, r1
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	2180      	movs	r1, #128	; 0x80
 8001748:	400b      	ands	r3, r1
 800174a:	431a      	orrs	r2, r3
 800174c:	0011      	movs	r1, r2
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	019b      	lsls	r3, r3, #6
 8001756:	401a      	ands	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	0c1b      	lsrs	r3, r3, #16
 8001766:	2204      	movs	r2, #4
 8001768:	401a      	ands	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	2110      	movs	r1, #16
 8001770:	400b      	ands	r3, r1
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001778:	2108      	movs	r1, #8
 800177a:	400b      	ands	r3, r1
 800177c:	431a      	orrs	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68d9      	ldr	r1, [r3, #12]
 8001782:	23f0      	movs	r3, #240	; 0xf0
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	400b      	ands	r3, r1
 8001788:	431a      	orrs	r2, r3
 800178a:	0011      	movs	r1, r2
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	015b      	lsls	r3, r3, #5
 8001792:	401a      	ands	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	69da      	ldr	r2, [r3, #28]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4907      	ldr	r1, [pc, #28]	; (80017c4 <HAL_SPI_Init+0x16c>)
 80017a8:	400a      	ands	r2, r1
 80017aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	225d      	movs	r2, #93	; 0x5d
 80017b6:	2101      	movs	r1, #1
 80017b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	0018      	movs	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	b004      	add	sp, #16
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	fffff7ff 	.word	0xfffff7ff

080017c8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	1dbb      	adds	r3, r7, #6
 80017d4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80017d6:	2317      	movs	r3, #23
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d112      	bne.n	800180c <HAL_SPI_Receive_IT+0x44>
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	2382      	movs	r3, #130	; 0x82
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d10c      	bne.n	800180c <HAL_SPI_Receive_IT+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	225d      	movs	r2, #93	; 0x5d
 80017f6:	2104      	movs	r1, #4
 80017f8:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80017fa:	1dbb      	adds	r3, r7, #6
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	68b9      	ldr	r1, [r7, #8]
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f000 f8a4 	bl	8001950 <HAL_SPI_TransmitReceive_IT>
 8001808:	0003      	movs	r3, r0
 800180a:	e095      	b.n	8001938 <HAL_SPI_Receive_IT+0x170>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	225c      	movs	r2, #92	; 0x5c
 8001810:	5c9b      	ldrb	r3, [r3, r2]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d101      	bne.n	800181a <HAL_SPI_Receive_IT+0x52>
 8001816:	2302      	movs	r3, #2
 8001818:	e08e      	b.n	8001938 <HAL_SPI_Receive_IT+0x170>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	225c      	movs	r2, #92	; 0x5c
 800181e:	2101      	movs	r1, #1
 8001820:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	225d      	movs	r2, #93	; 0x5d
 8001826:	5c9b      	ldrb	r3, [r3, r2]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b01      	cmp	r3, #1
 800182c:	d004      	beq.n	8001838 <HAL_SPI_Receive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 800182e:	2317      	movs	r3, #23
 8001830:	18fb      	adds	r3, r7, r3
 8001832:	2202      	movs	r2, #2
 8001834:	701a      	strb	r2, [r3, #0]
    goto error;
 8001836:	e078      	b.n	800192a <HAL_SPI_Receive_IT+0x162>
  }

  if ((pData == NULL) || (Size == 0U))
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_SPI_Receive_IT+0x7e>
 800183e:	1dbb      	adds	r3, r7, #6
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d104      	bne.n	8001850 <HAL_SPI_Receive_IT+0x88>
  {
    errorcode = HAL_ERROR;
 8001846:	2317      	movs	r3, #23
 8001848:	18fb      	adds	r3, r7, r3
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
    goto error;
 800184e:	e06c      	b.n	800192a <HAL_SPI_Receive_IT+0x162>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	225d      	movs	r2, #93	; 0x5d
 8001854:	2104      	movs	r1, #4
 8001856:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	1dba      	adds	r2, r7, #6
 8001868:	2144      	movs	r1, #68	; 0x44
 800186a:	8812      	ldrh	r2, [r2, #0]
 800186c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1dba      	adds	r2, r7, #6
 8001872:	2146      	movs	r1, #70	; 0x46
 8001874:	8812      	ldrh	r2, [r2, #0]
 8001876:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2200      	movs	r2, #0
 800187c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	23e0      	movs	r3, #224	; 0xe0
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	429a      	cmp	r2, r3
 800189a:	d90b      	bls.n	80018b4 <HAL_SPI_Receive_IT+0xec>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4926      	ldr	r1, [pc, #152]	; (8001940 <HAL_SPI_Receive_IT+0x178>)
 80018a8:	400a      	ands	r2, r1
 80018aa:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4a25      	ldr	r2, [pc, #148]	; (8001944 <HAL_SPI_Receive_IT+0x17c>)
 80018b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80018b2:	e00b      	b.n	80018cc <HAL_SPI_Receive_IT+0x104>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2180      	movs	r1, #128	; 0x80
 80018c0:	0149      	lsls	r1, r1, #5
 80018c2:	430a      	orrs	r2, r1
 80018c4:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4a1f      	ldr	r2, [pc, #124]	; (8001948 <HAL_SPI_Receive_IT+0x180>)
 80018ca:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	021b      	lsls	r3, r3, #8
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d10f      	bne.n	80018f8 <HAL_SPI_Receive_IT+0x130>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2140      	movs	r1, #64	; 0x40
 80018e4:	438a      	bics	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4916      	ldr	r1, [pc, #88]	; (800194c <HAL_SPI_Receive_IT+0x184>)
 80018f4:	400a      	ands	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2160      	movs	r1, #96	; 0x60
 8001904:	430a      	orrs	r2, r1
 8001906:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2240      	movs	r2, #64	; 0x40
 8001910:	4013      	ands	r3, r2
 8001912:	2b40      	cmp	r3, #64	; 0x40
 8001914:	d008      	beq.n	8001928 <HAL_SPI_Receive_IT+0x160>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2140      	movs	r1, #64	; 0x40
 8001922:	430a      	orrs	r2, r1
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	e000      	b.n	800192a <HAL_SPI_Receive_IT+0x162>
  }

error :
 8001928:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	225c      	movs	r2, #92	; 0x5c
 800192e:	2100      	movs	r1, #0
 8001930:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001932:	2317      	movs	r3, #23
 8001934:	18fb      	adds	r3, r7, r3
 8001936:	781b      	ldrb	r3, [r3, #0]
}
 8001938:	0018      	movs	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	b006      	add	sp, #24
 800193e:	bd80      	pop	{r7, pc}
 8001940:	ffffefff 	.word	0xffffefff
 8001944:	08001f9f 	.word	0x08001f9f
 8001948:	08001f4d 	.word	0x08001f4d
 800194c:	ffffbfff 	.word	0xffffbfff

08001950 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	001a      	movs	r2, r3
 800195e:	1cbb      	adds	r3, r7, #2
 8001960:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001962:	2317      	movs	r3, #23
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	225c      	movs	r2, #92	; 0x5c
 800196e:	5c9b      	ldrb	r3, [r3, r2]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <HAL_SPI_TransmitReceive_IT+0x28>
 8001974:	2302      	movs	r3, #2
 8001976:	e0a6      	b.n	8001ac6 <HAL_SPI_TransmitReceive_IT+0x176>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	225c      	movs	r2, #92	; 0x5c
 800197c:	2101      	movs	r1, #1
 800197e:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001980:	2016      	movs	r0, #22
 8001982:	183b      	adds	r3, r7, r0
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	215d      	movs	r1, #93	; 0x5d
 8001988:	5c52      	ldrb	r2, [r2, r1]
 800198a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001992:	0001      	movs	r1, r0
 8001994:	187b      	adds	r3, r7, r1
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d011      	beq.n	80019c0 <HAL_SPI_TransmitReceive_IT+0x70>
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	2382      	movs	r3, #130	; 0x82
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d107      	bne.n	80019b6 <HAL_SPI_TransmitReceive_IT+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d103      	bne.n	80019b6 <HAL_SPI_TransmitReceive_IT+0x66>
 80019ae:	187b      	adds	r3, r7, r1
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d004      	beq.n	80019c0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 80019b6:	2317      	movs	r3, #23
 80019b8:	18fb      	adds	r3, r7, r3
 80019ba:	2202      	movs	r2, #2
 80019bc:	701a      	strb	r2, [r3, #0]
    goto error;
 80019be:	e07b      	b.n	8001ab8 <HAL_SPI_TransmitReceive_IT+0x168>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d006      	beq.n	80019d4 <HAL_SPI_TransmitReceive_IT+0x84>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_SPI_TransmitReceive_IT+0x84>
 80019cc:	1cbb      	adds	r3, r7, #2
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d104      	bne.n	80019de <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    errorcode = HAL_ERROR;
 80019d4:	2317      	movs	r3, #23
 80019d6:	18fb      	adds	r3, r7, r3
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
    goto error;
 80019dc:	e06c      	b.n	8001ab8 <HAL_SPI_TransmitReceive_IT+0x168>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	225d      	movs	r2, #93	; 0x5d
 80019e2:	5c9b      	ldrb	r3, [r3, r2]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d003      	beq.n	80019f2 <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	225d      	movs	r2, #93	; 0x5d
 80019ee:	2105      	movs	r1, #5
 80019f0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1cba      	adds	r2, r7, #2
 8001a02:	8812      	ldrh	r2, [r2, #0]
 8001a04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	1cba      	adds	r2, r7, #2
 8001a0a:	8812      	ldrh	r2, [r2, #0]
 8001a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	1cba      	adds	r2, r7, #2
 8001a18:	2144      	movs	r1, #68	; 0x44
 8001a1a:	8812      	ldrh	r2, [r2, #0]
 8001a1c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1cba      	adds	r2, r7, #2
 8001a22:	2146      	movs	r1, #70	; 0x46
 8001a24:	8812      	ldrh	r2, [r2, #0]
 8001a26:	525a      	strh	r2, [r3, r1]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	23e0      	movs	r3, #224	; 0xe0
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d906      	bls.n	8001a42 <HAL_SPI_TransmitReceive_IT+0xf2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4a26      	ldr	r2, [pc, #152]	; (8001ad0 <HAL_SPI_TransmitReceive_IT+0x180>)
 8001a38:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4a25      	ldr	r2, [pc, #148]	; (8001ad4 <HAL_SPI_TransmitReceive_IT+0x184>)
 8001a3e:	651a      	str	r2, [r3, #80]	; 0x50
 8001a40:	e005      	b.n	8001a4e <HAL_SPI_TransmitReceive_IT+0xfe>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4a24      	ldr	r2, [pc, #144]	; (8001ad8 <HAL_SPI_TransmitReceive_IT+0x188>)
 8001a46:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4a24      	ldr	r2, [pc, #144]	; (8001adc <HAL_SPI_TransmitReceive_IT+0x18c>)
 8001a4c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	23e0      	movs	r3, #224	; 0xe0
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d803      	bhi.n	8001a62 <HAL_SPI_TransmitReceive_IT+0x112>
 8001a5a:	1cbb      	adds	r3, r7, #2
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d908      	bls.n	8001a74 <HAL_SPI_TransmitReceive_IT+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	491c      	ldr	r1, [pc, #112]	; (8001ae0 <HAL_SPI_TransmitReceive_IT+0x190>)
 8001a6e:	400a      	ands	r2, r1
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	e008      	b.n	8001a86 <HAL_SPI_TransmitReceive_IT+0x136>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2180      	movs	r1, #128	; 0x80
 8001a80:	0149      	lsls	r1, r1, #5
 8001a82:	430a      	orrs	r2, r1
 8001a84:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	21e0      	movs	r1, #224	; 0xe0
 8001a92:	430a      	orrs	r2, r1
 8001a94:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2240      	movs	r2, #64	; 0x40
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b40      	cmp	r3, #64	; 0x40
 8001aa2:	d008      	beq.n	8001ab6 <HAL_SPI_TransmitReceive_IT+0x166>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2140      	movs	r1, #64	; 0x40
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	e000      	b.n	8001ab8 <HAL_SPI_TransmitReceive_IT+0x168>
  }

error :
 8001ab6:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	225c      	movs	r2, #92	; 0x5c
 8001abc:	2100      	movs	r1, #0
 8001abe:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001ac0:	2317      	movs	r3, #23
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	781b      	ldrb	r3, [r3, #0]
}
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	b006      	add	sp, #24
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	08001e83 	.word	0x08001e83
 8001ad4:	08001eeb 	.word	0x08001eeb
 8001ad8:	08001d2d 	.word	0x08001d2d
 8001adc:	08001def 	.word	0x08001def
 8001ae0:	ffffefff 	.word	0xffffefff

08001ae4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	099b      	lsrs	r3, r3, #6
 8001b00:	001a      	movs	r2, r3
 8001b02:	2301      	movs	r3, #1
 8001b04:	4013      	ands	r3, r2
 8001b06:	d10f      	bne.n	8001b28 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001b0e:	d00b      	beq.n	8001b28 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	099b      	lsrs	r3, r3, #6
 8001b14:	001a      	movs	r2, r3
 8001b16:	2301      	movs	r3, #1
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d005      	beq.n	8001b28 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	0010      	movs	r0, r2
 8001b24:	4798      	blx	r3
    return;
 8001b26:	e0d5      	b.n	8001cd4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	085b      	lsrs	r3, r3, #1
 8001b2c:	001a      	movs	r2, r3
 8001b2e:	2301      	movs	r3, #1
 8001b30:	4013      	ands	r3, r2
 8001b32:	d00b      	beq.n	8001b4c <HAL_SPI_IRQHandler+0x68>
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	09db      	lsrs	r3, r3, #7
 8001b38:	001a      	movs	r2, r3
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d005      	beq.n	8001b4c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	0010      	movs	r0, r2
 8001b48:	4798      	blx	r3
    return;
 8001b4a:	e0c3      	b.n	8001cd4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	001a      	movs	r2, r3
 8001b52:	2301      	movs	r3, #1
 8001b54:	4013      	ands	r3, r2
 8001b56:	d10c      	bne.n	8001b72 <HAL_SPI_IRQHandler+0x8e>
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	099b      	lsrs	r3, r3, #6
 8001b5c:	001a      	movs	r2, r3
 8001b5e:	2301      	movs	r3, #1
 8001b60:	4013      	ands	r3, r2
 8001b62:	d106      	bne.n	8001b72 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	0a1b      	lsrs	r3, r3, #8
 8001b68:	001a      	movs	r2, r3
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d100      	bne.n	8001b72 <HAL_SPI_IRQHandler+0x8e>
 8001b70:	e0b0      	b.n	8001cd4 <HAL_SPI_IRQHandler+0x1f0>
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	095b      	lsrs	r3, r3, #5
 8001b76:	001a      	movs	r2, r3
 8001b78:	2301      	movs	r3, #1
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d100      	bne.n	8001b80 <HAL_SPI_IRQHandler+0x9c>
 8001b7e:	e0a9      	b.n	8001cd4 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	099b      	lsrs	r3, r3, #6
 8001b84:	001a      	movs	r2, r3
 8001b86:	2301      	movs	r3, #1
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d023      	beq.n	8001bd4 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	225d      	movs	r2, #93	; 0x5d
 8001b90:	5c9b      	ldrb	r3, [r3, r2]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d011      	beq.n	8001bbc <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	e00b      	b.n	8001bd4 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]
        return;
 8001bd2:	e07f      	b.n	8001cd4 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	001a      	movs	r2, r3
 8001bda:	2301      	movs	r3, #1
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d014      	beq.n	8001c0a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be4:	2201      	movs	r2, #1
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2140      	movs	r1, #64	; 0x40
 8001c04:	438a      	bics	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	001a      	movs	r2, r3
 8001c10:	2301      	movs	r3, #1
 8001c12:	4013      	ands	r3, r2
 8001c14:	d00c      	beq.n	8001c30 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1a:	2208      	movs	r2, #8
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d04c      	beq.n	8001cd2 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	21e0      	movs	r1, #224	; 0xe0
 8001c44:	438a      	bics	r2, r1
 8001c46:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	225d      	movs	r2, #93	; 0x5d
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	2202      	movs	r2, #2
 8001c54:	4013      	ands	r3, r2
 8001c56:	d103      	bne.n	8001c60 <HAL_SPI_IRQHandler+0x17c>
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d032      	beq.n	8001cc6 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2103      	movs	r1, #3
 8001c6c:	438a      	bics	r2, r1
 8001c6e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d010      	beq.n	8001c9a <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7c:	4a17      	ldr	r2, [pc, #92]	; (8001cdc <HAL_SPI_IRQHandler+0x1f8>)
 8001c7e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c84:	0018      	movs	r0, r3
 8001c86:	f7fe fde3 	bl	8000850 <HAL_DMA_Abort_IT>
 8001c8a:	1e03      	subs	r3, r0, #0
 8001c8c:	d005      	beq.n	8001c9a <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c92:	2240      	movs	r2, #64	; 0x40
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d016      	beq.n	8001cd0 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca6:	4a0d      	ldr	r2, [pc, #52]	; (8001cdc <HAL_SPI_IRQHandler+0x1f8>)
 8001ca8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f7fe fdce 	bl	8000850 <HAL_DMA_Abort_IT>
 8001cb4:	1e03      	subs	r3, r0, #0
 8001cb6:	d00b      	beq.n	8001cd0 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cbc:	2240      	movs	r2, #64	; 0x40
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8001cc4:	e004      	b.n	8001cd0 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f000 f811 	bl	8001cf0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001cce:	e000      	b.n	8001cd2 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8001cd0:	46c0      	nop			; (mov r8, r8)
    return;
 8001cd2:	46c0      	nop			; (mov r8, r8)
  }
}
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b008      	add	sp, #32
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	08001d01 	.word	0x08001d01

08001ce0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8001ce8:	46c0      	nop			; (mov r8, r8)
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b002      	add	sp, #8
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001cf8:	46c0      	nop			; (mov r8, r8)
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	b002      	add	sp, #8
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2246      	movs	r2, #70	; 0x46
 8001d12:	2100      	movs	r1, #0
 8001d14:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f7ff ffe6 	bl	8001cf0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001d24:	46c0      	nop			; (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b004      	add	sp, #16
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2246      	movs	r2, #70	; 0x46
 8001d38:	5a9b      	ldrh	r3, [r3, r2]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d924      	bls.n	8001d8a <SPI_2linesRxISR_8BIT+0x5e>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	b292      	uxth	r2, r2
 8001d4c:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	1c9a      	adds	r2, r3, #2
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2246      	movs	r2, #70	; 0x46
 8001d5c:	5a9b      	ldrh	r3, [r3, r2]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	3b02      	subs	r3, #2
 8001d62:	b299      	uxth	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2246      	movs	r2, #70	; 0x46
 8001d68:	5299      	strh	r1, [r3, r2]
    if (hspi->RxXferCount == 1U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2246      	movs	r2, #70	; 0x46
 8001d6e:	5a9b      	ldrh	r3, [r3, r2]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d120      	bne.n	8001db8 <SPI_2linesRxISR_8BIT+0x8c>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2180      	movs	r1, #128	; 0x80
 8001d82:	0149      	lsls	r1, r1, #5
 8001d84:	430a      	orrs	r2, r1
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	e016      	b.n	8001db8 <SPI_2linesRxISR_8BIT+0x8c>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	330c      	adds	r3, #12
 8001d90:	001a      	movs	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	7812      	ldrb	r2, [r2, #0]
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2246      	movs	r2, #70	; 0x46
 8001daa:	5a9b      	ldrh	r3, [r3, r2]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b299      	uxth	r1, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2246      	movs	r2, #70	; 0x46
 8001db6:	5299      	strh	r1, [r3, r2]
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2246      	movs	r2, #70	; 0x46
 8001dbc:	5a9b      	ldrh	r3, [r3, r2]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d110      	bne.n	8001de6 <SPI_2linesRxISR_8BIT+0xba>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2160      	movs	r1, #96	; 0x60
 8001dd0:	438a      	bics	r2, r1
 8001dd2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d103      	bne.n	8001de6 <SPI_2linesRxISR_8BIT+0xba>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	0018      	movs	r0, r3
 8001de2:	f000 fad7 	bl	8002394 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b002      	add	sp, #8
 8001dec:	bd80      	pop	{r7, pc}

08001dee <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d912      	bls.n	8001e26 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e04:	881a      	ldrh	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e10:	1c9a      	adds	r2, r3, #2
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	3b02      	subs	r3, #2
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e24:	e012      	b.n	8001e4c <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	330c      	adds	r3, #12
 8001e30:	7812      	ldrb	r2, [r2, #0]
 8001e32:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d111      	bne.n	8001e7a <SPI_2linesTxISR_8BIT+0x8c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2180      	movs	r1, #128	; 0x80
 8001e62:	438a      	bics	r2, r1
 8001e64:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2246      	movs	r2, #70	; 0x46
 8001e6a:	5a9b      	ldrh	r3, [r3, r2]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d103      	bne.n	8001e7a <SPI_2linesTxISR_8BIT+0x8c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	0018      	movs	r0, r3
 8001e76:	f000 fa8d 	bl	8002394 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	b002      	add	sp, #8
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	b292      	uxth	r2, r2
 8001e96:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	1c9a      	adds	r2, r3, #2
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2246      	movs	r2, #70	; 0x46
 8001ea6:	5a9b      	ldrh	r3, [r3, r2]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	b299      	uxth	r1, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2246      	movs	r2, #70	; 0x46
 8001eb2:	5299      	strh	r1, [r3, r2]

  if (hspi->RxXferCount == 0U)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2246      	movs	r2, #70	; 0x46
 8001eb8:	5a9b      	ldrh	r3, [r3, r2]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d110      	bne.n	8001ee2 <SPI_2linesRxISR_16BIT+0x60>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2140      	movs	r1, #64	; 0x40
 8001ecc:	438a      	bics	r2, r1
 8001ece:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d103      	bne.n	8001ee2 <SPI_2linesRxISR_16BIT+0x60>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	0018      	movs	r0, r3
 8001ede:	f000 fa59 	bl	8002394 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b002      	add	sp, #8
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	881a      	ldrh	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f02:	1c9a      	adds	r2, r3, #2
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d111      	bne.n	8001f44 <SPI_2linesTxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2180      	movs	r1, #128	; 0x80
 8001f2c:	438a      	bics	r2, r1
 8001f2e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2246      	movs	r2, #70	; 0x46
 8001f34:	5a9b      	ldrh	r3, [r3, r2]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d103      	bne.n	8001f44 <SPI_2linesTxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f000 fa28 	bl	8002394 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001f44:	46c0      	nop			; (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b002      	add	sp, #8
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	330c      	adds	r3, #12
 8001f5a:	001a      	movs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	7812      	ldrb	r2, [r2, #0]
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2246      	movs	r2, #70	; 0x46
 8001f74:	5a9b      	ldrh	r3, [r3, r2]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b299      	uxth	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2246      	movs	r2, #70	; 0x46
 8001f80:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2246      	movs	r2, #70	; 0x46
 8001f86:	5a9b      	ldrh	r3, [r3, r2]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d103      	bne.n	8001f96 <SPI_RxISR_8BIT+0x4a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	0018      	movs	r0, r3
 8001f92:	f000 fa45 	bl	8002420 <SPI_CloseRx_ISR>
  }
}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b002      	add	sp, #8
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	b292      	uxth	r2, r2
 8001fb2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	1c9a      	adds	r2, r3, #2
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2246      	movs	r2, #70	; 0x46
 8001fc2:	5a9b      	ldrh	r3, [r3, r2]
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	b299      	uxth	r1, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2246      	movs	r2, #70	; 0x46
 8001fce:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2246      	movs	r2, #70	; 0x46
 8001fd4:	5a9b      	ldrh	r3, [r3, r2]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d103      	bne.n	8001fe4 <SPI_RxISR_16BIT+0x46>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f000 fa1e 	bl	8002420 <SPI_CloseRx_ISR>
  }
}
 8001fe4:	46c0      	nop			; (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b002      	add	sp, #8
 8001fea:	bd80      	pop	{r7, pc}

08001fec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	1dfb      	adds	r3, r7, #7
 8001ffa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ffc:	f7fe fb2a 	bl	8000654 <HAL_GetTick>
 8002000:	0002      	movs	r2, r0
 8002002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002004:	1a9b      	subs	r3, r3, r2
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	18d3      	adds	r3, r2, r3
 800200a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800200c:	f7fe fb22 	bl	8000654 <HAL_GetTick>
 8002010:	0003      	movs	r3, r0
 8002012:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002014:	4b3a      	ldr	r3, [pc, #232]	; (8002100 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	015b      	lsls	r3, r3, #5
 800201a:	0d1b      	lsrs	r3, r3, #20
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	4353      	muls	r3, r2
 8002020:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002022:	e058      	b.n	80020d6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	3301      	adds	r3, #1
 8002028:	d055      	beq.n	80020d6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800202a:	f7fe fb13 	bl	8000654 <HAL_GetTick>
 800202e:	0002      	movs	r2, r0
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	69fa      	ldr	r2, [r7, #28]
 8002036:	429a      	cmp	r2, r3
 8002038:	d902      	bls.n	8002040 <SPI_WaitFlagStateUntilTimeout+0x54>
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d142      	bne.n	80020c6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	21e0      	movs	r1, #224	; 0xe0
 800204c:	438a      	bics	r2, r1
 800204e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	2382      	movs	r3, #130	; 0x82
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	429a      	cmp	r2, r3
 800205a:	d113      	bne.n	8002084 <SPI_WaitFlagStateUntilTimeout+0x98>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	2380      	movs	r3, #128	; 0x80
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	429a      	cmp	r2, r3
 8002066:	d005      	beq.n	8002074 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	429a      	cmp	r2, r3
 8002072:	d107      	bne.n	8002084 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2140      	movs	r1, #64	; 0x40
 8002080:	438a      	bics	r2, r1
 8002082:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	019b      	lsls	r3, r3, #6
 800208c:	429a      	cmp	r2, r3
 800208e:	d110      	bne.n	80020b2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	491a      	ldr	r1, [pc, #104]	; (8002104 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800209c:	400a      	ands	r2, r1
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2180      	movs	r1, #128	; 0x80
 80020ac:	0189      	lsls	r1, r1, #6
 80020ae:	430a      	orrs	r2, r1
 80020b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	225d      	movs	r2, #93	; 0x5d
 80020b6:	2101      	movs	r1, #1
 80020b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	225c      	movs	r2, #92	; 0x5c
 80020be:	2100      	movs	r1, #0
 80020c0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e017      	b.n	80020f6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	4013      	ands	r3, r2
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	425a      	negs	r2, r3
 80020e6:	4153      	adcs	r3, r2
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	001a      	movs	r2, r3
 80020ec:	1dfb      	adds	r3, r7, #7
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d197      	bne.n	8002024 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	0018      	movs	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b008      	add	sp, #32
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	20000000 	.word	0x20000000
 8002104:	ffffdfff 	.word	0xffffdfff

08002108 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	; 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002116:	2317      	movs	r3, #23
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800211e:	f7fe fa99 	bl	8000654 <HAL_GetTick>
 8002122:	0002      	movs	r2, r0
 8002124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002126:	1a9b      	subs	r3, r3, r2
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	18d3      	adds	r3, r2, r3
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800212e:	f7fe fa91 	bl	8000654 <HAL_GetTick>
 8002132:	0003      	movs	r3, r0
 8002134:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	330c      	adds	r3, #12
 800213c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800213e:	4b41      	ldr	r3, [pc, #260]	; (8002244 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	0013      	movs	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	189b      	adds	r3, r3, r2
 8002148:	00da      	lsls	r2, r3, #3
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	0d1b      	lsrs	r3, r3, #20
 800214e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002150:	4353      	muls	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002154:	e068      	b.n	8002228 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	23c0      	movs	r3, #192	; 0xc0
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	429a      	cmp	r2, r3
 800215e:	d10a      	bne.n	8002176 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d107      	bne.n	8002176 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	b2da      	uxtb	r2, r3
 800216c:	2117      	movs	r1, #23
 800216e:	187b      	adds	r3, r7, r1
 8002170:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002172:	187b      	adds	r3, r7, r1
 8002174:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	3301      	adds	r3, #1
 800217a:	d055      	beq.n	8002228 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800217c:	f7fe fa6a 	bl	8000654 <HAL_GetTick>
 8002180:	0002      	movs	r2, r0
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002188:	429a      	cmp	r2, r3
 800218a:	d902      	bls.n	8002192 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	2b00      	cmp	r3, #0
 8002190:	d142      	bne.n	8002218 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	21e0      	movs	r1, #224	; 0xe0
 800219e:	438a      	bics	r2, r1
 80021a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	2382      	movs	r3, #130	; 0x82
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d113      	bne.n	80021d6 <SPI_WaitFifoStateUntilTimeout+0xce>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d005      	beq.n	80021c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d107      	bne.n	80021d6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2140      	movs	r1, #64	; 0x40
 80021d2:	438a      	bics	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	019b      	lsls	r3, r3, #6
 80021de:	429a      	cmp	r2, r3
 80021e0:	d110      	bne.n	8002204 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4916      	ldr	r1, [pc, #88]	; (8002248 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80021ee:	400a      	ands	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2180      	movs	r1, #128	; 0x80
 80021fe:	0189      	lsls	r1, r1, #6
 8002200:	430a      	orrs	r2, r1
 8002202:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	225d      	movs	r2, #93	; 0x5d
 8002208:	2101      	movs	r1, #1
 800220a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	225c      	movs	r2, #92	; 0x5c
 8002210:	2100      	movs	r1, #0
 8002212:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e010      	b.n	800223a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	3b01      	subs	r3, #1
 8002226:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	4013      	ands	r3, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	429a      	cmp	r2, r3
 8002236:	d18e      	bne.n	8002156 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	0018      	movs	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	b00a      	add	sp, #40	; 0x28
 8002240:	bd80      	pop	{r7, pc}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	20000000 	.word	0x20000000
 8002248:	ffffdfff 	.word	0xffffdfff

0800224c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af02      	add	r7, sp, #8
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	2382      	movs	r3, #130	; 0x82
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	429a      	cmp	r2, r3
 8002262:	d113      	bne.n	800228c <SPI_EndRxTransaction+0x40>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	021b      	lsls	r3, r3, #8
 800226c:	429a      	cmp	r2, r3
 800226e:	d005      	beq.n	800227c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	2380      	movs	r3, #128	; 0x80
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	429a      	cmp	r2, r3
 800227a:	d107      	bne.n	800228c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2140      	movs	r1, #64	; 0x40
 8002288:	438a      	bics	r2, r1
 800228a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	0013      	movs	r3, r2
 8002296:	2200      	movs	r2, #0
 8002298:	2180      	movs	r1, #128	; 0x80
 800229a:	f7ff fea7 	bl	8001fec <SPI_WaitFlagStateUntilTimeout>
 800229e:	1e03      	subs	r3, r0, #0
 80022a0:	d007      	beq.n	80022b2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a6:	2220      	movs	r2, #32
 80022a8:	431a      	orrs	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e026      	b.n	8002300 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	2382      	movs	r3, #130	; 0x82
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d11f      	bne.n	80022fe <SPI_EndRxTransaction+0xb2>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d005      	beq.n	80022d6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d113      	bne.n	80022fe <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	23c0      	movs	r3, #192	; 0xc0
 80022da:	00d9      	lsls	r1, r3, #3
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	0013      	movs	r3, r2
 80022e4:	2200      	movs	r2, #0
 80022e6:	f7ff ff0f 	bl	8002108 <SPI_WaitFifoStateUntilTimeout>
 80022ea:	1e03      	subs	r3, r0, #0
 80022ec:	d007      	beq.n	80022fe <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f2:	2220      	movs	r2, #32
 80022f4:	431a      	orrs	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e000      	b.n	8002300 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	0018      	movs	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	b004      	add	sp, #16
 8002306:	bd80      	pop	{r7, pc}

08002308 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	23c0      	movs	r3, #192	; 0xc0
 8002318:	0159      	lsls	r1, r3, #5
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	0013      	movs	r3, r2
 8002322:	2200      	movs	r2, #0
 8002324:	f7ff fef0 	bl	8002108 <SPI_WaitFifoStateUntilTimeout>
 8002328:	1e03      	subs	r3, r0, #0
 800232a:	d007      	beq.n	800233c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002330:	2220      	movs	r2, #32
 8002332:	431a      	orrs	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e027      	b.n	800238c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	0013      	movs	r3, r2
 8002346:	2200      	movs	r2, #0
 8002348:	2180      	movs	r1, #128	; 0x80
 800234a:	f7ff fe4f 	bl	8001fec <SPI_WaitFlagStateUntilTimeout>
 800234e:	1e03      	subs	r3, r0, #0
 8002350:	d007      	beq.n	8002362 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002356:	2220      	movs	r2, #32
 8002358:	431a      	orrs	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e014      	b.n	800238c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	23c0      	movs	r3, #192	; 0xc0
 8002366:	00d9      	lsls	r1, r3, #3
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	0013      	movs	r3, r2
 8002370:	2200      	movs	r2, #0
 8002372:	f7ff fec9 	bl	8002108 <SPI_WaitFifoStateUntilTimeout>
 8002376:	1e03      	subs	r3, r0, #0
 8002378:	d007      	beq.n	800238a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800237e:	2220      	movs	r2, #32
 8002380:	431a      	orrs	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e000      	b.n	800238c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b004      	add	sp, #16
 8002392:	bd80      	pop	{r7, pc}

08002394 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800239c:	f7fe f95a 	bl	8000654 <HAL_GetTick>
 80023a0:	0003      	movs	r3, r0
 80023a2:	60fb      	str	r3, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2120      	movs	r1, #32
 80023b0:	438a      	bics	r2, r1
 80023b2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2164      	movs	r1, #100	; 0x64
 80023ba:	0018      	movs	r0, r3
 80023bc:	f7ff ffa4 	bl	8002308 <SPI_EndRxTxTransaction>
 80023c0:	1e03      	subs	r3, r0, #0
 80023c2:	d005      	beq.n	80023d0 <SPI_CloseRxTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c8:	2220      	movs	r2, #32
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d117      	bne.n	8002408 <SPI_CloseRxTx_ISR+0x74>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	225d      	movs	r2, #93	; 0x5d
 80023dc:	5c9b      	ldrb	r3, [r3, r2]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d108      	bne.n	80023f6 <SPI_CloseRxTx_ISR+0x62>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	225d      	movs	r2, #93	; 0x5d
 80023e8:	2101      	movs	r1, #1
 80023ea:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	0018      	movs	r0, r3
 80023f0:	f7fd ff14 	bl	800021c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80023f4:	e010      	b.n	8002418 <SPI_CloseRxTx_ISR+0x84>
        hspi->State = HAL_SPI_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	225d      	movs	r2, #93	; 0x5d
 80023fa:	2101      	movs	r1, #1
 80023fc:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	0018      	movs	r0, r3
 8002402:	f7ff fc6d 	bl	8001ce0 <HAL_SPI_TxRxCpltCallback>
}
 8002406:	e007      	b.n	8002418 <SPI_CloseRxTx_ISR+0x84>
      hspi->State = HAL_SPI_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	225d      	movs	r2, #93	; 0x5d
 800240c:	2101      	movs	r1, #1
 800240e:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	0018      	movs	r0, r3
 8002414:	f7ff fc6c 	bl	8001cf0 <HAL_SPI_ErrorCallback>
}
 8002418:	46c0      	nop			; (mov r8, r8)
 800241a:	46bd      	mov	sp, r7
 800241c:	b004      	add	sp, #16
 800241e:	bd80      	pop	{r7, pc}

08002420 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2160      	movs	r1, #96	; 0x60
 8002434:	438a      	bics	r2, r1
 8002436:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002438:	f7fe f90c 	bl	8000654 <HAL_GetTick>
 800243c:	0002      	movs	r2, r0
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2164      	movs	r1, #100	; 0x64
 8002442:	0018      	movs	r0, r3
 8002444:	f7ff ff02 	bl	800224c <SPI_EndRxTransaction>
 8002448:	1e03      	subs	r3, r0, #0
 800244a:	d005      	beq.n	8002458 <SPI_CloseRx_ISR+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002450:	2220      	movs	r2, #32
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	225d      	movs	r2, #93	; 0x5d
 800245c:	2101      	movs	r1, #1
 800245e:	5499      	strb	r1, [r3, r2]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002464:	2b00      	cmp	r3, #0
 8002466:	d104      	bne.n	8002472 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	0018      	movs	r0, r3
 800246c:	f7fd fed6 	bl	800021c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002470:	e003      	b.n	800247a <SPI_CloseRx_ISR+0x5a>
      HAL_SPI_ErrorCallback(hspi);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	0018      	movs	r0, r3
 8002476:	f7ff fc3b 	bl	8001cf0 <HAL_SPI_ErrorCallback>
}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	46bd      	mov	sp, r7
 800247e:	b002      	add	sp, #8
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <__libc_init_array>:
 8002484:	b570      	push	{r4, r5, r6, lr}
 8002486:	2600      	movs	r6, #0
 8002488:	4d0c      	ldr	r5, [pc, #48]	; (80024bc <__libc_init_array+0x38>)
 800248a:	4c0d      	ldr	r4, [pc, #52]	; (80024c0 <__libc_init_array+0x3c>)
 800248c:	1b64      	subs	r4, r4, r5
 800248e:	10a4      	asrs	r4, r4, #2
 8002490:	42a6      	cmp	r6, r4
 8002492:	d109      	bne.n	80024a8 <__libc_init_array+0x24>
 8002494:	2600      	movs	r6, #0
 8002496:	f000 f821 	bl	80024dc <_init>
 800249a:	4d0a      	ldr	r5, [pc, #40]	; (80024c4 <__libc_init_array+0x40>)
 800249c:	4c0a      	ldr	r4, [pc, #40]	; (80024c8 <__libc_init_array+0x44>)
 800249e:	1b64      	subs	r4, r4, r5
 80024a0:	10a4      	asrs	r4, r4, #2
 80024a2:	42a6      	cmp	r6, r4
 80024a4:	d105      	bne.n	80024b2 <__libc_init_array+0x2e>
 80024a6:	bd70      	pop	{r4, r5, r6, pc}
 80024a8:	00b3      	lsls	r3, r6, #2
 80024aa:	58eb      	ldr	r3, [r5, r3]
 80024ac:	4798      	blx	r3
 80024ae:	3601      	adds	r6, #1
 80024b0:	e7ee      	b.n	8002490 <__libc_init_array+0xc>
 80024b2:	00b3      	lsls	r3, r6, #2
 80024b4:	58eb      	ldr	r3, [r5, r3]
 80024b6:	4798      	blx	r3
 80024b8:	3601      	adds	r6, #1
 80024ba:	e7f2      	b.n	80024a2 <__libc_init_array+0x1e>
 80024bc:	08002534 	.word	0x08002534
 80024c0:	08002534 	.word	0x08002534
 80024c4:	08002534 	.word	0x08002534
 80024c8:	08002538 	.word	0x08002538

080024cc <memset>:
 80024cc:	0003      	movs	r3, r0
 80024ce:	1882      	adds	r2, r0, r2
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d100      	bne.n	80024d6 <memset+0xa>
 80024d4:	4770      	bx	lr
 80024d6:	7019      	strb	r1, [r3, #0]
 80024d8:	3301      	adds	r3, #1
 80024da:	e7f9      	b.n	80024d0 <memset+0x4>

080024dc <_init>:
 80024dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024e2:	bc08      	pop	{r3}
 80024e4:	469e      	mov	lr, r3
 80024e6:	4770      	bx	lr

080024e8 <_fini>:
 80024e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ee:	bc08      	pop	{r3}
 80024f0:	469e      	mov	lr, r3
 80024f2:	4770      	bx	lr
